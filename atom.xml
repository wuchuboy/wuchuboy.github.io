<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>梧杵</title>
  
  <subtitle>日常学习记录</subtitle>
  <link href="https://wuchu.site/atom.xml" rel="self"/>
  
  <link href="https://wuchu.site/"/>
  <updated>2024-11-27T07:49:56.850Z</updated>
  <id>https://wuchu.site/</id>
  
  <author>
    <name>吴楚</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>深入理解 PostgreSQL 中的内存上下文（MmeoryContext）</title>
    <link href="https://wuchu.site/2024/11/27/mmeoryContext/"/>
    <id>https://wuchu.site/2024/11/27/mmeoryContext/</id>
    <published>2024-11-27T07:11:10.000Z</published>
    <updated>2024-11-27T07:49:56.850Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在 PostgreSQL 的旧版本中，常常需要处理大量以指针传值的查询，因而存在着内存泄露的问题，直到查询结束时才能将内存收回。尤其是在处理 TOAST 数据时，需要使用大量的内存，因而使得内存泄露的问题更加明显。为此，PostgreSQL 在 7.1 版本开始实现了内存上下文管理机制。</p></blockquote><h3 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h3><p>内存上下文机制本质上就是<strong>对内存进行分类和分层</strong>。</p><p>比如说我们需要为用户发来的命令，例如 <code>&quot;select * from t&quot;</code>，开辟一个内存空间并存储它，同时在对命令进行语法解析后生成的语法解析树也需要内存保存，因此 PostgreSQL 使用 <code>MessageContext</code> 来存储。</p><p>对于不经常改变的 Catalog Relation（元数据） 可以放入缓存中，不必每次都从磁盘中读取，那么 Cache 所需的内存就可以由 <code>CacheMemoryContext</code> 进行管理。</p><p>当执行一个事务时，一定会伴随着内存分配，比如元组的扫描、索引的扫描或者元组的排序等等，这些内存可能需要在事务结束后才释放，因此可由 <code>CurTransactionContext</code>、<code>ExecutorState</code>、<code>PortalHeapMemory</code> 等内存上下文来管理。</p><p>可以看到，在数据库运行过程中，会不断地申请各种各样的内存，PostgreSQL 将其分门别类整理好，在内存释放时就将更加从容和方便。即系统中的内存分配操作在<strong>各种语义</strong>的内存上下文中进行，所有在内存上下文中分配的内存空间都通过内存上下文进行记录。<strong>因此可以很轻松地通过释放内存上下文来释放其中所有的内存，而不用费心地去释放其中的每一块内存。</strong></p><p>PostgreSQL 中的每一个子进程都拥有多个私有的内存上下文，这些上下文将会组成一个树形结构，更准确地说，是一棵多叉树，根节点为 <code>TopMemoryContext</code>。因为对于数据库而言，一个查询处理是一个层层递进的过程，正如查询计划树一样。下图展示了最常用的几种内存上下文，<code>ErrorContext</code> 专门用于错误处理，因为我们的 Error Message 也需要保存在堆内存上，而后输出至文件中:</p><img                         lazyload                       alt="image"                       data-src="/2024/11/27/mmeoryContext/1.png"                        class="" title="图1"                 ><h3 id="2-MemoryContextData"><a href="#2-MemoryContextData" class="headerlink" title="2. MemoryContextData"></a>2. MemoryContextData</h3><p><code>MemoryContextData</code> 是一个抽象类，包含了内存上下文之间的关联关系，以及对内存上下文进行操作的一系列函数，可以有多种实现，但目前只有 <code>AllocSetContext</code> 这一种实现。而在 C 语言中要想实现继承和多态，那么 <code>AllocSetContext</code> 的起始位置就必须是 <code>MemoryContextData</code>，这一点接下来我们就会看到。</p><p>首先来看看 <code>MemoryContextData</code> 的具体内容:</p><img                         lazyload                       alt="image"                       data-src="/2024/11/27/mmeoryContext/2.png"                        class="" title="图2"                 ><p>有几个字段需要进一步地解释和说明:</p><p><code>isReset</code>: 表示<strong>当前内存上下文从上一次重置到当前是否还没有内存分配</strong>，初始值为 <code>true</code>，即重置以来还没有进行内存分配。当进行了内存分配时，该值将会被更新为 <code>false</code>。那么最终在重置内存上下文时，如果发现该字段为 <code>true</code>，则表示该内存上下文还没有进行过内存分配，就可以不进行实际的重置工作，从而提高效率。</p><p><code>methods</code>: 包含了子类必须实现的全部方法，包括内存分配、内存释放等:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">MemoryContextMethods</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">void</span>    *(*alloc) (MemoryContext context, Size size);                    <span class="comment">// 内存分配</span></span><br><span class="line">    <span class="built_in">void</span>     (*free_p) (MemoryContext context, <span class="type">void</span> *pointer);               <span class="comment">// 内存释放</span></span><br><span class="line">    <span class="type">void</span>    *(*realloc) (MemoryContext context, <span class="type">void</span> *pointer, Size size);   <span class="comment">// 内存重分配</span></span><br><span class="line">    <span class="built_in">void</span>     (*reset) (MemoryContext context);                               <span class="comment">// 内存重置</span></span><br><span class="line">    <span class="built_in">void</span>     (*delete_context) (MemoryContext context);                      <span class="comment">// 删除某个内存上下文</span></span><br><span class="line">    <span class="built_in">Size</span>     (*get_chunk_space) (MemoryContext context, <span class="type">void</span> *pointer);      <span class="comment">// 获取内存片大小</span></span><br><span class="line">    <span class="built_in">bool</span>     (*is_empty) (MemoryContext context);                            <span class="comment">// 判断内存上下文是否为空</span></span><br><span class="line">    <span class="built_in">void</span>     (*stats) (MemoryContext context,                                </span><br><span class="line">                          MemoryStatsPrintFunc printfunc, <span class="type">void</span> *passthru,</span><br><span class="line">                          MemoryContextCounters *totals, <span class="type">bool</span> print_to_stderr);</span><br><span class="line">&#125; MemoryContextMethods;</span><br></pre></td></tr></table></figure><p>前面已经提到了 <code>MemoryContextData</code> 目前只有 <code>AllocSetContext</code> 这一种实现方式，那么这些方法的实现就可以直接在 <code>src/backend/utils/mmgr/aset.c</code> 找到。</p><p><code>parent</code>、<code>firstchild</code>、<code>prevchild</code> 和 <code>nextchild</code> 构成了内存上下文的树形结构，并且每一个节点都保存了其父指针和兄弟指针，也就是说，只要能拿到树中的任意一个节点即可对整棵树进行遍历:</p><img                         lazyload                       alt="image"                       data-src="/2024/11/27/mmeoryContext/3.png"                        class="" title="图3"                 ><p>因此，<code>MemoryContextData</code> 最重要的作用便是管理各个内存上下文之间的关联关系，在清除一个内存上下文时，将会遍历该节点的所有子节点并对其进行释放。</p><h3 id="3-AllocSetContext"><a href="#3-AllocSetContext" class="headerlink" title="3. AllocSetContext"></a>3. AllocSetContext</h3><p><code>AllocSetContext</code> 是 <code>MemoryContextData</code> 的具体实现，<strong>其核心职责为内存的分配和释放</strong>，内存上下文之间的关联关系由 <code>MemoryContextData</code> 保存。</p><h4 id="3-1-Region-Based-Memory-Management"><a href="#3-1-Region-Based-Memory-Management" class="headerlink" title="3.1 Region-Based Memory Management"></a>3.1 Region-Based Memory Management</h4><p>这里就有必要对 PostgreSQL 的内存管理进行进一步地说明。PostgreSQL 将内存分为内存块（Block）和内存片（Chunk），其中内存块是通过 <code>malloc()</code> 这一库函数调用取得的。而<strong>一个内存块中将会有一个或者多个内存片，内存片才是 PostgreSQL 的最小存储单元</strong>。简单的理解就是 PostgreSQL 首先向操作系统要一块比较大的内存（Block），然后在对这一块大内存进行切割（Chunk），把切割之后的内存返回给调用方。</p><p>这么做的目的一方面是为了减少系统调用，在下一次的内存分配时即可直接返回给调用方，而无需进行系统调用。另一个作用就是减少额外的系统内存占用，因为 <code>malloc()</code> 所返回的内存必须要有 Header（或者叫 Cookie） 记录其内存总大小， 否则 <code>free()</code> 将无法正常工作。</p><p>下图为 VC6 编译器在进行 <code>malloc</code> 调用时返回的结果的内存布局，其中 Debug Header 只有在 Debug 模式下才会出现，但是所分配内存区域的首、尾两端的 Cookie 却必不可少，因为它记录了一次 <code>malloc</code> 所分配的总内存，总计占用 8 Bytes。</p><img                         lazyload                       alt="image"                       data-src="/2024/11/27/mmeoryContext/4.png"                        class="" title="图4"                 ><p>也就是说，我们每次使用 <code>malloc()</code> 申请 24 Bytes 的内存，系统最少消耗 32 Bytes 的内存，那么对于应用程序来说，内存的实际使用率为 24&#x2F;32 &#x3D; 0.75。如果我们有 100 万个 <code>malloc</code> 调用，那么将会有非常多的内存用于 Cookie 中，如此一来内存使用效率将会非常之低。</p><p>因此，PostgreSQL 使用了一种名为 Region-Based Memory Management 的内存管理方式，原理其实非常简单: 使用 <code>malloc</code> 申请较大的内存块，然后将该内存块切割成一个一个的小的内存片，将内存片返回给调用方。当调用方使用完毕返还时，并不会直接返回给操作系统，而是添加至 Free List 这一空闲链表的指定区域内，以用于下一次的内存分配。</p><h4 id="3-2-基本数据结构"><a href="#3-2-基本数据结构" class="headerlink" title="3.2 基本数据结构"></a>3.2 基本数据结构</h4><p>接下里就来揭开 <code>AllocSetContext</code> 的神秘面纱，其结构如下所示:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">AllocSetContext</span></span><br><span class="line">&#123;</span><br><span class="line">    MemoryContextData header;       <span class="comment">// header 信息，保存了内存上下文之间的关联关系</span></span><br><span class="line">    </span><br><span class="line">    AllocBlockblocks;             <span class="comment">// 当前内存上下文中所有内存块所组成的双向链表</span></span><br><span class="line">    AllocChunkfreelist[ALLOCSET_NUM_FREELISTS];<span class="comment">// 当前内存上下文中空闲内存片的数组</span></span><br><span class="line">    </span><br><span class="line">    Size        initBlockSize;    <span class="comment">// 初始内存块的大小</span></span><br><span class="line">    Size        maxBlockSize;    <span class="comment">// 允许申请的最大内存块大小</span></span><br><span class="line">    Size        nextBlockSize;    <span class="comment">// 下一个要分配的内存块大小</span></span><br><span class="line">    Size        allocChunkLimit;    <span class="comment">// 分配内存片的尺寸阈值</span></span><br><span class="line">    </span><br><span class="line">    AllocBlockkeeper;             <span class="comment">// 保留在 keeper 中的内存块在上下文重置时会保留，只做重置操作，而不进行删除</span></span><br><span class="line">                                    </span><br><span class="line">    <span class="type">int</span>         freeListIndex;      <span class="comment">// 在 context_freelists 中的顺序。</span></span><br><span class="line">                                    <span class="comment">// 0 表示默认 freeList，1 表示小内存 freeList，-1 表示不需要进入 freeList</span></span><br><span class="line">&#125; AllocSetContext;</span><br></pre></td></tr></table></figure><p><code>initBlockSize</code> 和 <code>maxBlockSize</code> 在创建内存上下文时即被初始化，并且在初始化时 <code>initBlockSize</code> 和 <code>maxBlockSize</code> 具有相同的值。<code>nextBlockSize</code> 表示下一次分配的内存块的大小，在进行内存分配时，如果需要一个新的 Block，那么该内存块的大小将采用 <code>nextBlockSize</code> 的值。通常来说，<code>nextBlockSize</code> 在每次分配新的 Block 时都会以 2 倍的幅度增长，但最大不能超过 <code>maxBlockSize</code>:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">set-&gt;nextBlockSize &lt;&lt;= <span class="number">1</span>;                       <span class="comment">// 设置为上一次的两倍</span></span><br><span class="line"><span class="keyword">if</span> (set-&gt;nextBlockSize &gt; set-&gt;maxBlockSize)</span><br><span class="line">    set-&gt;nextBlockSize = set-&gt;maxBlockSize;     <span class="comment">// 若超过阈值，则按阈值计算</span></span><br></pre></td></tr></table></figure><p><code>AllocSetContext</code> 的整体概览如下图所示:</p><img                         lazyload                       alt="image"                       data-src="/2024/11/27/mmeoryContext/5.png"                        class="" title="图5"                 ><p><strong><code>AllocBlockData</code> 就是我们上面所说的大的内存块，由 <code>malloc()</code> 调用申请。而 <code>AllocChunkData</code> 则是小的内存片，一个 Block 中将会有一个或者多个内存片，空闲内存片之间使用单向链表这一数据结构保存</strong>。</p><p>另外，在源码中我们可以看到 <code>AllocBlockData</code>、<code>AllocBlock</code> 以及 <code>AllocChunkData</code> 和 <code>AllocChunk</code>，后者其实是前者的指针类型，只不过是一个 <code>typedef</code> 而已:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">AllocBlockData</span> *AllocBlock;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">AllocChunkData</span> *AllocChunk;</span><br></pre></td></tr></table></figure><p><code>blocks</code> 中保存了指向 <code>AllocBlockData</code> 节点所组成的双向链表的 Header 节点:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">AllocBlockData</span></span><br><span class="line">&#123;</span><br><span class="line">    AllocSetaset;           <span class="comment">// 该内存块所处的 AllocSetContext</span></span><br><span class="line">    AllocBlockprev;<span class="comment">// 前驱指针</span></span><br><span class="line">    AllocBlocknext;<span class="comment">// 后继指针</span></span><br><span class="line">    <span class="type">char</span>       *freeptr;<span class="comment">// 指向该内存块空闲区域的首地址</span></span><br><span class="line">    <span class="type">char</span>       *endptr;<span class="comment">// 指向该内存块空闲区域的结束地址</span></span><br><span class="line">&#125; AllocBlockData;</span><br></pre></td></tr></table></figure><p>前面我们已经知道了一个内存块（Block）中会被切割成一个或者多个内存片（Chunk），那么当切割出去一部分内存片之后，就需要知道这一个内存块还有那些空闲区域可供切割，<code>freeptr</code> 和 <code>endptr</code> 这两个指针就组成了带有边界的空闲区域，那么下一次就知道从哪儿开始切割内存片了。</p><p>每个内存片会包含一个头部信息，用于保存元信息，其结构如下:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">AllocChunkData</span></span><br><span class="line">&#123;</span><br><span class="line">    Size    size;           <span class="comment">// 内存片的实际大小，以 2 的幂为大小进行向上取整</span></span><br><span class="line">    Size    requested_size; <span class="comment">// debug 使用</span></span><br><span class="line">    </span><br><span class="line">    <span class="type">void</span>   *aset;           <span class="comment">// 该指针有两个作用，使用时指向 AllocSet，空闲时作为 next 指针链接其空闲链表</span></span><br><span class="line">&#125; AllocChunkData;</span><br></pre></td></tr></table></figure><p>其中由 <code>aset</code> 指针组成的空闲内存片链表（<code>freelist</code>）相当重要，这些空闲内存片将用于再分配，并且有着多种不同大小的内存片以供分配。</p><p><code>freelist</code> 数组的大小默认为 11，能够保存 11 种不同大小的空闲内存片，对于数组的第 K 个元素，其保存的内存片大小为 <code>2^(K+2)</code> 字节。K 从 1 开始取值，也就是说，<code>freelist</code> 数组中最小的内存片大小为 8 Bytes，最大的内存片为 8192 bytes（默认情况下），相同大小的内存片由链表链接:</p><img                         lazyload                       alt="image"                       data-src="/2024/11/27/mmeoryContext/6.png"                        class="" title="图6"                 ><p>值得注意的是，所有 <code>freelist</code> 中的内存片的大小都为 2 的指数。当需要一个大小为 size 的内存时，将会根据向上取整的规则取出 <code>freelist</code> 中的空闲内存片。如果所申请的内存大小超过了 <code>allocChunkLimit</code> 字段的值，那么此次内存分配将会申请一个新的独立的内存块，并且在该内存块中只存放这一个内存片。当内存片被释放时，将整个内存块一并释放，不再追加至 <code>freelist</code> 空闲链表中。</p><h3 id="4-内存分配的实现细节"><a href="#4-内存分配的实现细节" class="headerlink" title="4. 内存分配的实现细节"></a>4. 内存分配的实现细节</h3><p>在 PostgreSQL 中，所有内存的申请、释放和重置都是在内存上下文中进行的，因此不会直接使用 <code>malloc()</code>、<code>realloc()</code> 和 <code>free()</code> 系统调用函数，而是使用 <code>palloc()</code>、<code>repalloc()</code> 和 <code>pfree()</code> 来实现内存的分配、重分配和释放。</p><h4 id="4-1-内存的分配"><a href="#4-1-内存的分配" class="headerlink" title="4.1 内存的分配"></a>4.1 内存的分配</h4><p>内存的分配由 <code>AllocSetContext</code> 中的 <code>AllocSetAlloc()</code> 函数实现，即在 <code>palloc()</code> 方法中，实际上会调用 <code>AllocSetAlloc()</code> 方法:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> * <span class="title">palloc</span><span class="params">(Size size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">void</span>   *ret;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在当前内存上下文中进行内存分配</span></span><br><span class="line">MemoryContext context = CurrentMemoryContext;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将 isReset 标志位设置为 false，那么在释放内存上下文时就需要清理其内存</span></span><br><span class="line">context-&gt;isReset = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 此处为多态实现，目前只有 AllocSetAlloc() 这一个实现</span></span><br><span class="line">ret = context-&gt;methods-&gt;<span class="built_in">alloc</span>(context, size);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">unlikely</span>(ret == <span class="literal">NULL</span>))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 此处将打印 OOM 错误信息</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而在 <code>AllocSetAlloc()</code> 方法中，则会首先判断所申请的内存大小 <code>size</code> 是否大于 <code>allocChunkLimit</code>，若大于该值，则无法从 <code>freelist</code> 空闲内存片链表中取出空闲内存片，必须调用 <code>malloc()</code> 重新分配新的内存块。当然，即使 <code>size</code> 小于等于 CHUNK_LIMIT 阈值，如果 <code>freelist</code> 没有多余的空闲内存片的话，依然需要向 OS 申请内存:</p><h5 id="4-1-1-当申请的内存大小超过了allocChunkLimit阈值"><a href="#4-1-1-当申请的内存大小超过了allocChunkLimit阈值" class="headerlink" title="4.1.1 当申请的内存大小超过了allocChunkLimit阈值"></a>4.1.1 当申请的内存大小超过了allocChunkLimit阈值</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 若 size 大于 allocChunkLimit 阈值，则需申请新的内存块</span></span><br><span class="line"><span class="keyword">if</span> (size &gt; set-&gt;allocChunkLimit)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 字节对齐</span></span><br><span class="line">chunk_size = <span class="built_in">MAXALIGN</span>(size);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 除开申请的内存片以外，还需要为 AllocBlockData 和 AllocChunkData 预留空间</span></span><br><span class="line">blksize = chunk_size + ALLOC_BLOCKHDRSZ + ALLOC_CHUNKHDRSZ;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向 OS 申请内存，这里使用的是 malloc</span></span><br><span class="line">block = (AllocBlock) <span class="built_in">malloc</span>(blksize);</span><br><span class="line"><span class="keyword">if</span> (block == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新计数器</span></span><br><span class="line">context-&gt;mem_allocated += blksize;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置内存块信息</span></span><br><span class="line">block-&gt;aset = set;</span><br><span class="line"><span class="comment">// 此时将不会有空闲空间用于切割更多的 Chunk 了，因此 freeptr 和 endptr 将指向末尾</span></span><br><span class="line">block-&gt;freeptr = block-&gt;endptr = ((<span class="type">char</span> *) block) + blksize;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置内存片信息</span></span><br><span class="line">chunk = (AllocChunk) (((<span class="type">char</span> *) block) + ALLOC_BLOCKHDRSZ);</span><br><span class="line">chunk-&gt;aset = set;</span><br><span class="line">chunk-&gt;size = chunk_size;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 需要将该内存块添加至上下文的 blocks 双向链表中，以便后续的释放</span></span><br><span class="line"><span class="keyword">if</span> (set-&gt;blocks != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 链表头不为空，则将该 Block 插入至双向链表的第二个位置。</span></span><br><span class="line"><span class="comment">// 这是因为链表的第一个 Block 通常用于切割 Chunk，而该 Block 显然没有能力再切割</span></span><br><span class="line">block-&gt;prev = set-&gt;blocks;</span><br><span class="line">block-&gt;next = set-&gt;blocks-&gt;next;</span><br><span class="line"><span class="keyword">if</span> (block-&gt;next)</span><br><span class="line">block-&gt;next-&gt;prev = block;</span><br><span class="line">set-&gt;blocks-&gt;next = block;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 链表头为空，则将其插入至链表头</span></span><br><span class="line">block-&gt;prev = <span class="literal">NULL</span>;</span><br><span class="line">block-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">set-&gt;blocks = block;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">AllocChunkGetPointer</span>(chunk);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-1-2-当申请的内存大小未超过allocChunkLimit阈值，且freelist-有空闲内存片"><a href="#4-1-2-当申请的内存大小未超过allocChunkLimit阈值，且freelist-有空闲内存片" class="headerlink" title="4.1.2 当申请的内存大小未超过allocChunkLimit阈值，且freelist 有空闲内存片"></a>4.1.2 当申请的内存大小未超过allocChunkLimit阈值，且freelist 有空闲内存片</h5><p>紧接着我们来讨论最简单的情况，即 <code>size &lt;= allocChunkLimit</code> 并且 <code>freelist</code> 中存在空闲内存片，此时只需要从 <code>freelist</code> 中计算出对应的 slot，然后从链表摘下一个内存片返回给调用方即可:</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// size &lt;= allocChunkLimit</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算 size 所对应的 freelist index</span></span><br><span class="line">fidx = AllocSetFreeIndex(size);</span><br><span class="line"><span class="comment">// 获取 index 所对应的内存片链表</span></span><br><span class="line"><span class="function"><span class="title">chunk</span> = set-&gt;</span>freelist[fidx];</span><br><span class="line"><span class="keyword">if</span> (chunk != NULL)</span><br><span class="line">&#123;</span><br><span class="line">A<span class="function"><span class="title">ssert</span>(chunk-&gt;</span>size &gt;= size);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使 header 指向下一个链表元素</span></span><br><span class="line"><span class="function"><span class="title">set</span>-&gt;</span><span class="function"><span class="title">freelist</span>[fidx] = (AllocChunk) chunk-&gt;</span>aset;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置内存上下文信息</span></span><br><span class="line"><span class="function"><span class="title">chunk</span>-&gt;</span>aset = (void *) set;</span><br><span class="line"></span><br><span class="line">return AllocChunkGetPointer(chunk);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-1-3-当前内存上下文所保存的blocks不为空，但没有足够空间"><a href="#4-1-3-当前内存上下文所保存的blocks不为空，但没有足够空间" class="headerlink" title="4.1.3 当前内存上下文所保存的blocks不为空，但没有足够空间"></a>4.1.3 当前内存上下文所保存的blocks不为空，但没有足够空间</h5><p>若当前内存上下文的 Block 中没有足够的内存空间来分配此次内存时，按照基本逻辑应该重新创建一个 Block，然后切割出对应的 Chunk 给用户。但是在这之前，当前 Block 中可能仍然有空闲空间，我们可以把这部分的空间切割成 Free Chunk 扔到 <code>freelist</code> 中，做到物尽其用，这部分代码不太核心，故不再此处详细分析。</p><h5 id="4-1-4-当前内存上下文所保存的blocks为空"><a href="#4-1-4-当前内存上下文所保存的blocks为空" class="headerlink" title="4.1.4 当前内存上下文所保存的blocks为空"></a>4.1.4 当前内存上下文所保存的blocks为空</h5><p>若当前内存上下文所保存的 <code>blocks</code> 为空，或者是经过了 4.1.3 步骤将旧的 Block 切割完毕，此时我们就需要创建一个新的 Block，新的 Block 通常为上一次分配的 Block 大小的 2 倍，但又不会超过 <code>maxBlockSize</code>:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 此时需要创建一个新的内存块</span></span><br><span class="line"><span class="keyword">if</span> (block == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">Sizerequired_size;</span><br><span class="line"></span><br><span class="line">blksize = set-&gt;nextBlockSize;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置下一次要分配的 Block 大小为当前的 2 倍</span></span><br><span class="line">set-&gt;nextBlockSize &lt;&lt;= <span class="number">1</span>;</span><br><span class="line"><span class="comment">// 若超过了阈值，则按阈值取值</span></span><br><span class="line"><span class="keyword">if</span> (set-&gt;nextBlockSize &gt; set-&gt;maxBlockSize)</span><br><span class="line">set-&gt;nextBlockSize = set-&gt;maxBlockSize;</span><br><span class="line"></span><br><span class="line"><span class="comment">// corner case: 若 blksize 小于预设的 Block 大小，则需要继续扩大 Block 大小</span></span><br><span class="line">required_size = chunk_size + ALLOC_BLOCKHDRSZ + ALLOC_CHUNKHDRSZ;</span><br><span class="line"><span class="keyword">while</span> (blksize &lt; required_size)</span><br><span class="line">blksize &lt;&lt;= <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Try to allocate it */</span></span><br><span class="line">block = (AllocBlock) <span class="built_in">malloc</span>(blksize);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 申请失败时使用更小的 blksize 进行重试</span></span><br><span class="line"><span class="keyword">while</span> (block == <span class="literal">NULL</span> &amp;&amp; blksize &gt; <span class="number">1024</span> * <span class="number">1024</span>)</span><br><span class="line">&#123;</span><br><span class="line">blksize &gt;&gt;= <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (blksize &lt; required_size)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">block = (AllocBlock) <span class="built_in">malloc</span>(blksize);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (block == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新计数器</span></span><br><span class="line">context-&gt;mem_allocated += blksize;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置内存块信息</span></span><br><span class="line">block-&gt;aset = set;</span><br><span class="line">block-&gt;freeptr = ((<span class="type">char</span> *) block) + ALLOC_BLOCKHDRSZ;</span><br><span class="line">block-&gt;endptr = ((<span class="type">char</span> *) block) + blksize;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Mark unallocated space NOACCESS. */</span></span><br><span class="line"><span class="built_in">VALGRIND_MAKE_MEM_NOACCESS</span>(block-&gt;freeptr,</span><br><span class="line">   blksize - ALLOC_BLOCKHDRSZ);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将该 block 插入至 blocks 链表的头部，而非第二个位置，因为下次 Chunk 切割需要从此 Block 开始</span></span><br><span class="line">block-&gt;prev = <span class="literal">NULL</span>;</span><br><span class="line">block-&gt;next = set-&gt;blocks;</span><br><span class="line"><span class="keyword">if</span> (block-&gt;next)</span><br><span class="line">block-&gt;next-&gt;prev = block;</span><br><span class="line">set-&gt;blocks = block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-1-5-最后，在有充足空闲空间的Block中切割Chunk"><a href="#4-1-5-最后，在有充足空闲空间的Block中切割Chunk" class="headerlink" title="4.1.5 最后，在有充足空闲空间的Block中切割Chunk"></a>4.1.5 最后，在有充足空闲空间的Block中切割Chunk</h5><p>当前置准备工作都做完之后，我们就可以在内存块中切割出所需要的 Chunk 了:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从 freeptr 开始切割出一个 Chunk</span></span><br><span class="line">chunk = (AllocChunk) (block-&gt;freeptr);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新 freeptr 指针指向</span></span><br><span class="line">block-&gt;freeptr += (chunk_size + ALLOC_CHUNKHDRSZ);</span><br><span class="line"><span class="built_in">Assert</span>(block-&gt;freeptr &lt;= block-&gt;endptr);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置内存片信息</span></span><br><span class="line">chunk-&gt;aset = (<span class="type">void</span> *) set;</span><br><span class="line">chunk-&gt;size = chunk_size;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">AllocChunkGetPointer</span>(chunk);</span><br></pre></td></tr></table></figure><p>最后，我们用一张简单的流程图来描述内存分配的大致过程:</p><img                         lazyload                       alt="image"                       data-src="/2024/11/27/mmeoryContext/7.png"                        class="" title="图7"                 ><h4 id="4-2-内存的释放"><a href="#4-2-内存的释放" class="headerlink" title="4.2 内存的释放"></a>4.2 内存的释放</h4><p>上下文内存的释放要比内存分配简单许多，只需要讨论如下两种情况即可:</p><ul><li>ChunkSize &gt; allocChunkLimit: 直接调用 <code>free()</code> 进行释放</li><li>ChunkSize &lt;&#x3D; allocChunkLimit: 将 Chunk 直接添加至 <code>freelist</code> 空闲链表中即可</li></ul><h3 id="5-关于内存上下文的切换"><a href="#5-关于内存上下文的切换" class="headerlink" title="5. 关于内存上下文的切换"></a>5. 关于内存上下文的切换</h3><p>我们能够在源码中经常看到 <code>MemoryContextSwitchTo()</code> 这个函数的调用，其作用就是将当前内存上下文切换至指定的内存上下文之中。</p><p>一个简单的例子就是系统表的缓存内存申请。当我们执行一个 Query 并且需要使用 System Catalog 时，通常会将读取到的 Catalog 缓存到内存中，以便下次更快地读取。那么这部分的内存就肯定需要在 <code>CacheMemoryContext</code> 这一内存上下文中申请，而不能在 <code>MessageContext</code> 或者是 <code>CurTransactionContext</code> 等内存上下文中申请。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">static</span> <span class="keyword">inline</span> MemoryContext</span></span><br><span class="line"><span class="function"><span class="title">MemoryContextSwitchTo</span><span class="params">(MemoryContext context)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">MemoryContext old = CurrentMemoryContext;</span><br><span class="line">CurrentMemoryContext = context;</span><br><span class="line"><span class="keyword">return</span> old;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于该函数本身比较短小并且经常使用，因此在定义时添加了 <code>inline</code> 关键字，在编译阶段直接展开。</p><p>这里以我曾经在 Greenplum 中遇到的一个关于内存未在正确的内上下文中被申请而导致出现 SEGSEGV 的例子来说明切换至正确上下文的必要性。</p><p>Greenplum 是一个 MPP 架构数据库，也就是说一个 table 中的数据可以根据某种算法存储在不同的 segment 节点之上。最常用的分布策略就是哈希分布，Greenplum 使用 Jump Consistent Hash 算法根据用户指定的分布键尽可能均匀地将数据分布在不同的节点之上。其次还有不常用的 Randomly 随机分布，以及 Replicated 复制分布。</p><p>Greenplum 使用 <code>GpPolicy</code> 这一结构体来保存一个 table 的分布策略，同时也会被写入 <code>RelationData</code> 这一结构体中。在 <a class="link"   href="https://github.com/greenplum-db/gpdb/commit/a45be43489294386c23c5fa068ce071ec068d0d8" >Expand partition table leaves in parallel.<i class="fas fa-external-link-alt"></i></a> 这个 commit 的 <code>ATExecExpandPartitionTablePrepare()</code> 函数中修改了 table 的分布策略，代码本身也非常容易理解:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据现有分布策略复制一个出来</span></span><br><span class="line">GpPolicy *root_dist = <span class="built_in">GpPolicyCopy</span>(rel_dist);</span><br><span class="line"><span class="comment">// 修改分布策略的 segments 数量</span></span><br><span class="line">root_dist-&gt;numsegments = new_numsegments;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将 relation 的分布策略替换成 root_dist</span></span><br><span class="line"><span class="built_in">GpPolicyReplace</span>(relid, root_dist);</span><br><span class="line"><span class="comment">// 更新 relation 的 rd_cdbpolicy 指针</span></span><br><span class="line">rel-&gt;rd_cdbpolicy = root_dist;</span><br></pre></td></tr></table></figure><p>但是这一段代码会导致数据库在后续的运行中产生空指针访问，从而触发 Segment Fault 错误。其根本原因就在于 <code>GpPolicyCopy</code> 会在当前内存上下文中申请内存，而对于一个 <code>ALTER TABLE</code> 语句而言，执行语句的内存上下文通常为 <code>PortalHeapMemory</code>，Portal 结束后内存即会被释放。<strong>也就是说，<code>rd_cdbpolicy</code> 其实当前语句结束后因为内存上下文的释放而被设置为 NULL，那么如果下一条语句访问了 <code>rd_cdbpolicy</code> 的话，就会因为引用空指针而 PANIC。</strong></p><p>因此，我们必须保证 <code>rd_cdbpolicy</code> 和 <code>rel</code> 具有相同的生命周期，做法就是将当前上下文切换至 <code>rel</code> 所在的内存上下文中，然后再为 <code>GpPolicy</code> 申请内存:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过 GetMemoryChunkContext 方法获取到 rel 所在内存上下文</span></span><br><span class="line">oldcontext = <span class="built_in">MemoryContextSwitchTo</span>(<span class="built_in">GetMemoryChunkContext</span>(rel));</span><br><span class="line"><span class="comment">// 在 rel 所在内存上下文中复制出一个 GpPolicy 出来</span></span><br><span class="line">new_policy = <span class="built_in">GpPolicyCopy</span>(rel-&gt;rd_cdbpolicy); </span><br><span class="line">new_policy-&gt;numsegments = new_numsegments;</span><br><span class="line"><span class="comment">// 切换至原有内存上下文，此处为 PortalHeapMemory</span></span><br><span class="line"><span class="built_in">MemoryContextSwitchTo</span>(oldcontext);</span><br><span class="line"></span><br><span class="line"><span class="built_in">GpPolicyReplace</span>(relid, new_policy);</span><br><span class="line">rel-&gt;rd_cdbpolicy = new_policy;</span><br></pre></td></tr></table></figure><p>更多的细节可参考 Pull Request: <a class="link"   href="https://github.com/greenplum-db/gpdb/pull/12935" >Fix PANIC error in ALTER TABLE xxx EXPAND PARTITION PREPARE<i class="fas fa-external-link-alt"></i></a> 以及 <a class="link"   href="https://github.com/greenplum-db/gpdb/commit/465ad4cf487160ebcb8c329c5f4f5f4a37292aae" >Avoid changing rd_cdbpolicy at relcache invalidation.<i class="fas fa-external-link-alt"></i></a></p><h3 id="6-Reference"><a href="#6-Reference" class="headerlink" title="6. Reference"></a>6. Reference</h3><ul><li><a class="link"   href="https://book.douban.com/subject/6971366/" >《PostgreSQL 数据库内核分析》<i class="fas fa-external-link-alt"></i></a></li><li><a class="link"   href="https://zhuanlan.zhihu.com/p/350049053" >图解PostgreSQL–MemoryContext(1)<i class="fas fa-external-link-alt"></i></a></li><li><a class="link"   href="https://github.com/postgres/postgres/tree/master/src/backend/utils/mmgr" >Memory Context System Design Overview<i class="fas fa-external-link-alt"></i></a></li></ul><blockquote><p>本文来源于：<a class="link"   href="https://smartkeyerror.com/PostgreSQL-MemoryContext" >https://smartkeyerror.com/PostgreSQL-MemoryContext<i class="fas fa-external-link-alt"></i></a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;在 PostgreSQL 的旧版本中，常常需要处理大量以指针传值的查询，因而存在着内存泄露的问题，直到查询结束时才能将内存收回。尤其是在处理 TOAST 数据时，需要使用大量的内存，因而使得内存泄露的问题更加明显。为此，PostgreSQL 在 7</summary>
      
    
    
    
    <category term="PostgreSQL" scheme="https://wuchu.site/categories/PostgreSQL/"/>
    
    
    <category term="MmeoryContext" scheme="https://wuchu.site/tags/MmeoryContext/"/>
    
    <category term="内存分析" scheme="https://wuchu.site/tags/%E5%86%85%E5%AD%98%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>Merge Join、 Hash Join和Nested Loop</title>
    <link href="https://wuchu.site/2024/11/20/sql_join/"/>
    <id>https://wuchu.site/2024/11/20/sql_join/</id>
    <published>2024-11-20T06:21:08.000Z</published>
    <updated>2024-11-20T11:51:01.483Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1、背景"><a href="#1、背景" class="headerlink" title="1、背景"></a>1、背景</h4><p>在<strong>多表联合查询</strong>的时候，如果我们查看它的执行计划，就会发现里面有多表之间的连接方式。而<code>Nested Loop Join</code>、<code>Hash Join</code>和<code>Merge Join</code>是三种常见的连接算法。它们在不同的场景下有不同的性能表现和适用性，具体适用哪种类型的连接取决于：</p><ul><li>当前的优化器模式 （ALL_ROWS 和 RULE）</li><li>取决于表大小</li><li>取决于连接列是否有索引</li><li>取决于连接列是否排序</li></ul><h4 id="2、Nested-Loop-Join"><a href="#2、Nested-Loop-Join" class="headerlink" title="2、Nested Loop Join"></a>2、Nested Loop Join</h4><p>对于被连接的数据子集较小的情况，Nested Loop是个较好的选择。Nested Loop就是扫描一个表（外表），每读到一条记录，就根据Join字段上的索引去另一张表（内表）里面查找，若Join字段上没有索引查询优化器一般就不会选择 Nested Loop。</p><p>在Nested Loop中，<strong>内表</strong>（一般是带索引的大表）被<strong>外表</strong>（也叫驱动表，一般为小表——不紧相对其它表为小表，而且记录数的绝对值也较小，不要求有索引）驱动，外表返回的每一行都要在内表中检索找到与它匹配的行，因此整个查询返回的结果集不能太大（大于1 万不适合）。</p><blockquote><p>Nested Loop适用于结果集很小（一般要求小于一万条），并且内表在Join字段上建有索引（这点非常非常非常重要）。</p></blockquote><h4 id="3、Hash-Join"><a href="#3、Hash-Join" class="headerlink" title="3、Hash Join"></a>3、Hash Join</h4><p>Hash Join是做大数据集连接时的常用方式，优化器使用两个表中较小（相对较小）的表利用Join Key在内存中建立散列表，然后扫描较大的表并探测散列表，找出与Hash表匹配的行。<br> 这种方式适用于较小的表完全可以放于内存中的情况，这样总成本就是访问两个表的成本之和。但是在表很大的情况下并不能完全放入内存，这时优化器会将它分割成若干不同的分区，不能放入内存的部分就把该分区写入磁盘的临时段，此时要求有较大的临时段从而尽量提高I&#x2F;O 的性能。它能够很好的工作于没有索引的大表和并行查询的环境中，并提供最好的性能。大多数人都说它是Join的重型升降机。</p><blockquote><p><strong>Hash Join只能应用于等值连接</strong>(如WHERE A.COL3 &#x3D; B.COL4)，这是由Hash的特点决定的。</p></blockquote><h4 id="4、Merge-Join"><a href="#4、Merge-Join" class="headerlink" title="4、Merge Join"></a>4、Merge Join</h4><p>通常情况下Hash Join的效果都比排序合并连接要好，然而如果两表已经被排过序，在执行排序合并连接时不需要再排序了，这时Merge Join的性能会优于Hash Join。Merge join的操作通常分三步：</p><ol><li>对连接的每个表做table access full;</li><li>对table access full的结果进行排序。</li><li>进行merge join对排序结果进行合并。</li></ol><p> 在全表扫描比索引范围扫描再进行表访问更可取的情况下，Merge Join会比Nested Loop性能更佳。当表特别小或特别巨大的时候，实行全表访问可能会比索引范围扫描更有效。</p><blockquote><p>Merge Join的性能开销几乎都在前两步，Merge Join可适于于非等值Join（&gt;，&lt;，&gt;&#x3D;，&lt;&#x3D;，但是不包含!&#x3D;，也即&lt;&gt;）</p></blockquote><h4 id="5、总结"><a href="#5、总结" class="headerlink" title="5、总结"></a>5、总结</h4><table><thead><tr><th align="center">连接类别</th><th align="center">Nested Loop Join</th><th align="center">Hash Join</th><th align="center">Merge Join</th></tr></thead><tbody><tr><td align="center"><strong>使用条件</strong></td><td align="center">任何条件</td><td align="center">等值连接（&#x3D;）</td><td align="center">等值或非等值连接（&gt;，&lt;，&#x3D;，&gt;&#x3D;，&lt;&#x3D;），‘&lt;&gt;’除外</td></tr><tr><td align="center"><strong>相关资源</strong></td><td align="center">CPU、磁盘I&#x2F;O</td><td align="center">内存、临时空间</td><td align="center">内存、临时空间</td></tr><tr><td align="center"><strong>特点</strong></td><td align="center">当有高选择性索引或进行限制性搜索时效率比较高，能够快速返回第一次的搜索结果。</td><td align="center">当缺乏索引或者索引条件模糊时，Hash Join比Nested Loop有效。通常比Merge Join快。在数据仓库环境下，如果表的纪录数多，效率高。</td><td align="center">当缺乏索引或者索引条件模糊时，Merge Join比Nested Loop有效。非等值连接时，Merge Join比Hash Join更有效。</td></tr><tr><td align="center"><strong>缺点</strong></td><td align="center">当索引丢失或者查询条件限制不够时，效率很低；当表的纪录数多时，效率低。</td><td align="center">为建立哈希表，需要大量内存。第一次的结果返回较慢。</td><td align="center">所有的表都需要排序。它为最优化的吞吐量而设计，并且在结果没有全部找到前不返回数据。</td></tr></tbody></table><h4 id="6、实验"><a href="#6、实验" class="headerlink" title="6、实验"></a>6、实验</h4><p>小表 <code>table_small</code> 有少于1万条记录，大表 <code>table_big</code> 有165万条记录，并且大表上已经建立了索引</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 确保小表存在</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> table_small (</span><br><span class="line">    id SERIAL <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    <span class="keyword">value</span> <span class="type">INTEGER</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 确保大表存在</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> table_big (</span><br><span class="line">    id SERIAL <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    <span class="keyword">value</span> <span class="type">INTEGER</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 确保大表上有索引</span></span><br><span class="line"><span class="keyword">CREATE</span> INDEX IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> idx_table_big_value <span class="keyword">ON</span> table_big (<span class="keyword">value</span>);</span><br></pre></td></tr></table></figure><p>插入数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 插入小表数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> table_small (<span class="keyword">value</span>)</span><br><span class="line"><span class="keyword">SELECT</span> (RANDOM() <span class="operator">*</span> <span class="number">1000</span>)::<span class="type">INTEGER</span></span><br><span class="line"><span class="keyword">FROM</span> generate_series(<span class="number">1</span>, <span class="number">10000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 插入大表数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> table_big (<span class="keyword">value</span>)</span><br><span class="line"><span class="keyword">SELECT</span> (RANDOM() <span class="operator">*</span> <span class="number">1000</span>)::<span class="type">INTEGER</span></span><br><span class="line"><span class="keyword">FROM</span> generate_series(<span class="number">1</span>, <span class="number">1650000</span>);</span><br></pre></td></tr></table></figure><h5 id="Nested-Loop-Join-实验"><a href="#Nested-Loop-Join-实验" class="headerlink" title="Nested Loop Join 实验"></a>Nested Loop Join 实验</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> enable_hashjoin <span class="operator">=</span> OFF;</span><br><span class="line"><span class="keyword">SET</span> enable_mergejoin <span class="operator">=</span> OFF;</span><br><span class="line"></span><br><span class="line">EXPLAIN ANALYZE</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> table_small</span><br><span class="line"><span class="keyword">JOIN</span> table_big <span class="keyword">ON</span> table_small.value <span class="operator">=</span> table_big.value;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 恢复默认设置</span></span><br><span class="line"><span class="keyword">SET</span> enable_hashjoin <span class="operator">=</span> <span class="keyword">ON</span>;</span><br><span class="line"><span class="keyword">SET</span> enable_mergejoin <span class="operator">=</span> <span class="keyword">ON</span>;</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">                                              QUERY PLAN  </span><br><span class="line"><span class="comment">-------------------------------------------------------------------------------------------------------------</span></span><br><span class="line"> Nested Loop  (cost<span class="operator">=</span><span class="number">0.43</span>.<span class="number">.494876</span><span class="number">.00</span> <span class="keyword">rows</span><span class="operator">=</span><span class="number">16464930</span> width<span class="operator">=</span><span class="number">16</span>) (actual <span class="type">time</span><span class="operator">=</span><span class="number">0.077</span>.<span class="number">.17485</span><span class="number">.498</span> <span class="keyword">rows</span><span class="operator">=</span><span class="number">16492654</span> loops<span class="operator">=</span><span class="number">1</span>)</span><br><span class="line">   <span class="operator">-</span><span class="operator">&gt;</span>  Seq Scan <span class="keyword">on</span> table_small  (cost<span class="operator">=</span><span class="number">0.00</span>.<span class="number">.145</span><span class="number">.00</span> <span class="keyword">rows</span><span class="operator">=</span><span class="number">10000</span> width<span class="operator">=</span><span class="number">8</span>) (actual <span class="type">time</span><span class="operator">=</span><span class="number">0.017</span>.<span class="number">.2</span><span class="number">.865</span> <span class="keyword">rows</span><span class="operator">=</span><span class="number">10000</span> loops<span class="operator">=</span><span class="number">1</span>)</span><br><span class="line">   <span class="operator">-</span><span class="operator">&gt;</span>  Index Scan <span class="keyword">using</span> idx_table_big_value <span class="keyword">on</span> table_big  (cost<span class="operator">=</span><span class="number">0.43</span>.<span class="number">.32</span><span class="number">.99</span> <span class="keyword">rows</span><span class="operator">=</span><span class="number">1648</span> width<span class="operator">=</span><span class="number">8</span>) (actual <span class="type">time</span><span class="operator">=</span><span class="number">0.030</span>.<span class="number">.1</span><span class="number">.428</span> <span class="keyword">rows</span><span class="operator">=</span><span class="number">1649</span> loops<span class="operator">=</span><span class="number">10000</span>)</span><br><span class="line">         Index Cond: (<span class="keyword">value</span> <span class="operator">=</span> table_small.value)</span><br><span class="line"> Planning <span class="type">Time</span>: <span class="number">0.152</span> ms</span><br><span class="line"> Execution <span class="type">Time</span>: <span class="number">18613.887</span> ms</span><br><span class="line">(<span class="number">6</span> <span class="keyword">rows</span>)</span><br></pre></td></tr></table></figure><h5 id="Hash-Join-实验"><a href="#Hash-Join-实验" class="headerlink" title="Hash Join 实验"></a>Hash Join 实验</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> enable_nestloop <span class="operator">=</span> OFF;</span><br><span class="line"><span class="keyword">SET</span> enable_mergejoin <span class="operator">=</span> OFF;</span><br><span class="line"></span><br><span class="line">EXPLAIN ANALYZE</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> table_small</span><br><span class="line"><span class="keyword">JOIN</span> table_big <span class="keyword">ON</span> table_small.value <span class="operator">=</span> table_big.value;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 恢复默认设置</span></span><br><span class="line"><span class="keyword">SET</span> enable_nestloop <span class="operator">=</span> <span class="keyword">ON</span>;</span><br><span class="line"><span class="keyword">SET</span> enable_mergejoin <span class="operator">=</span> <span class="keyword">ON</span>;</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">                                           QUERY PLAN</span><br><span class="line"><span class="comment">-------------------------------------------------------------------------------------------------------------</span></span><br><span class="line"> Hash <span class="keyword">Join</span>  (cost<span class="operator">=</span><span class="number">270.00</span>.<span class="number">.236157</span><span class="number">.80</span> <span class="keyword">rows</span><span class="operator">=</span><span class="number">16464930</span> width<span class="operator">=</span><span class="number">16</span>) (actual <span class="type">time</span><span class="operator">=</span><span class="number">3.370</span>.<span class="number">.4114</span><span class="number">.577</span> <span class="keyword">rows</span><span class="operator">=</span><span class="number">16492654</span> loops<span class="operator">=</span><span class="number">1</span>)</span><br><span class="line">   Hash Cond: (table_big.value <span class="operator">=</span> table_small.value)</span><br><span class="line">   <span class="operator">-</span><span class="operator">&gt;</span>  Seq Scan <span class="keyword">on</span> table_big  (cost<span class="operator">=</span><span class="number">0.00</span>.<span class="number">.23801</span><span class="number">.00</span> <span class="keyword">rows</span><span class="operator">=</span><span class="number">1650000</span> width<span class="operator">=</span><span class="number">8</span>) (actual <span class="type">time</span><span class="operator">=</span><span class="number">0.029</span>.<span class="number">.207</span><span class="number">.175</span> <span class="keyword">rows</span><span class="operator">=</span><span class="number">1650000</span> loops<span class="operator">=</span><span class="number">1</span>)</span><br><span class="line">   <span class="operator">-</span><span class="operator">&gt;</span>  Hash  (cost<span class="operator">=</span><span class="number">145.00</span>.<span class="number">.145</span><span class="number">.00</span> <span class="keyword">rows</span><span class="operator">=</span><span class="number">10000</span> width<span class="operator">=</span><span class="number">8</span>) (actual <span class="type">time</span><span class="operator">=</span><span class="number">3.326</span>.<span class="number">.3</span><span class="number">.328</span> <span class="keyword">rows</span><span class="operator">=</span><span class="number">10000</span> loops<span class="operator">=</span><span class="number">1</span>)</span><br><span class="line">         Buckets: <span class="number">16384</span>  Batches: <span class="number">1</span>  Memory Usage: <span class="number">519</span>kB</span><br><span class="line">         <span class="operator">-</span><span class="operator">&gt;</span>  Seq Scan <span class="keyword">on</span> table_small  (cost<span class="operator">=</span><span class="number">0.00</span>.<span class="number">.145</span><span class="number">.00</span> <span class="keyword">rows</span><span class="operator">=</span><span class="number">10000</span> width<span class="operator">=</span><span class="number">8</span>) (actual <span class="type">time</span><span class="operator">=</span><span class="number">0.006</span>.<span class="number">.1</span><span class="number">.185</span> <span class="keyword">rows</span><span class="operator">=</span><span class="number">10000</span> loops<span class="operator">=</span><span class="number">1</span>)</span><br><span class="line"> Planning <span class="type">Time</span>: <span class="number">0.163</span> ms</span><br><span class="line"> Execution <span class="type">Time</span>: <span class="number">4825.898</span> ms</span><br><span class="line">(<span class="number">8</span> <span class="keyword">rows</span>)</span><br></pre></td></tr></table></figure><h5 id="Merge-Join-实验"><a href="#Merge-Join-实验" class="headerlink" title="Merge Join 实验"></a>Merge Join 实验</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> enable_nestloop <span class="operator">=</span> OFF;</span><br><span class="line"><span class="keyword">SET</span> enable_hashjoin <span class="operator">=</span> OFF;</span><br><span class="line"></span><br><span class="line">EXPLAIN ANALYZE</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> table_small</span><br><span class="line"><span class="keyword">JOIN</span> table_big <span class="keyword">ON</span> table_small.value <span class="operator">=</span> table_big.value</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> table_small.value, table_big.value;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 恢复默认设置</span></span><br><span class="line"><span class="keyword">SET</span> enable_nestloop <span class="operator">=</span> <span class="keyword">ON</span>;</span><br><span class="line"><span class="keyword">SET</span> enable_hashjoin <span class="operator">=</span> <span class="keyword">ON</span>;</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">                                                 QUERY PLAN   </span><br><span class="line"><span class="comment">-------------------------------------------------------------------------------------------------------------</span></span><br><span class="line"> <span class="keyword">Merge</span> <span class="keyword">Join</span>  (cost<span class="operator">=</span><span class="number">813.93</span>.<span class="number">.313910</span><span class="number">.64</span> <span class="keyword">rows</span><span class="operator">=</span><span class="number">16464930</span> width<span class="operator">=</span><span class="number">16</span>) (actual <span class="type">time</span><span class="operator">=</span><span class="number">4.110</span>.<span class="number">.6941</span><span class="number">.522</span> <span class="keyword">rows</span><span class="operator">=</span><span class="number">16492654</span> loops<span class="operator">=</span><span class="number">1</span>)</span><br><span class="line">   <span class="keyword">Merge</span> Cond: (table_big.value <span class="operator">=</span> table_small.value)</span><br><span class="line">   <span class="operator">-</span><span class="operator">&gt;</span>  Index Scan <span class="keyword">using</span> idx_table_big_value <span class="keyword">on</span> table_big  (cost<span class="operator">=</span><span class="number">0.43</span>.<span class="number">.62006</span><span class="number">.42</span> <span class="keyword">rows</span><span class="operator">=</span><span class="number">1650000</span> width<span class="operator">=</span><span class="number">8</span>) (actual <span class="type">time</span><span class="operator">=</span><span class="number">0.021</span>.<span class="number">.1562</span><span class="number">.718</span> <span class="keyword">rows</span><span class="operator">=</span><span class="number">1650000</span> loops<span class="operator">=</span><span class="number">1</span>)</span><br><span class="line">   <span class="operator">-</span><span class="operator">&gt;</span>  Sort  (cost<span class="operator">=</span><span class="number">809.39</span>.<span class="number">.834</span><span class="number">.39</span> <span class="keyword">rows</span><span class="operator">=</span><span class="number">10000</span> width<span class="operator">=</span><span class="number">8</span>) (actual <span class="type">time</span><span class="operator">=</span><span class="number">4.084</span>.<span class="number">.1125</span><span class="number">.939</span> <span class="keyword">rows</span><span class="operator">=</span><span class="number">16491769</span> loops<span class="operator">=</span><span class="number">1</span>)</span><br><span class="line">         Sort Key: table_small.value</span><br><span class="line">         Sort <span class="keyword">Method</span>: quicksort  Memory: <span class="number">697</span>kB</span><br><span class="line">         <span class="operator">-</span><span class="operator">&gt;</span>  Seq Scan <span class="keyword">on</span> table_small  (cost<span class="operator">=</span><span class="number">0.00</span>.<span class="number">.145</span><span class="number">.00</span> <span class="keyword">rows</span><span class="operator">=</span><span class="number">10000</span> width<span class="operator">=</span><span class="number">8</span>) (actual <span class="type">time</span><span class="operator">=</span><span class="number">0.009</span>.<span class="number">.1</span><span class="number">.149</span> <span class="keyword">rows</span><span class="operator">=</span><span class="number">10000</span> loops<span class="operator">=</span><span class="number">1</span>)</span><br><span class="line"> Planning <span class="type">Time</span>: <span class="number">0.261</span> ms</span><br><span class="line"> Execution <span class="type">Time</span>: <span class="number">7657.134</span> ms</span><br><span class="line">(<span class="number">9</span> <span class="keyword">rows</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;1、背景&quot;&gt;&lt;a href=&quot;#1、背景&quot; class=&quot;headerlink&quot; title=&quot;1、背景&quot;&gt;&lt;/a&gt;1、背景&lt;/h4&gt;&lt;p&gt;在&lt;strong&gt;多表联合查询&lt;/strong&gt;的时候，如果我们查看它的执行计划，就会发现里面有多表之间的连接方式。而&lt;co</summary>
      
    
    
    
    <category term="PostgreSQL" scheme="https://wuchu.site/categories/PostgreSQL/"/>
    
    
    <category term="执行计划" scheme="https://wuchu.site/tags/%E6%89%A7%E8%A1%8C%E8%AE%A1%E5%88%92/"/>
    
    <category term="SQL连接算法" scheme="https://wuchu.site/tags/SQL%E8%BF%9E%E6%8E%A5%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Cgroup - Linux的网络资源隔离</title>
    <link href="https://wuchu.site/2024/11/19/cgroup_linux_network_control_group/"/>
    <id>https://wuchu.site/2024/11/19/cgroup_linux_network_control_group/</id>
    <published>2024-11-19T11:41:38.727Z</published>
    <updated>2024-11-19T11:41:38.727Z</updated>
    
    <content type="html"><![CDATA[<p>本文不会涉及一些网络基础知识的讲解以及iproute2相关命令的使用的讲解，建议如果想要更好理解本文，之前应该对网络知识、tc命令和<a class="link"   href="http://www.lartc.org/LARTC-zh_CN.GB2312.pdf" >LARTC<i class="fas fa-external-link-alt"></i></a>的文档有一定了解。如果本文中有什么知识点让不够清楚，可以结合LARTC文档一起服用。</p><p>想要直接上手配置cgroup的网络资源隔离的人，可以直接看本文倒数第二部分：<strong>使用cgroup限制网络流量</strong>。</p><h2 id="Linux的网络资源隔离"><a href="#Linux的网络资源隔离" class="headerlink" title="Linux的网络资源隔离"></a>Linux的网络资源隔离</h2><p>如果说Linux内核的cgroup算是个新技术的话，那么它的网络资源隔离部分的实现算是个不折不扣的老技术了。实际上是先有的网络资源的隔离技术，才有的cgroup。或者说是先有的网络资源的隔离才有的2.4、2.6版本的Linux内核，而现在的最主流的内核版本应该是3.10了（考虑到android手机的出货量，你公司那几千几万台服务器真的算是个零头对吧？）。好吧，Linux早在内核2.2版本就已经引入了网络QoS的机制，并且网络资源的隔离功能只是其所实现功能的一部分而已。无论如何，cgroup并没有再重新搞一套网络资源隔离的实现，而是直接使用了Linux的iproute2的traffic control（tc）功能。实际上网络资源隔离的文档真的不用我再多写什么了，我最亲爱的前同事＋朋友＋导师——johnbull同志早已经在2003年的非典期间就因为无聊而完成了非常高质量的相关技术文档翻译工作，将这方面最权威的LARTC（Linux Advanced Routing &amp; Traffic Control）文档翻译成了中文版。</p><p><a class="link"   href="http://www.lartc.org/" >英文版链接<i class="fas fa-external-link-alt"></i></a></p><p><a class="link"   href="http://www.lartc.org/LARTC-zh_CN.GB2312.pdf" >中文版链接<i class="fas fa-external-link-alt"></i></a></p><p>曾经chinaunix的资深版主johnbull同志现在在新浪微博工作，所以经常在微博出没，如果对以上文档有兴趣和疑问的人可以直接去找他对质，<a class="link"   href="http://weibo.com/u/2172142242" >传送门在此<i class="fas fa-external-link-alt"></i></a>。</p><p>其实原则上说，本技术文章已经讲完了，但是为了不让大家有种上当受骗的感觉，我觉得我还是有必要从cgroup的角度再来讲讲tc，也算是对TC近几年发展做一个补充。</p><h3 id="什么是队列规则"><a href="#什么是队列规则" class="headerlink" title="什么是队列规则"></a>什么是队列规则</h3><p>tc命令引入了一系列概念，其中我们最需要先理解的就是<strong>队列规则</strong>。它的英文名字叫做queueing discipline，在tc命令中也叫qdisc，或者直接简写为qd。我们先来看看它，有个感性的认识：</p><p>在我的虚拟机的centos7中，它是这样的：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> <span class="type">Desktop</span>]<span class="comment"># tc qd ls</span></span><br><span class="line">qdisc pfifo_fast <span class="number">0</span>: dev eno16777736 root refcnt <span class="number">2</span> bands <span class="number">3</span> priomap  <span class="number">1</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">1</span> <span class="number">2</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><p>在我的台式机上装的archlinux（更新到了当前最新版的4.3.3内核）以及fedora 23上是这样的：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">zorrozou</span>-<span class="type">pc0</span> <span class="type">zorro</span>]<span class="comment"># tc qd ls</span></span><br><span class="line">qdisc noqueue <span class="number">0</span>: dev lo root refcnt <span class="number">2</span> </span><br><span class="line">qdisc fq_codel <span class="number">0</span>: dev enp2s0 root refcnt <span class="number">2</span> limit <span class="number">10240</span>p flows <span class="number">1024</span> quantum <span class="number">1514</span> target <span class="number">5.0</span>ms interval <span class="number">100.0</span>ms ecn </span><br></pre></td></tr></table></figure><p>在公司的服务器上是这样的：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">tencent64</span> /<span class="type">data</span>/<span class="type">home</span>/<span class="type">zorrozou</span>]<span class="comment"># tc qd ls</span></span><br><span class="line">qdisc mq <span class="number">0</span>: dev eth1 root </span><br><span class="line">qdisc pfifo_fast <span class="number">0</span>: dev tun0 root refcnt <span class="number">2</span> bands <span class="number">3</span> priomap  <span class="number">1</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">1</span> <span class="number">2</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span></span><br><span class="line">qdisc pfifo_fast <span class="number">0</span>: dev veth213_121_54 root refcnt <span class="number">2</span> bands <span class="number">3</span> priomap  <span class="number">1</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">1</span> <span class="number">2</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span></span><br><span class="line">qdisc pfifo_fast <span class="number">0</span>: dev veth213_135_194 root refcnt <span class="number">2</span> bands <span class="number">3</span> priomap  <span class="number">1</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">1</span> <span class="number">2</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span></span><br><span class="line">qdisc pfifo_fast <span class="number">0</span>: dev veth213_123_25 root refcnt <span class="number">2</span> bands <span class="number">3</span> priomap  <span class="number">1</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">1</span> <span class="number">2</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span></span><br><span class="line">qdisc pfifo_fast <span class="number">0</span>: dev veth213_121_112 root refcnt <span class="number">2</span> bands <span class="number">3</span> priomap  <span class="number">1</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">1</span> <span class="number">2</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span></span><br><span class="line">qdisc pfifo_fast <span class="number">0</span>: dev veth213_123_207 root refcnt <span class="number">2</span> bands <span class="number">3</span> priomap  <span class="number">1</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">1</span> <span class="number">2</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span></span><br><span class="line">qdisc pfifo_fast <span class="number">0</span>: dev veth213_123_82 root refcnt <span class="number">2</span> bands <span class="number">3</span> priomap  <span class="number">1</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">1</span> <span class="number">2</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span></span><br><span class="line">qdisc pfifo_fast <span class="number">0</span>: dev veth213_117_111 root refcnt <span class="number">2</span> bands <span class="number">3</span> priomap  <span class="number">1</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">1</span> <span class="number">2</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><p>从以上输出大家应该可以判断出来，这个所谓的qdisc是针对网卡的，每有一个网卡就会有一个qdisc。而且如果你用过ip命令并且比较细心的话，应该早就注意到ip ad sh的时候也会出现相关的信息：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">zorro</span>@<span class="type">zorrozou</span>-<span class="type">pc0</span> ~]<span class="variable">$</span> ip ad sh</span><br><span class="line"><span class="number">1</span>: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu <span class="number">65536</span> qdisc noqueue state UNKNOWN <span class="built_in">group</span> default </span><br><span class="line">    link/loopback <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span> brd <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span></span><br><span class="line">    inet <span class="number">127.0</span>.<span class="number">0.1</span>/<span class="number">8</span> scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 ::<span class="number">1</span>/<span class="number">128</span> scope host </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line"><span class="number">2</span>: enp2s0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu <span class="number">1500</span> qdisc fq_codel state UP <span class="built_in">group</span> default qlen <span class="number">1000</span></span><br><span class="line">    link/ether <span class="number">34</span>:<span class="number">64</span>:a9:<span class="number">15</span>:a2:<span class="number">17</span> brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet <span class="number">10.18</span>.<span class="number">73.69</span>/<span class="number">24</span> brd <span class="number">10.18</span>.<span class="number">73.255</span> scope global dynamic enp2s0</span><br><span class="line">       valid_lft <span class="number">28283</span>sec preferred_lft <span class="number">28283</span>sec</span><br><span class="line">    inet6 fe80::<span class="number">3664</span>:a9ff:fe15:a217/<span class="number">64</span> scope link </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure><p>虽然看上去有些高深莫测，但是qdisc其实是个挺简单的概念，它就是它字面的意思：队列规则，或者叫做排队规则。我们都知道，网络数据都是被封装成一个一个的数据包进行传输的。如果网卡相当于数据包要出发的大门的话，那么qdisc无非就是规定了这些包在出发前如果需要排队的话该怎么排。我们先拿这个叫做pfifo_fast的队列规则来举例子描述一下吧，这个qdisc实现了一个以数据包（package）为单位的fifo队列，实际上可以认为是实现了三个队列（叫做bands），给每个队列定了一个优先级，以实现带优先级的排队规则。我们举个现实中的例子再来说明一下，大家都应该有去公交车站排队的经验吧？（神马？作为中国人你从来不排队？）无论怎样，我们假定你是排队的。每来一次公交车，就相当于网卡处理一次队列中的数据包，而每个人就是一个数据包。那么我们一般人到了公交站，如果发现前面已经排了一队人，此时根据fifo（first in first out）的规则，我们会排在队列尾部。如果来车了，就从队列头的人先上车，车满就走，没上完的人继续等待。但是我们也知道，如果此时来了个孕妇或者大爷大娘等一些按照我们社会美德要求应该让他们优先的乘客的话，这些人应该有权利优先上车。那么怎么办呢？我们公交站台的解决办法一般是直接让他们去队列头插队就好，但是如果空间允许的话，我们可以考虑多建立一个队列。让这些可以优先上车的人排一个队，正常人排一个队，车来了先上优先级比较高的那个队列中的人，他们都上完了再让一般队列中上人车。这样就实现了一个简单的队列规则，大家根据自己的情况去选择排队就好了。</p><p>pfifo_fast实现了一个类似上述描述的队列规则，区别是它实现了3个优先级的队列（bands），每个数据包来了都根据自己的情况选择一个band进行排队，每个band都是fifo方式处理数据包。它总是先处理优先级最高的band，直到没有数据包了再处理下一个优先级的band，直到三个都处理完，或者本次处理不完，继续等着下次处理。那么数据包按什么规则进行选择自己该进入哪个band呢？这就是后面显示的<strong>priomap  1 2 2 2 1 2 0 0 1 1 1 1 1 1 1 1</strong>的含义，这个字段描述了一个priomap，可以理解为优先级位图，后面的16个不同的位，表示相关制如果为真时的数据包应该进入哪个队列，一共有0、1、2三个队列。而这个16位的位图标记，针对的就是我们IP报头中的TOS字段。根据IP协议的定义我们知道，TOS字段8位中的4位分别是用来标示最小延时、最大吞吐量、最大可靠性和最小消费四种数据包类型的，IP协议原则上会根据这些标示的不同以不同的QOS对上层交付不同的服务质量。这些不同的搭配理论上一躬有16种，这就是priomap所映射的优先级的概念。</p><blockquote><p>如果你对TOS的概念还不熟悉，请自行补充网络相关基础知识。推荐的教材是《TCP／IP详解卷1》。</p></blockquote><p>pfifo_fast队列处理过程如图所示：</p><p><img                         lazyload                       alt="image"                       data-src="http://linux-ip.net/articles/Traffic-Control-HOWTO/images/pfifo_fast-qdisc.png"                        alt="pfifo_fast"                 ></p><p>pfifo_fast一般情况下是内核对网卡默认选择的qdisc，它虽然提供了简单的优先级分类的支持，但是并没有提供可供修改的参数，就是说默认的优先级分类设置不能更改，也没有提供相关限速的功能。这个队列规则在一般情况下工作的都很稳定，但是最近Linux已经开始放弃使用这个qd作为默认的队列规则而改用一种叫做fq_codel的qdisc了。主要原因是，由于移动互联网的广泛应用，一种叫做Bufferbloat的现象影响越来越大了。</p><h3 id="Bufferbloat"><a href="#Bufferbloat" class="headerlink" title="Bufferbloat"></a>Bufferbloat</h3><p>Bufferbloat现象最初是用来形容在一个分组交换网络上，路由器为防止丢包，往往buffer缓冲区都会实现的很大，但是这种过大的fifo缓冲区可能导致数据包buffer中等待时间过长而导致很多问题（后面会有分析）。再加上网络上TCP的拥塞控制算法的影响，以及很多商业操作系统甚至并不实现拥塞控制，导致数据传输质量抖动很大（全局同步），甚至于达到服务不可用的状态。</p><p>后来我们发现，Bufferbloat这种现象比较广泛的存在在各种系统中，只要系统中使用了类似队列、缓存等机制的时候，就在某些极端状态下出现这种类似雪崩的现象。我们简要描述一下这个状态。我们先简单构建一个试用buffer的场景，如图所示：</p><p><img                         lazyload                       alt="image"                       data-src="http://linux-ip.net/articles/Traffic-Control-HOWTO/images/fifo-qdisc.png"                        alt="fifo"                 ></p><p>根据图的描述，我们假定这个简单的fifo就是我们要的buffer系统，它在两个处理过程之间充当缓冲区的作用。每个请求从队列的上面进入排队，然后依次被下面的处理程序处理。大家应该知道buffer的作用：一个缓冲器的作用主要是弥补两个处理系统之间的速度差异，能够在一定程度的请求速度抖动的时候缓解处理速度慢而导致的请求失败。假设，后段处理请求的速度为1000个&#x2F;s，每个请求平均长度为100byte，队列长队为1Mbyte，此时，如果请求突然增加到了2000个&#x2F;s，那么这个压力直接压给后端是处理不过来的，每秒钟就要丢弃1000个包。所以我们使用一个buffer，可以让这一秒钟来的请求先处理1000个，然后有1000个排在队列中，下一秒处理。只要来的请求的抖动范围还算正常，我们的系统将会工作的良好，没有失败的请求。</p><p>对于一般的系统，我们发送的请求都是有延时要求的，鉴于我们的系统每秒钟可以处理1000个请求，所以每个请求的处理时间平均为1ms。而我们的系统基于目前的处理时间，对外提供了100ms的延时SLA，就是说，后端系统保证每个请求的处理时间是100ms以内，这已经很大了，是正常情况的100倍。于是前端的请求方，会根据后端给出的SLA在程序中设定一个超时时间，在这个例子中就应该是100ms，这可能意味着，程度调用后端系统，如果等待100ms还没有结果，那么将重试一次或者几次不等，之后应该会返回失败。场景就是这样一个场景，那么我们来看看究竟什么是bufferbloat？</p><p>假定现在因为业务问题，比如上线了一个秒杀的抢购活动，导致从前端发来的请求一瞬间远远大于后端的处理能力。比如，一秒钟内产生了10000次请求，这一万次请求都会立即进入队列中等待后端处理。因为后端的处理速度是1000次每秒，所以可以想像，当前在队列中的最后一个数据包至少要等待9秒钟才能处理到。实际上根本处理不到这最后一个请求，由于我们设置了100ms的超时时间，那么调用方将很快因为发现100ms中没有返回而重试一次，于是又来了将近10000个请求。这些请求都积压在了队列中，还没交给后端进行处理，如果交给了后端处理，后端肯定会因为压力变大处理变慢，而导致处理事件超过100ms的SLA，会在超时之后告诉前端本次请求失败（如果是这样实现的话），而现在由于队列的存在，并大量的积压请求，导致调用方不能明确的得知失败。所以一般都是等待至少一次超时重试一次再失败，当然也有很多情况会重试个4，5次也说不定。</p><p>无论如何，这突发的10000个请求的流量来了之后，如果平均每个请求100字节，这1M的缓冲区就已经满了，后续再有任何请求来，都会排在队列末尾，一直等到前面的请求处理完再处理这个请求，而此时因为整体处理时间很慢，要将此队列中的全部请求处理完需要9秒钟，无论如何，这个请求都已经超时失败了。这个时候后端服务一直满载的处理队列中的请求，而前端还不断有新请求源源不断的放进队列，但是由于超时，前端所有请求都是返回失败，后端所处理的请求也都是等待时间超过100ms的无效的请求，即使成功返回结果给前端，前端也不会要了。效果就是后端很忙，而整体服务却是不可用的。此时哪怕请求平均速度恢复到1000个每秒，服务也无法恢复。这就是一个典型的bufferbloat场景。</p><p>于是我们可以考虑一下这个场景会发生在什么地方？比如buffer比较大的路由器，由于tcp的流量控制和重试机制导致网络质量的抖动；比如一个后端的数据库系统为了能够承载更大的吞吐量而添加了队列系统；比如io调度；比如网卡调度；只要是大buffer的场景都会可能产生类似的问题。那么该如何解决这个问题呢？于是主动队列管理算法应运而出了。</p><h3 id="AQM"><a href="#AQM" class="headerlink" title="AQM"></a>AQM</h3><p>AQM就是主动队列管理（Active Queue Management）的英文缩写，其思路就是对buffer缓冲的队列管理采取有效的主动管理手段，并不等待队列满之后才被动丢弃请求，而是在某个条件触发的情况下主动对请求进行丢弃，以防止类似Bufferbloat现象的发生。最简单的AQM思路就是监控队列长度，当队列长度一直维持在最大长度的时候，开始对新入队的数据包进行丢弃，直到使拥塞恢复（根据上面的例子可以想像，不断减少队列长度，就可以让新来的请求等待时间变短，直到可以正常服务）。这种做法虽然可以最终使拥塞恢复，但是整个过程并不十分理想，bufferbloat现象仍然存在。由于是对新入队数据包进行丢弃，所以容易在类似TCP拥塞控制的使用场景下引发<strong>全局同步</strong>现象，在很多场景下还会有死锁。所以我们需要更先进的队列管理算法。</p><h3 id="RED算法"><a href="#RED算法" class="headerlink" title="RED算法"></a>RED算法</h3><p>RED算法主要是为了解决全局同步现象而产生的算法，其基本思路是，通过监控平均队列长度来探测是否有拥塞，一旦发现开始拥塞，就以某一个概率从队列中（而不是队列尾）开始丢弃请求（在网络上也可以通过ecn通知连接有拥塞）。</p><p>对于RED来说，关键的可配置参数有这样几个：</p><p><strong>min</strong>:最小队列长度。</p><p><strong>max</strong>:最大队列长度。</p><p><strong>probability</strong>:可能性，取值范围为0.00 - 1，一般可以理解为百分比，比如0.01为1%。</p><p>有了以上几个关键参数，RED算法就可以工作了，其工作的原理大概是这样的。首先，RED会对目前队列状态计算一个平均队列长度（算法采用的是指数加权平均算法计算的，在此不做更细节的说明），然后检查当前队列的平均长度是否：</p><ol><li>低于min：此时不做任何处理，队列压力较小，可以直接正常处理。</li><li>在min和max之间：此时界定为队列感受到阻塞压力，开始按照某一几率P从队列中丢包，几率计算公式为：P &#x3D; probability * (平均队列长度 － min)&#x2F;(max － min)。</li><li>高于max：此时新入队的请求也将丢弃。</li></ol><p>所以probability可以理解为当队列感受到阻塞压力的时候，最大的丢包几率是多少。知道了这几个参数，我们就可以了解一下如何在Linux上进行RED的配置了，其实很简单，使用以下命令即可：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">zorrozou</span>-<span class="type">pc0</span> <span class="type">zorro</span>]<span class="comment"># tc qd ls</span></span><br><span class="line">qdisc noqueue <span class="number">0</span>: dev lo root refcnt <span class="number">2</span> </span><br><span class="line">qdisc fq_codel <span class="number">0</span>: dev enp2s0 root refcnt <span class="number">2</span> limit <span class="number">10240</span>p flows <span class="number">1024</span> quantum <span class="number">1514</span> target <span class="number">5.0</span>ms interval <span class="number">100.0</span>ms ecn </span><br><span class="line">[<span class="type">root</span>@<span class="type">zorrozou</span>-<span class="type">pc0</span> <span class="type">zorro</span>]<span class="comment"># tc qd add dev enp2s0 root red limit 200000 min 20000 max 40000 avpkt 1000 burst 30 ecn adaptive bandwidth 5Mbit</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">zorrozou</span>-<span class="type">pc0</span> <span class="type">zorro</span>]<span class="comment"># tc qd ls</span></span><br><span class="line">qdisc noqueue <span class="number">0</span>: dev lo root refcnt <span class="number">2</span> </span><br><span class="line">qdisc red <span class="number">8001</span>: dev enp2s0 root refcnt <span class="number">2</span> limit <span class="number">200000</span>b min <span class="number">20000</span>b max <span class="number">40000</span>b ecn adaptive </span><br></pre></td></tr></table></figure><p>这样我们就将默认的qdisc规则改为了RED，解释一下相关参数：</p><p>首先是命令前部分：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tc qd add dev enp2s0 root</span><br></pre></td></tr></table></figure><p>这部分没什么可解释的，唯一需要说明的是root参数，这个参数表示<strong>根节点</strong>，修改了这个参数描述的队列一般表示我们整个这个网卡所发出的数据包都用的是指定的规则，暂时我们还用不到其他节点，所以就只是root就可以了。另外请注意，目前所学习的队列规则只对发出的数据包有效。</p><p>之后是red参数，在这里描述使用什么队列规则。在之后丢失red这个队列规则所要使用的参数描述，具体可以通过man tc-red找到帮助。我们简单解释一下：</p><p><strong>limit</strong>:此队列的字节数硬限制。配置的长度应该比max大。但是需要注意的是max和min的单位是数据包个数而不是字节数。</p><p><strong>avpkt</strong>:平均包长度。这个参数是用根burst参数一起来计算平均队列长度的参数，所以选择一个合适的值对整体效果的影响较大。一般的推荐值为1000。</p><p><strong>burst</strong>:字面含义是队列可以容纳的爆发流量。但是我们知道，爆发流量的承载是根据队列容量上限（limit）决定的，当一个大于当前网络带宽处理能力的爆发流量来临时，不能及时发出的数据包将缓存在队列中，队列满了就会丢包。所以实际影响爆发流量承载能力的是limit参数。当然我们建议的limit长度应该是不少于max+burst的长度，这样才能有实际意义。但是这个参数将对平均队列长度的变化速度产生影响，可以想像，如果我们想要支持队列能处理尽可能大的爆发流量的话，当队列突然变长的时候，应该让平均队列长度的计算结果变化没那么敏感，这样爆发流量来的时候丢包的可能性会减小。所以，这个值设置的越高，那么平均队列长度的计算敏感度就约小，变化速度将会变慢，反之变快。</p><p><strong>bandwidth</strong>:用于在网络空闲的时候计算平均队列长度的参数，应该配置成你的网络的实际带宽大小。并不是说RED有限速作用。</p><p><strong>ecn</strong>:ecn实际上是TCP&#x2F;IP协议用来通知网络拥塞所实现的一个数据报字段。添加这个参数标示意味着，当RED检测到拥塞都是通过标记数据包的ecn字段来通知数据源端减少数据发送量，并且在实际队列长度达到limit限制之前丢不会丢弃数据包。</p><p><strong>adaptive</strong>:算是一种更智能的probability参数的选择，添加了这个参数之后就可以不用人为指定一个固定的probability了，当平均队列长度超过(max-min)&#x2F;2时，RED会动态的根据情况让probability的值在1%到50%之间变化。具体描述参见<a class="link"   href="http://icir.org/floyd/papers/adaptiveRed.pdf" >这里<i class="fas fa-external-link-alt"></i></a>。</p><p>以上就是RED队列规则的配置方法和意义，其作用主要是缓解全局同步的问题。但是我们在实际使用的时候发现，RED的min、max、probability这些参数的选择在实际场景中可能会根据情况变化而改变才是最优的，但是RED的配置不能自适应这些变化。并且实际上在很多特定的网络负载下依然会导致TCP的全局同步。这些缺陷促使我们寻找更优秀的方式来解决这些问题。</p><blockquote><p>内核还实现了另一个队列规则叫做choke，其所有配置参数跟RED完全一样，区别是，RED是通过字节为单位进行队列控制，而choke是以数据包为单位。更多帮助请：man tc-choke</p></blockquote><h3 id="CoDel算法"><a href="#CoDel算法" class="headerlink" title="CoDel算法"></a>CoDel算法</h3><p>CoDel算法是另一种AQM算法，其全称是Controlled Delay算法。是由Van Jacobson和Kathleen Nichols在2012年实现的。具体描述参见<a class="link"   href="http://queue.acm.org/detail.cfm?id=2209336" >Controlling Queue Delay<i class="fas fa-external-link-alt"></i></a>。CoDel采用了另外一种角度来观察队列满载的问题，其出发点并不是对队列长度进行控制，而是对队列中的数据包的驻留时间进行控制。事实上如果我们将管理方式由队列长度控制变成等待时间控制的时候，bufferbloat就可以彻底解决了，这也是更先进的AQM算法所用的方式。我们仔细观察bufferbloat问题，会发现，引起这个问题的重要原因就是数据包在队列中的驻留时间过长，超过了有效的处理时间（SLA定义的时间或者重试时间），导致处理到的数据包都已经超时。</p><p>首先我们根据我们的业务设计，确定出请求在队列中正常情况应该驻留多久。我们还是假定这样一种场景，根上面bufferbloat中描述的例子差不多：后端处理速度是1000次每秒，就是1ms可以处理一个请求，而队列平均长度一般为5，就是说一个新请求进入队列之后，发现前面还有5个请求在等待，那么这个新请求的处理时间大约为6ms（在队列中等待5ms）。那么请求在队列中的驻留时间正常情况下基本为5ms。而我们服务的SLA确定的时间是100ms（由诸如服务超时时间或者所在网络的最大RTT时间等条件确定），就是说，服务应确保在100ms内给出反馈，这个时间叫做interval time，如果超过这个时间应该返回失败。针对这样的情况，我们可以根据请求驻留时间的情况来描述一个动态长度的队列，当一个请求入队之后，对其驻留时间（sojourn time）进行追踪，以正常的情况作为其目标驻留时间（target time），在这个例子中是5ms，就是说一般情况下，我们期望请求在队列中的驻留时间不高于5ms。由于业务的超时时间或者说我们提供的SLA处理时间是100ms，所以，在这个队列中驻留超过100ms的请求都应该丢弃（从队列头开始），因为即使处理完成它们也没有意义了。丢弃将持续到队列中的请求等待时间回到理想的target time为止，并且队列长度整体不大于队列容量上限。这样就根据驻留时间维持了一个动态长度的队列，这个队列中的所有请求理论上都应该等待100ms以内，要么被正常处理掉，要么被丢弃。这就是CoDel算法的基本思路。</p><p>为了有助于大家理解，我们再详细一点描述一下这个算法的处理过程：</p><p>CoDel算法对队列状态维护一个状态机，进行队列dequeue处理的时候，先判检查队列头请求的驻留时间（sojourn time）是否大于target time，如果不大于target time，就直接dequeue；如果大于（target time）的请求维持了interval time这么长的时间，则队列应该进入dropping状态开始丢包。这种丢包状态将可能维持一段时间，这段时间的长度将根据情况而定（驻留时间一直处在target以上，并且下一个包丢弃的时间采用逆平方根运算（inverse-square-root）,公式为：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">t（第一次取now，以后取上次的值） + interval / sqrt(count)）</span><br></pre></td></tr></table></figure><p>count的取值为丢弃包的个数，如果count大于2则count＝count－2，其他情况count取值为1。直到驻留时间小于target time，就退出dropping状态。</p><p>算法的伪代码描述参见<a class="link"   href="http://queue.acm.org/appendices/codel.html" >这里<i class="fas fa-external-link-alt"></i></a>。</p><blockquote><p>我们之所以要如此详细的描述bufferbloat问题以及其解决方案，尤其是CoDel算法，原因是其不仅仅被用在网络的分组交换和路由的处理上。除了TC的队列规则外，CoDel当前还被用在了内核TCP协议栈的拥塞控制中，并且rabbitmq也已经把这个算法应用于消息队列的延时控制了,<a class="link"   href="http://www.rabbitmq.com/blog/2012/05/11/some-queuing-theory-throughput-latency-and-bandwidth/" >参见<i class="fas fa-external-link-alt"></i></a>。这个算法在数据中心的应用场景下，是一个非常好的解决队列阻塞的方案。</p></blockquote><p>了解了以上知识之后，我们来看一下再Linux上如何配置一个CoDel的队列规则，我们刚才已经将队列规则改为RED了，此时如果要将其改为CoDel，需要先删除RED的队列规则，再添加新的队列规则：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">zorrozou</span>-<span class="type">pc0</span> <span class="type">zorro</span>]<span class="comment"># tc qd del dev enp2s0 root</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">zorrozou</span>-<span class="type">pc0</span> <span class="type">zorro</span>]<span class="comment"># tc qdisc add dev enp2s0 root codel limit 100 target 4ms interval 30ms ecn</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">zorrozou</span>-<span class="type">pc0</span> <span class="type">zorro</span>]<span class="comment"># tc qd ls dev enp2s0</span></span><br><span class="line">qdisc codel <span class="number">8002</span>: root refcnt <span class="number">2</span> limit <span class="number">100</span>p target <span class="number">4.0</span>ms interval <span class="number">30.0</span>ms ecn </span><br><span class="line">[<span class="type">root</span>@<span class="type">zorrozou</span>-<span class="type">pc0</span> <span class="type">zorro</span>]<span class="comment"># tc -s qd ls dev enp2s0</span></span><br><span class="line">qdisc codel <span class="number">8002</span>: root refcnt <span class="number">2</span> limit <span class="number">100</span>p target <span class="number">4.0</span>ms interval <span class="number">30.0</span>ms ecn </span><br><span class="line"> Sent <span class="number">5546</span> bytes <span class="number">39</span> pkt (dropped <span class="number">0</span>, overlimits <span class="number">0</span> requeues <span class="number">0</span>) </span><br><span class="line"> backlog <span class="number">0</span>b <span class="number">0</span>p requeues <span class="number">0</span> </span><br><span class="line">  count <span class="number">0</span> lastcount <span class="number">0</span> ldelay <span class="number">0</span>us drop_next <span class="number">0</span>us</span><br><span class="line">  maxpacket <span class="number">0</span> ecn_mark <span class="number">0</span> drop_overlimit <span class="number">0</span></span><br></pre></td></tr></table></figure><p>tc的-s参数相信你已经明白什么意思了。来说一下codel队列规则的相关参数：</p><p><strong>limit</strong>:队列长度上限，如果超过这个长度，新来的数据包将被直接丢弃。单位为字节数，默认值为1000.</p><p><strong>target</strong> &amp;&amp; <strong>interval</strong>:这两个参数相信大家已经明白是什么意思了，根据自己的场景进行配置就好了。</p><p><strong>ecn</strong> &amp;&amp; <strong>noecn</strong>:这个参数的含义根RED中的一样，默认是开启的ecn方式通知源端，不丢包。</p><p>大家也可以直接使用codel规则的默认参数，就是其他参数都省略即可。我们来看看什么效果：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">zorrozou</span>-<span class="type">pc0</span> <span class="type">zorro</span>]<span class="comment"># tc qd del dev enp2s0 root</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">zorrozou</span>-<span class="type">pc0</span> <span class="type">zorro</span>]<span class="comment"># tc qdisc add dev enp2s0 root codel</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">zorrozou</span>-<span class="type">pc0</span> <span class="type">zorro</span>]<span class="comment"># tc -s qd ls dev enp2s0</span></span><br><span class="line">qdisc codel <span class="number">8003</span>: root refcnt <span class="number">2</span> limit <span class="number">1000</span>p target <span class="number">5.0</span>ms interval <span class="number">100.0</span>ms </span><br><span class="line"> Sent <span class="number">8613</span> bytes <span class="number">33</span> pkt (dropped <span class="number">0</span>, overlimits <span class="number">0</span> requeues <span class="number">0</span>) </span><br><span class="line"> backlog <span class="number">0</span>b <span class="number">0</span>p requeues <span class="number">0</span> </span><br><span class="line">  count <span class="number">0</span> lastcount <span class="number">0</span> ldelay <span class="number">0</span>us drop_next <span class="number">0</span>us</span><br><span class="line">  maxpacket <span class="number">0</span> ecn_mark <span class="number">0</span> drop_overlimit <span class="number">0</span></span><br></pre></td></tr></table></figure><h3 id="fq-codel队列规则"><a href="#fq-codel队列规则" class="headerlink" title="fq-codel队列规则"></a>fq-codel队列规则</h3><p>在比较老版本的Linux内核上，由于当时还没实现基于CoDel算法的队列规则，所以一直使用的是pfifo_fast作为默认队列规则。作为一个简单的队列规则，pfifo_fast越来越不能适应Linux的发展需要。这个发展主要指的是Linux作为android系统的操作系统内核被广泛用在了手机等移动互联设备上。在移动互联网的场景下，网络延时问题变的更普遍，而导致网络上的bufferbloat问题变成了急需解决的问题。于是，CoDel的算法引入变的非常必要。CoDel算法虽然比较高质量的解决了bufferbloat问题，但是并没有解决多链接处理的公平性问题。这个公平性问题其实也比较好理解，因为网络有不同的传输要求，某些传输数据量很大，但是延时要求不大，某些则是数据量很小，但是延时要求很高（IP协议TOS字段所描述的情况）。如果各种链接占用同一个队列，那么数据量大的的连接势必数据包就更多，那么从概率上讲，这样的连接挤占队列的能力就更强。而主动队列管理一般都是以ecn或者丢包为手段的，如果丢弃的是那些延时要求较高的连接的数据包，又会对用户的服务质量感受造成很大的影响。所以，最好的办法就是实现一个针对每一个数据流(flow)公平的CoDel队列规则，就是fq-codel。</p><p>fq-codel叫做flow queue codel调度，因为其特点也被叫做fair queue codel（完全公平）。fq-codel为每个需要使用网络的flow创建一个单独的队列（实际上是默认实现1024个队列，使用五元组hash给相关flow选择一个队列），队列之间使用针对字节的DRR(Deficit Round Robin)调度算法进行调度。它的工作方式是跟踪每个队列的当前差额（_deficit_）的字节个数。这个差额的初始值可以用quantum参数指定。每当一个队列获得发送数据（出队）的机会时就开始发送数据包，并根据发送的数据包的字节数减少deficit的值，直到这个值变为负值的时候，对其增加一个quantum的大小，并且本队列发送结束，调度下一个队列。</p><p>这意味着，如果目前有两个队列，一个队列中的数据包长度都是quantum&#x2F;3这么大，而另一个队列中的数据包长度每个都是一个quantum长度的话，调度器处理第一个队列的时候，每次处理3个数据包，而第二个队列就只能处理1个数据包。这意味着DRR算法对每个队列发送数据的时候是针对字节数计数，不会因为数据包数的大小而有差别。</p><p>quantum取值的大小决定了调度周期的粒度，所以也就决定了调度器的调度开销。当网络带宽比较小的时候，推荐的设置是从默认的MTU的值来取quantum的值，并可以考虑适当减小这个值。</p><p>不同于标准DRR调度的地方是，我们的调度器将所有flow队列分成了两个sets。实际上可以认为所有队列有两个分类，一类里面都是new flow，针对新建的网络连接；而另一类是old flow，针对原来机已经建立的网络连接。</p><p><strong>Interval</strong></p><p>这个值的意义根CoDel算法中的语义完全一样，是用来确定最小延时时间的取值不至于导致数据包长时间在队列里堆积。最小延时的取值必须根据上一个周期interval检查的经验而得来，应该被设置为，数据包通过网络瓶颈点发给对端之后，能够接收到对端返回的确认的最差RTT时间。</p><p>默认间隔时间值为100ms。</p><p><strong>Target</strong></p><p>这个值的意义根CoDel算法中的语义完全一样，是用来设定在FQ－CoDel的每个队列中数据包的最小延时时间（可以等待的最长时间）的。最小延时时间是通过追踪本地最小队列延时的经验得来的。</p><p>默认的Target值为5ms，但是这个值应该根据本地的网络情况得来，最少应配制成本地网络的mtu长度的数据包在相应的带宽环境下发送的时间。（如：本地网卡mtu为1500，带宽为1Mbps的情况下，应配置为15ms。）</p><p>下面简述一下fq-codel的处理过程：</p><p><strong>FQ-CoDel的入队（enqueue）</strong>：</p><p>入队由三个步骤组成：根据flow特点进行分类选择一个队列，记录数据包入队时间并记账（bookkeeping），另外如果队列满了还会丢弃数据包。</p><p>分类的时候会根据数据包的源、目的ip；源、目的端口和使用的协议（五元组）并参杂一个随机数，用这个值对队列个数取模运算，得出把这个flow放到哪个队列中。</p><p><strong>FQ-CoDel的出队（dequeue）</strong>：</p><p>队列规则的绝大多数工作都是在出队的时候做的。分三个步骤：选择从那个队列发送数据包；dequeue数据包（在所选队列中处理CoDel算法）；记账（bookkeeping）；</p><p>在第一部分处理的过程中：调度器先查找new list队列，对这个list中的每个队列进行处理处理，如果队列有负的赤字（negative deficit）说明起已经被出队了至少一个quantum的字节数，那么就说明这个队列已经不再是new队列了，则追加到old list中，并且给其增加一个quantum的字节数的deficit，然后处理new list中的下一个队列。</p><p>如果选择的队列不是上述情况，就说明这是一个new队列，则对其dequeue。如果new列表为空，则开始处理old列表，处理过程根上述过程类似。</p><p>选择好处理哪个queue之后，CoDel算法就会作用于这个队列。这个算法可能在返回需要dequque的数据包之前，先删除队列中的一个或者多个数据包，数据包的删除是从队列头开始的。</p><p>最后，如果CoDel没有返回需要dequeue的数据包，或者队列为空，调度器将根据情况做这两件事的其中一个：如果队列是new列表中的队列，则将其移动到old列表的最后一个。如果队列是old列表中的队列，那么这个队列讲从old列表中删除，直到下次这个队列中有数据包需要处理的时候，就再把它加到new列表中。如果所有队列中都没有需要dequeue的数据包之后，就对所有队列重来一次上述调度过程。</p><p>如果调度算法返回了一个需要dequeue的数据包，处理过程将会先去处理deficit数字，然后对数据包进行相关dequeue处理。</p><p>检查new列表并把符合条件的队列移动到old列表这个过程会因为可能存在的无限循环而导致饥饿。则是因为当某一个数据流符合一个速率进行小包发送的时候，这个队列会在new列表中重现，而导致调度器一直无法处理old列表。预防这种饥饿的方法是，在第一次讲队列移动到old列表的时候，强制跳过不再检查。</p><p>以上过程更详细的描述<a class="link"   href="https://tools.ietf.org/html/draft-ietf-aqm-fq-codel-03" >参见<i class="fas fa-external-link-alt"></i></a>。我们再来看看如何配置一个fq-codel队列规则。跟刚才步骤类似：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">zorrozou</span>-<span class="type">pc0</span> <span class="type">zorro</span>]<span class="comment"># tc qd del dev enp2s0 root</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">zorrozou</span>-<span class="type">pc0</span> <span class="type">zorro</span>]<span class="comment"># tc -s qd ls dev enp2s0</span></span><br><span class="line">qdisc fq_codel <span class="number">0</span>: root refcnt <span class="number">2</span> limit <span class="number">10240</span>p flows <span class="number">1024</span> quantum <span class="number">1514</span> target <span class="number">5.0</span>ms interval <span class="number">100.0</span>ms ecn </span><br><span class="line"> Sent <span class="number">7645</span> bytes <span class="number">45</span> pkt (dropped <span class="number">0</span>, overlimits <span class="number">0</span> requeues <span class="number">0</span>) </span><br><span class="line"> backlog <span class="number">0</span>b <span class="number">0</span>p requeues <span class="number">0</span> </span><br><span class="line">  maxpacket <span class="number">0</span> drop_overlimit <span class="number">0</span> new_flow_count <span class="number">0</span> ecn_mark <span class="number">0</span></span><br><span class="line">  new_flows_len <span class="number">0</span> old_flows_len <span class="number">0</span></span><br></pre></td></tr></table></figure><p>其实我们会发现，作为默认的队列规则，删除了原来配置的队列规则之后，显示的就是fq-codel了，默认参数就是显示的这样了。这个队列规则包含的参数包括：</p><p><strong>limit</strong></p><p><strong>flows</strong></p><p><strong>target</strong></p><p><strong>interval</strong></p><p><strong>quantum</strong></p><p><strong>ecn | noecn</strong></p><p>帮助可以参见man tc-fq_codel。唯一需要再稍作解释的就是flows，这个参数决定了有少个队列，默认1024。</p><p>另外，内核还提供了一个fq队列，实际上就是fq-codel不带codel的一个基于DRR算法的公平队列。这里没有更多参考，你可以直接使用这个队列。</p><blockquote><p>本节涉及到了一个负载均衡算法，DRR－基于赤字的轮训算法。实际上内核也实现了一个专门的DRR调度队列，大家可以参考man tc-drr。关于这个算法本身的描述请自行查找资料。</p></blockquote><h3 id="SFQ随机公平队列"><a href="#SFQ随机公平队列" class="headerlink" title="SFQ随机公平队列"></a>SFQ随机公平队列</h3><p>首先我要引用<a class="link"   href="http://www.lartc.org/LARTC-zh_CN.GB2312.pdf" >LARTC中文版<i class="fas fa-external-link-alt"></i></a>中对SFQ队列的讲解，毕竟这已经足够权威了：</p><blockquote><p>SFQ(Stochastic Fairness Queueing，随机公平队列)是公平队列算法家族中的一个简单实现。它的精确性不如其它的方法，但是它在实现高度公平的同时，需要的<br>计算量却很少。SFQ 的关键词是“会话”(或称作“流”) ，主要针对一个 TCP 会话或者 UDP流。流量被分成相当多数量的 FIFO 队列中，每个队列对应一个会话。数据按照<br>简单轮转的方式发送, 每个会话都按顺序得到发送机会。这种方式非常公平，保证了每一个会话都不会没其它会话所淹没。SFQ 之所以被称为“随机”，是因为它并不是真的为每一个会话创建一个队列，而是使用一个散列算法，把所有的会话映射到有限的几个队列中去。因为使用了散列，所以可能多个会话分配在同一个队列里，从而需要共享发包的机会，也就是共享带宽。为了不让这种效应太明显，SFQ 会频繁地改变散列算法，以便把这种效应控制在几秒钟之内。有很重要的一点需要声明：只有当你的出口网卡确实已经挤满了的时候，SFQ 才会起作用！否则在你的 Linux 机器中根本就不会有队列，SFQ 也就不会起作用。稍后我们会描述如何把 SFQ 与其它的队列规定结合在一起，以保证两种情况下都比较好的结果。特别地，在你使用 DSL modem 或者 cable modem 的以太网卡上设置 SFQ 而不进行任何进一步地流量整形是无谋的！</p></blockquote><blockquote><p>SFQ 基本上不需要手工调整：<br><strong>perturb</strong>:多少秒后重新配置一次散列算法。如果取消设置，散列算法将永远不会重新配置（不建议这样做）。10 秒应该是一个合适的值。<br><strong>quantum</strong>:一个流至少要传输多少字节后才切换到下一个队列。却省设置为一个最大包的长度(MTU 的大小)。不要设置这个数值低于 MTU！</p></blockquote><blockquote><p>如果你有一个网卡，它的链路速度与实际可用速率一致——比如一个电话MODEM——如下配置可以提高公平性：</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># tc qdisc add dev ppp0 root sfq perturb 10</span></span><br><span class="line"><span class="comment"># tc -s -d qdisc ls</span></span><br><span class="line"></span><br><span class="line">qdisc sfq <span class="number">800</span>c: dev ppp0 quantum <span class="number">1514</span>b limit <span class="number">128</span>p flows <span class="number">128</span>/<span class="number">1024</span> perturb <span class="number">10</span>sec</span><br><span class="line">Sent <span class="number">4812</span> bytes <span class="number">62</span> pkts (dropped <span class="number">0</span>, overlimits <span class="number">0</span>)</span><br></pre></td></tr></table></figure><blockquote><p>“800c:”这个号码是系统自动分配的一个句柄号，“limit”意思是这个队列中可以有 128 个数据包排队等待。一共可以有 1024 个散列目标可以用于速率审计，而其中 128 个可以同时激活。(no more packets fit in the queue!)每隔 10 秒种散列算法更换一次。</p></blockquote><p>以上是对SFQ队列的权威解释，但是毕竟时过境迁，目前的实现稍有不同。现在的SFQ在原有队列的基础上实现了RED模式，就是针对每一个SFQ队列，都可以用RED算法来防止bufferbloat问题。目前的RED跟SFQ队列规则的关系有点像codel跟fq_codel队列规则之间的关系，它们一个是基础版算法的队列实现，另一个是其多队列版。</p><p>新版中需要解释的参数:</p><p><strong>redflowlimit</strong>:用来限制在RED模式下的SFQ的每个队列的字节数上限。</p><p><strong>perturb</strong>:默认值为0，表示不重新配置hash算法。原来为10，单位是秒。</p><p><strong>depth</strong>:限制每一个队列的深度（长度），默认值127，只能减少，单位包个数。</p><p>如果需要配置一个RED模式的SFQ，操作方式如下：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tc qdisc add dev eth0 parent <span class="number">1</span>:<span class="number">1</span> handle <span class="number">10</span>: sfq limit <span class="number">3000</span> flows <span class="number">512</span> divisor <span class="number">16384</span> redflowlimit <span class="number">100000</span> min <span class="number">8000</span> max <span class="number">60000</span> probability <span class="number">0.20</span> ecn headdrop</span><br></pre></td></tr></table></figure><p>更多的帮助情参阅:</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">man</span> tc<span class="literal">-sfq</span></span><br></pre></td></tr></table></figure><blockquote><p>内核还给我们提供了一个名叫sfb的随机公平队列，相对sfq来说，sfb的意思就是采用的blue算法对每个队列进程处理。什么是blue算法？这是相对于red来说的（有红的算法，也要有蓝的）。我们不对BLUE算法做更详细的解释了，大家有兴趣可以自行查找资料。</p></blockquote><p>SFQ的结构如下：</p><p><img                         lazyload                       alt="image"                       data-src="http://linux-ip.net/articles/Traffic-Control-HOWTO/images/sfq-qdisc.png"                        alt="SFQ"                 ></p><h3 id="PIE比例积分控制队列"><a href="#PIE比例积分控制队列" class="headerlink" title="PIE比例积分控制队列"></a>PIE比例积分控制队列</h3><p>PIE是Proportional Integral controller Enhanced的简写，其中文名称是加强的比例积分控制。比例积分控制是非常有名的一种工控算法。想要详细了解这个方法的，可以自行查阅相关资料。而在tc的队列规则中，pie是内核帮我们实现的另一个用来解决bufferbloat问题的AQM机制。其控制思路跟CoDel一样，都是针对请求的延时进行控制而不是队列长度，但是其对超时请求处理方法跟RED一样，都是随机对数据包进行丢弃。</p><p>PIE是根据队列中请求的延时情况而对不同级别的拥塞做出相关的相应动作的（比如丢包），严格来说，是根据队列中请求延时时间的变化率（就是当前延时时间与目标延时时间的差值与时间的积分）来判断。这就能做到影响算法参数值选择是根据稳态感受的变化而变化的，目的就是可以让算法本身在各种网络阻塞的情况下都能自动调节以优化性能表现。</p><p>PIE包括三个简单的必需组件：1.入队时的随机丢弃；2.周期的更新丢弃可能性比率（probability）；3.对延时（latency）进行计算。当一个请求到达队列时（入队之前），会被评估这个请求是否会被随机丢弃。丢弃的几率会根据目前的延时状态和目标延时（target）的差距（比例控制）以及队列的延时是否变长或者变短（积分控制）的状态，每隔一定时间周期（tupdate）进行更新。队列的延时是通过直接测量请求的等待时间或计算队列长度和出队速率获得的。</p><p>跟其他最先进的AQM算法一样，当一个数据包到达时PIE会根据一个随机丢弃的可能性p来丢弃数据包，p的计算方式如下：</p><ol><li>首先根据以下公式估计当前队列延时：<br> est_del &#x3D; qlen&#x2F;depart_rate;</li><li>计算丢弃可能性几率p：<br> p &#x3D; p + alpha * (est_del - target_del) + beta * (est_del - est_del_old);<br> est_del_old &#x3D; est_del.</li></ol><p>以上计算过程会按一定时间周期进行估算，周期的时间由tupdate参数指定，est_del是当前周期的队列延时，est_del_old是上一个周期的队列延时，target_del是目标延时。qlen表示当前队列长度。</p><p>alpha是用来确定当前的延迟与目标延时的偏差将如何影响丢弃概率。beta值会对整个p的估算起到另一个校准作用，这个作用通过目前的延时是在上升还是在下降进行估算的。请注意p的运算是一个逐渐达到的过程（积分过程），并不是一步达到的。在运算p的时候，为了避免校准过程中比较大的波动，我们一般是对p做小的增量调整。假设p在1%的范围内，那么我们希望单步校准的幅度也比较小，比如0.1%，那么alpha和beta也都要足够小，。但是如果p的值更高了，比如说达到了10%，在这种情况下，我们的单步教准的幅度也希望更大，比如达到1%。所以我们在p取值的每一个量级范围内，都可能需要一个单步的调教幅度的取值范围，在必要的情况下p可能会精确到0.0001%。这个单步调校的范围可以通过类似这样一个方式实现：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (drop_prob_ &lt; <span class="number">0.000001</span>) &#123;</span><br><span class="line">    drop_prob_ /= <span class="number">2048</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (drop_prob_ &lt; <span class="number">0.00001</span>) &#123;</span><br><span class="line">    drop_prob_ /= <span class="number">512</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (drop_prob_ &lt; <span class="number">0.0001</span>) &#123;</span><br><span class="line">    drop_prob_ /= <span class="number">128</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (drop_prob_ &lt; <span class="number">0.001</span>) &#123;</span><br><span class="line">    drop_prob_ /= <span class="number">32</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (drop_prob_ &lt; <span class="number">0.01</span>) &#123;</span><br><span class="line">    drop_prob_ /= <span class="number">8</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (drop_prob_ &lt; <span class="number">0.1</span>) &#123;</span><br><span class="line">    drop_prob_ /= <span class="number">2</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    drop_prob_ = drop_prob_;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对p进行调校的目标是让p稳定下来，稳定的条件就是当队列的当前延时等于目标延时，并且延时状态已经稳定的情况（就是说est_del等于est_del_old）。alpha和beta的取值实际上就是一个权重值，如果alpha较大则丢弃几率对延时偏移（latency offset即相对于目标延时的差距）更敏感，如果beta较大则丢弃几率p对延时抖动（latency jitter即相对于上周期延时的差距）更敏感。</p><p>计算周期tupdate参数也是一个让整个校准过程能够稳定发挥效果的重要参数，当我们配置更快的tupdate周期，并且alpha和beta的值相同时，则周期增益效果更明显。请注意alpha和beta的配置单位是hz，由于在上面的计算公式中表示的不明显，所以这可能会成为配置出错的地方。</p><p>请注意，丢弃可能性p的计算不仅与当前队列延时的估算有关，还与延时变化的方向有关，就是说，延时变大或者变小都会影响计算。延时变化的方向可以从当前队列延时和之前一个周期的队列延时进行比较来确定。这就是采用标准的比例积分控制算法对队列的延时进行控制。</p><p>队列的出队速率可能会经常波动，造成这种情况的原因是我们可能与其它队列共享同一个连接设备，活着链路的容量波动。在无线网络的情况下，链路的波动尤其常见。因此，我们通过以下方法直接测量出队速率：</p><p>当队列中有足够的数据时，才进入测量周期：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">qlen &gt; dq_threshold</span><br></pre></td></tr></table></figure><p>进入测量周期之后，在数据包出队时：<br>    dq_count &#x3D; dq_count + deque_pkt_size;</p><p>然后判断dq_coune是不是高于采样阈值：<br>    if dq_count &gt; dq_threshold then</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">depart_rate = dq_count/(now-start);</span><br><span class="line"></span><br><span class="line">dq_count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">start = now;</span><br></pre></td></tr></table></figure><p>我们只在队列中存在足够的数据的时候才计算出队速率，就是当队列长度超过deq_threshold这个阈值的时候。这是因为时不时出现的短的和非持久性的爆发数据流量进入空队列时会使测量不准确。参数dq_count表示从上次测量之后离开的字节数，一旦这个值超过了deq_threshold阈值，我们就得到一次有效的测量采样。在数据包长度在1k到1.5k长度的时候，我们建议dq_count的值为16k，这样的设置既可以让我们有足够长的时间周期来对出队速率做平均，也能够足够快的反馈出出队速率的突然变化。这个阈值并不影响系统的稳定性。</p><p>除了上面的基本算法描述以外，PIE算法该提供了一些其它增强功能来提升算法的性能：</p><p>网络流量往往都会有一定的自然波动，当队列的延时因为这样的波动而出现临时性的“虚假”上涨的时候，我们不希望在这样的情况下引起不必要的丢包。所以，PIE算法实现了一个自动开启和关闭算法的机制，当队列长度不足缓冲区长度的1&#x2F;3时，算法是不会生效的，此时处于关闭状态，当队列中的数据量超过了1&#x2F;3这个阈值的时候，算法自动打开，开始对队列中的数据进行处理。当阻塞情况完全恢复的时候，就是说丢弃概率、队列长度和队列延时都为0的时候，PIE的作用关闭。</p><p>虽然PIE采用随机丢弃的策略来处理入队的数据包，但是仍然可能会有几率因为丢弃的数据包很连续或者很稀疏而导致丢弃效果偏离丢弃几率p。这就好比抛硬币问题，虽然概率上出现正面或者反面的几率都是50%，但是当你真的去抛硬币的时候，仍然可能碰见连续多次的出现正面或者反面的情况。所以，我们引入了一种“去随机”的丢弃机制来防止这样的事情发生。我们引入了一个参数prob，当发生丢弃的时候，这个参数被重置为0，当数据包到达进行丢弃判断的时候，prob参数也会进行累加，累加的值是每次计算丢弃概率得到p这个值的总量。prob会有一个阈值下限和一个上限，当累计的prob低于阈值下线的时候，我们不丢包，直接入队，当高于阈值上限的时候，我们无论几率如何，强制丢包。只有当prob在阈值下限和上限之间时，我们才按照p的几率丢弃数据包。这样就能保证，如果几率导致连续没丢包，积累到一定程度后一定会丢包，另一方面，如果丢包，则prob一定在下限以下，则下一个包一定会入队，以防止问题的发生。</p><p>关于PIE更多的资料，可以参考<a class="link"   href="https://tools.ietf.org/html/draft-ietf-aqm-pie-03" >这里<i class="fas fa-external-link-alt"></i></a>。</p><h3 id="TBF队列"><a href="#TBF队列" class="headerlink" title="TBF队列"></a>TBF队列</h3><p>以上的算法主要都是解决bufferbloat问题的。我们可以看到Linux内核为了适应移动互联网的环境做了很多努力。而接下来我们要介绍的TBF（令牌痛过滤器）是我们遇到的第一个可以对流量进行整形（就是限速）的算法。自它诞生到现在，基本功能没有什么太大变化，毕竟token bucket filter算法已经是一个非常经典的限速算法了。所以我们只需要引用<a class="link"   href="http://www.lartc.org/LARTC-zh_CN.GB2312.pdf" >LARTC<i class="fas fa-external-link-alt"></i></a>中的讲解即可：</p><hr><p>令牌桶过滤器(TBF)是一个简单的队列规定：只允许以不超过事先设定的速率到来的数据包通过，但可能允许短暂突发流量朝过设定值。TBF 很精确,对于网络和处理器的影响都很小。所以如果您想对一个网卡限速，它应该成为您的第一选择！TBF 的实现在于一个缓冲器(桶)，不断地被一些叫做“令牌”的虚拟数据以特定速率填充着。 (token rate)。桶最重要的参数就是它的大小，也就是它能够存储令牌的数量。每个到来的令牌从数据队列中收集一个数据包，然后从桶中被删除。这个算法关联到两个流上——令牌流和数据流，于是我们得到 3 种情景：• 数据流以等于令牌流的速率到达 TBF。这种情况下，每个到来的数据包都能对应一个令牌，然后无延迟地通过队列。</p><p>• 数据流以小于令牌流的速度到达 TBF。通过队列的数据包只消耗了一部分令牌，剩下的令牌会在桶里积累下来，直到桶被装满。剩下的令牌可以在需要以高于令牌流速率发送数据流的时候消耗掉，这种情况下会发生突发传输。</p><p>• 数据流以大于令牌流的速率到达 TBF。这意味着桶里的令牌很快就会被耗尽。导致 TBF 中断一段时间，称为“越限”。如果数据包持续到来，将发生丢包。</p><p>最后一种情景非常重要，因为它可以用来对数据通过过滤器的速率进行整形。令牌的积累可以导致越限的数据进行短时间的突发传输而不必丢包，但是持续越限的话会导致传输延迟直至丢包。</p><p>请注意，实际的实现是针对数据的字节数进行的，而不是针对数据包进行的。</p><p>即使如此，你还是可能需要进行修改，TBF 提供了一些可调控的参数。第一个参数永远可用：</p><p><strong>limit&#x2F;latency</strong></p><p>limit 确定最多有多少数据（字节数）在队列中等待可用令牌。你也可以通过设置 latency 参数来指定这个参数，latency 参数确定了一个包在 TBF中等待传输的最长等待时间。后者计算决定桶的大小、速率和峰值速率。</p><p><strong>burst&#x2F;buffer&#x2F;maxburst</strong></p><p>桶的大小，以字节计。这个参数指定了最多可以有多少个令牌能够即刻被使用。通常，管理的带宽越大，需要的缓冲器就越大。在 Intel 体系上，10 兆 bit&#x2F;s 的速率需要至少 10k 字节的缓冲区才能达到期望的速率。如果你的缓冲区太小，就会导致到达的令牌没有地方放（桶满了），这会导致潜在的丢包。</p><p><strong>mpu</strong></p><p>一个零长度的包并不是不耗费带宽。比如以太网，数据帧不会小于 64 字节。Mpu(Minimum Packet Unit，最小分组单位)决定了令牌的最低消耗。</p><p><strong>rate</strong></p><p>速度操纵杆。参见上面的 limits！如果桶里存在令牌而且允许没有令牌，相当于不限制速率(缺省情况)。If the bucket contains tokens and is allowed to empty, by default it does so at infinite speed. 如果不希望这样，可以调整入下参数：</p><p><strong>peakrate</strong></p><p>如果有可用的令牌，数据包一旦到来就会立刻被发送出去，就象光速一样。那可能并不是你希望的，特别是你有一个比较大的桶的时候。峰值速率可以用来指定令牌以多块的速度被删除。用书面语言来说，就是：释放一个数据包，但后等待足够的时间后再释放下一个。我们通过计算等待时间来控制峰值速率然而，由于 UNIX 定时器的分辨率是10 毫秒，如果平均包长 10k bit，我们的峰值速率被限制在了 1Mbps。</p><p><strong>mtu&#x2F;minburst</strong></p><p>但是如果你的常规速率比较高，1Mbps 的峰值速率对我们就没有什么价值。要实现更高的峰值速率，可以在一个时钟周期内发送多个数据包。最有效的办法就是：再创建一个令牌桶！这第二个令牌桶缺省情况下为一个单个的数据包，并非一个真正的桶。要计算峰值速率，用 mtu 乘以 100 就行了。 (应该说是乘以 HZ 数，Intel体系上是 100，Alpha 体系上是 1024)</p><p>这是一个非常简单而实用的例子：</p><pre><code># tc qdisc add dev ppp0 root tbf rate 220kbit latency 50ms burst 1540</code></pre><p>为什么它很实用呢？如果你有一个队列较长的网络设备，比如 DSL modem 或者cable modem 什么的，并通过一个快速设备(如以太网卡)与之相连，你会发现上载数据绝对会破坏交互性。这是因为上载数据会充满 modem 的队列，而这个队列为了改善上载数据的吞吐量而设置的特别大。但这并不是你需要的，你可能为了提高交互性而需要一个不太大的队列。也就是说你希望在发送数据的时候干点别的事情。上面的一行命令并非直接影响了 modem 中的队列，而是通过控制 Linux 中的队列而放慢了发送数据的速度。把 220kbit 修改为你实际的上载速度再减去几个百分点。如果你的 modem 确实很快，就把“burst”值提高一点。</p><hr><p>以上为引用原文内容，请原谅我的懒惰。TBF结构图如下：</p><p><img                         lazyload                       alt="image"                       data-src="http://linux-ip.net/articles/Traffic-Control-HOWTO/images/tbf-qdisc.png"                        alt="TBF"                 ></p><h3 id="分类-class-、过滤器-filter-以及HTB"><a href="#分类-class-、过滤器-filter-以及HTB" class="headerlink" title="分类(class)、过滤器(filter)以及HTB"></a>分类(class)、过滤器(filter)以及HTB</h3><p>基于目前我们已经知道的这些内容，我们已经可以在一个运行着比较复杂的网络服务的系统环境中按照网络的数据流为调度对象，建立一个比较公平的队列环境了，并且还能避免bufferbloat现象。比如fq-codel、sfq等队列规则都能做到。这也是内核目前选择fq-codel作为默认队列规则的初衷。实际上这已经可以适应绝大多数场景了。</p><p>但是在一些QoS要求更高的场景中，我们可能需要对网络流量的服务做更细节的分类，来实现更多的功能。比如说我们有这样一个场景：我们的服务器上运行了一个web服务，对外服务端口是tcp的80，还运行了一个邮件服务，对外服务协议是smtp的tcp的25端口，可能还会开一个sshd以便管理员可以远程控制，其端口为22。我们的对外带宽一共为10Mbps。我们想要做到这样一种效果，当所有服务都很繁忙的需要占用带宽时，我们希望80端口上限不超过6Mbps，25端口上限不超过3Mbps，而22端口1Mbps足够了。当其它端口不忙的时候，某个端口可以突破自己的上限带宽设置能达到10Mbps的带宽。这种网络资源分配策略跟cgroup的cpushare方式的分配概念类似。</p><p>当我们的需求负载到类似这样的程度时，我们会发现以上的各种队列规则都不能满足需求，而能满足需求的队列规则都起吗必需实现一个功能，就是对数据包的分类（class）功能，并且这个分类要能够人为指定分类策略（实际上pfifo_fast本身对数据包进行了分类，但是并不能人为改变分类策略，所以我们仍然把它当成不可分类的队列规则）。比如针对当前的例子，我们就至少需要三个分类（可以认为就是三个队列），然后把从80端口发出的数据包都排进分类1里，从25端口发出的数据包排进分类2里，再将22端口发出的数据包放到分类3里。当然如果你的服务器还有别的服务也要用网络，可能还要额外配置一个分类或者共用以上某一个分类。</p><p>在这个描述中，我们会发现，当需求确定了，分类也就可以确定了，并且如何进行分类（过滤方法）也就可以确定了。如果我们还是把数据包比作去公交车站排队的人的话，那么可分类的队列规则就相当于公交站有个管理人员，这个管理人员可以根据情况自行确定目前乘客可以排几个队、哪个队排什么样特征的人。自然，我们需要在每个乘客来排队之前，根据确定好的策略对乘客进行过滤，让相关特征的乘客去相应的队伍。这个决定乘客所属分类的人就是过滤器（filter）。</p><p>以上是我对这两个概念的描述，希望能够帮助大家理解。相关概念的官方定义<a class="link"   href="https://tools.ietf.org/html/rfc3290" >在此<i class="fas fa-external-link-alt"></i></a>。</p><p>由于相关知识的细节说明在<a class="link"   href="http://www.lartc.org/LARTC-zh_CN.GB2312.pdf" >LARTC<i class="fas fa-external-link-alt"></i></a>中已经有了更细节的说明，我们不在废话。我们直接来看使用HTB（分层令牌桶）队列规则如何实现上述功能，其实无非就是以下系列命令：</p><p>首先，我们需要先讲当前网卡的队列规则换成HTB，保险起见，可以先删除当前队列规则再添加：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">zorrozou</span>-<span class="type">pc0</span> <span class="type">zorro</span>]<span class="comment"># tc qd del dev enp2s0 root[root@zorrozou-pc0 zorro]# tc qd add dev enp2s0 root handle 1: htb default 30</span></span><br></pre></td></tr></table></figure><p>default参数的含义就是，默认数据包都走标记为30的类（class）。<br>然后我们开始建立分类，并对各种分类进行限速：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">zorrozou</span>-<span class="type">pc0</span> <span class="type">zorro</span>]<span class="comment"># tc cl add dev enp2s0 parent 1: classid 1:1 htb rate 10mbit burst 20k</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">zorrozou</span>-<span class="type">pc0</span> <span class="type">zorro</span>]<span class="comment"># tc cl add dev enp2s0 parent 1:1 classid 1:10 htb rate 6mbit ceil 10mbit burst 20k</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">zorrozou</span>-<span class="type">pc0</span> <span class="type">zorro</span>]<span class="comment"># tc cl add dev enp2s0 parent 1:1 classid 1:20 htb rate 3mbit ceil 10mbit burst 20k</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">zorrozou</span>-<span class="type">pc0</span> <span class="type">zorro</span>]<span class="comment"># tc cl add dev enp2s0 parent 1:1 classid 1:30 htb rate 1mbit ceil 10mbit burst 20k</span></span><br></pre></td></tr></table></figure><p>这样我们建立好了一个root分类，id为1:1，速率上限为10mbit。然后在这个分类下建立了三个子分类，id分别为1:10、1:20、1:30，这个10、20、30的编号就是针对上面default的参数，你想让默认数据流走哪个分类，就在default参数后面加上它相应的id即可。我们建立了分类并且给分类做了速度限制，并且使用ceil参数指定每个分类都可以在其它分类空闲的时候借用带宽资源最高可以达到10mbit。</p><p>之后是给每个分类下再添加相应的过滤器，我们这里分别给三个分类使用了不同的过滤器，以实现不同的Qos保障。当然，每个子分类下还可以继续添加htb过滤器，让整个htb的分层树形结构变的更大，分类更细。一般情况下，两层的结构足以应付绝大多数场景了。 </p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">zorrozou</span>-<span class="type">pc0</span> <span class="type">zorro</span>]<span class="comment"># tc qd add dev enp2s0 parent 1:10 handle 10: fq_codel </span></span><br><span class="line">[<span class="type">root</span>@<span class="type">zorrozou</span>-<span class="type">pc0</span> <span class="type">zorro</span>]<span class="comment"># tc qd add dev enp2s0 parent 1:20 handle 20: sfq</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">zorrozou</span>-<span class="type">pc0</span> <span class="type">zorro</span>]<span class="comment"># tc qd add dev enp2s0 parent 1:30 handle 30: pie</span></span><br></pre></td></tr></table></figure><p>最后，我们使用u32过滤器，对数据包进行过滤，这两条命令分别将源端口为80的数据包放到分类1:10里，源端扣为25的数据包放到分类1:20里。默认其它数据包（包括22），根据default规则走分类1:30。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">zorrozou</span>-<span class="type">pc0</span> <span class="type">zorro</span>]<span class="comment"># tc fi add dev enp2s0 protocol ip parent 1:0 prio 1 u32 match ip dport 80 0xffff flowid 1:10</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">zorrozou</span>-<span class="type">pc0</span> <span class="type">zorro</span>]<span class="comment"># tc fi add dev enp2s0 protocol ip parent 1:0 prio 1 u32 match ip dport 25 0xffff flowid 1:20</span></span><br></pre></td></tr></table></figure><p>至此，htb以及u32过滤器的简单使用介绍完毕。</p><p>内核除了实现了u32过滤器来帮我们过滤数据包以外，还有一个常用的过滤器叫fw，就是实用防火墙标记作为数据包分类的区分方法（firewall mark）。我们可以先使用iptable的mangle表对数据包先做mark标记，然后在tc中使用fw过滤器去识别相应的数据包，并进行分类。还是用以上的例子进行说明，此时我们使用fw过滤器的话，最后两条命令将变成这样：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">zorrozou</span>-<span class="type">pc0</span> <span class="type">zorro</span>]<span class="comment"># tc fi add dev enp2s0 protocol ip parent 1:0 prio 1 handle 1 fw flowid 1:10</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">zorrozou</span>-<span class="type">pc0</span> <span class="type">zorro</span>]<span class="comment"># tc fi add dev enp2s0 protocol ip parent 1:0 prio 1 handle 2 fw flowid 1:20</span></span><br></pre></td></tr></table></figure><p>这两条命令说明，凡是被fwmark标记为1的数据包都走分类1:10，标记为2的走分类1:20。之后，别忘了在iptable里面添加对数据包的标记：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">zorrozou</span>-<span class="type">pc0</span> <span class="type">zorro</span>]<span class="comment"># iptables -t mangle -A OUTPUT -p tcp --sport 80 -j MARK --set-mark 1</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">zorrozou</span>-<span class="type">pc0</span> <span class="type">zorro</span>]<span class="comment"># iptables -t mangle -A OUTPUT -p tcp --sport 25 -j MARK --set-mark 2</span></span><br></pre></td></tr></table></figure><p>如果你不想学习u32过滤器哪些复杂的语法，那么fwmark是一种很好的替代方式。当然前提是你对iptables和tcp／ip协议有一定了解。</p><p>思考题：<br>添加完iptables规则后，我们可以通过以下命令查看目前mangle表的内容：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">zorrozou</span>-<span class="type">pc0</span> <span class="type">zorro</span>]<span class="comment"># iptables -t mangle -L</span></span><br><span class="line">Chain PREROUTING (policy ACCEPT)</span><br><span class="line">target     prot opt source               destination         </span><br><span class="line">Chain INPUT (policy ACCEPT)</span><br><span class="line">target     prot opt source               destination         </span><br><span class="line">Chain FORWARD (policy ACCEPT)</span><br><span class="line">target     prot opt source               destination         </span><br><span class="line">Chain OUTPUT (policy ACCEPT)</span><br><span class="line">target     prot opt source               destination         </span><br><span class="line">MARK       tcp  <span class="literal">--</span>  anywhere             anywhere             tcp spt:http MARK <span class="built_in">set</span> <span class="number">0</span>x1</span><br><span class="line">MARK       tcp  <span class="literal">--</span>  anywhere             anywhere             tcp spt:smtp MARK <span class="built_in">set</span> <span class="number">0</span>x2</span><br><span class="line">Chain POSTROUTING (policy ACCEPT)</span><br><span class="line">target     prot opt source               destination</span><br></pre></td></tr></table></figure><blockquote><p>在本例中，我们使用了其中的OUTPUT链添加了规则。那么问题是：使用不同的链（Chain）的区别是什么？</p></blockquote><p>因为一些原因，我们推荐使用HTB的方式对比较复杂的网络数据包进行分类并流量整形。当然，可分类的队列规则中，除了HTB还有PRIO以及非常著名的CBQ。其中CBQ尤其在网络设备的限速方面有着最广泛的使用，但是如果从软件实现的角度来说，令牌桶方式(htb就是分层令牌桶)的流量限制在性能和稳定性上都更具有优势。PRIO由于分类过于简单，并不适合更复杂的场景。</p><p>关于这些知识的介绍，大家依然可以在<a class="link"   href="http://www.lartc.org/LARTC-zh_CN.GB2312.pdf" >LARTC<i class="fas fa-external-link-alt"></i></a>上找到更详细的讲解。根据上面的命令，我们再参照结构图来理解一下HTB：</p><p><img                         lazyload                       alt="image"                       data-src="http://linux-ip.net/articles/Traffic-Control-HOWTO/images/htb-borrow.png"                        alt="HTB"                 ></p><h3 id="使用cgroup限制网络流量"><a href="#使用cgroup限制网络流量" class="headerlink" title="使用cgroup限制网络流量"></a>使用cgroup限制网络流量</h3><p>如果你是从头开始看到这里的，那么真的很佩服你的耐心。我们前面似乎讲了一堆跟cgroup做网络资源隔离没有关系的知识，但是无疑每一个知识点的理解对于我们规划网络的资源隔离都有很重要的作用。毕竟，我么要规划一个架构，必需了解清楚其相关实现以及要解决的问题。但是很不幸，我们依然没有能够讲完目前所有的qdisc实现，比如还有HFSC、ATM、MULTIQ、TEQL、GRED、DSMARK、MQPRIO、QFQ、HHF等，这些还是留着给大家自己去解密吧。相信大家如果真正理解了队列规则要解决的问题和其基础知识，理解这些东西并不难。</p><p>最后，我们要来看看如何在cgroup的场景下对网络资源进行隔离了。实际上跟我们上面讲的HTB的例子类似，区别是，上面的例子是通过端口分类，而现在需要通过cgroup进行分类。我们还是通过一个例子来说明一下场景，并实现其功能：我们假定现在有两个cgroup，一个叫jerry，另一个叫zorro。我们现在需要给jerry组中运行的网络程序限制带宽为10mbit，zorro组的网路资源占用为20mbit，总带宽为100mbit，并且不允许借用（ceil）网络资源。那么配置思路是这样：</p><p>我们的配置环境是一台centos7的虚拟机，首先，我们在这个服务器上运行一个apache的http服务，并发布了一个1G的数据文件作为测试文件，并在不限速的情况下对齐进行下载速度测试，结果为100MBps，注意这里的速度是byte而不是bit：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">zorrozou<span class="literal">-nb</span>:~ zorro<span class="variable">$</span> <span class="built_in">curl</span> <span class="literal">-O</span> http://<span class="number">192.168</span>.<span class="number">139.136</span>/file</span><br><span class="line">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span><br><span class="line">                             Dload  Upload   Total   Spent    Left  Speed</span><br><span class="line"><span class="number">100</span> <span class="number">1024</span>M  <span class="number">100</span> <span class="number">1024</span>M    <span class="number">0</span>     <span class="number">0</span>   <span class="number">101</span>M      <span class="number">0</span>  <span class="number">0</span>:<span class="number">00</span>:<span class="number">10</span>  <span class="number">0</span>:<span class="number">00</span>:<span class="number">10</span> <span class="literal">--</span>:<span class="literal">--</span>:<span class="literal">--</span>  <span class="number">100</span>M</span><br></pre></td></tr></table></figure><p>之后我们在centos7(192.168.139.136)上实现三个分类，一个带宽限制10m给jerry，另一个20m给zorro，还有一个为30m用作default，总带宽100m，剩余的资源给以后可能新加入的cgroup来分配，于是先建立相关的规则和分类：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> <span class="type">Desktop</span>]<span class="comment"># tc qd add dev eno16777736 root handle 1: htb default 100</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> <span class="type">Desktop</span>]<span class="comment"># tc cl add dev eno16777736 parent 1: classid 1:1 htb rate 100mbit burst 20k</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> <span class="type">Desktop</span>]<span class="comment"># tc cl add dev eno16777736 parent 1:1 classid 1:10 htb rate 10mbit burst 20k</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> <span class="type">Desktop</span>]<span class="comment"># tc cl add dev eno16777736 parent 1:1 classid 1:20 htb rate 20mbit burst 20k</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> <span class="type">Desktop</span>]<span class="comment"># tc cl add dev eno16777736 parent 1:1 classid 1:100 htb rate 30mbit burst 20k</span></span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> <span class="type">Desktop</span>]<span class="comment"># tc qd add dev eno16777736 parent 1:10 handle 10: fq_codel</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> <span class="type">Desktop</span>]<span class="comment"># tc qd add dev eno16777736 parent 1:20 handle 20: fq_codel</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> <span class="type">Desktop</span>]<span class="comment"># tc qd add dev eno16777736 parent 1:100 handle 100: fq_codel</span></span><br></pre></td></tr></table></figure><p>建立完分类之后，由于默认情况都要走1:100的分类，所以限速应该是30mbit，验证一下：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">zorrozou<span class="literal">-nb</span>:~ zorro<span class="variable">$</span> <span class="built_in">curl</span> <span class="literal">-O</span> http://<span class="number">192.168</span>.<span class="number">139.136</span>/file</span><br><span class="line">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span><br><span class="line">                             Dload  Upload   Total   Spent    Left  Speed</span><br><span class="line">  <span class="number">0</span> <span class="number">1024</span>M    <span class="number">0</span> <span class="number">3484</span>k    <span class="number">0</span>     <span class="number">0</span>  <span class="number">3452</span>k      <span class="number">0</span>  <span class="number">0</span>:<span class="number">05</span>:<span class="number">03</span>  <span class="number">0</span>:<span class="number">00</span>:<span class="number">01</span>  <span class="number">0</span>:<span class="number">05</span>:<span class="number">02</span> <span class="number">3452</span>k</span><br></pre></td></tr></table></figure><p>当前速度为3452kB左右，大概为30mbit，符合预期。之后将我们的http服务放到zorro组中看看效果，当然是首先建立相关cgroup以及相关配置：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> <span class="type">Desktop</span>]<span class="comment"># ls /sys/fs/cgroup/net_cls/</span></span><br><span class="line">cgroup.clone_children  cgroup.event_control  cgroup.procs  cgroup.sane_behavior  net_cls.classid  notify_on_release  release_agent  tasks</span><br><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> <span class="type">Desktop</span>]<span class="comment"># mkdir /sys/fs/cgroup/net_cls/zorro</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> <span class="type">Desktop</span>]<span class="comment"># mkdir /sys/fs/cgroup/net_cls/jerry</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> <span class="type">Desktop</span>]<span class="comment"># ls /sys/fs/cgroup/net_cls/&#123;zorro,jerry&#125;</span></span><br><span class="line">/sys/fs/cgroup/net_cls/jerry:</span><br><span class="line">cgroup.clone_children  cgroup.event_control  cgroup.procs  net_cls.classid  notify_on_release  tasks</span><br><span class="line"></span><br><span class="line">/sys/fs/cgroup/net_cls/zorro:</span><br><span class="line">cgroup.clone_children  cgroup.event_control  cgroup.procs  net_cls.classid  notify_on_release  tasks</span><br></pre></td></tr></table></figure><p>​<br>建立完毕之后分别配置相关的cgroup，将对应cgroup产生的数据包对应到相应的分类中，配置方法：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> <span class="type">Desktop</span>]<span class="comment"># echo 0x00010100 &gt; /sys/fs/cgroup/net_cls/net_cls.classid</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> <span class="type">Desktop</span>]<span class="comment"># echo 0x00010010 &gt; /sys/fs/cgroup/net_cls／jerry/net_cls.classid</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> <span class="type">Desktop</span>]<span class="comment"># echo 0x00010020 &gt; /sys/fs/cgroup/net_cls／zorro/net_cls.classid</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> <span class="type">Desktop</span>]<span class="comment"># tc fi add dev eno16777736 parent 1: protocol ip prio 1 handle 1: cgroup</span></span><br></pre></td></tr></table></figure><p>这里的tc命令是对filter进行操作，这里我们使用了cgroup过滤器，来实现将cgroup的数据包送到1:0分类中，细节不再解释。对于net_cls.classid文件，我们一般echo的是一个0xAAAABBBB的值，AAAA对应class中:前面的数字，而BBBB对应后面的数字，如：0x00010100就表示这个组的数据包将被分类到1:100中，限速为30mbit，以此类推。之后我们把http服务放倒jerry组中看看效果：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> <span class="type">Desktop</span>]<span class="comment"># for i in `ps ax|grep httpd|awk &#x27;&#123; print $1&#125;&#x27;`;do echo $i &gt; /sys/fs/cgroup/net_cls/jerry/tasks;done</span></span><br><span class="line">bash: <span class="built_in">echo</span>: <span class="built_in">write</span> error: No such <span class="keyword">process</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> <span class="type">Desktop</span>]<span class="comment"># cat /sys/fs/cgroup/net_cls/jerry/tasks</span></span><br><span class="line"><span class="number">75733</span></span><br><span class="line"><span class="number">75734</span></span><br><span class="line"><span class="number">75735</span></span><br><span class="line"><span class="number">75736</span></span><br><span class="line"><span class="number">75737</span></span><br><span class="line"><span class="number">75738</span></span><br><span class="line"><span class="number">75777</span></span><br><span class="line"><span class="number">75778</span></span><br><span class="line"><span class="number">75779</span></span><br></pre></td></tr></table></figure><p>测试效果：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">zorrozou<span class="literal">-nb</span>:~ zorro<span class="variable">$</span> <span class="built_in">curl</span> <span class="literal">-O</span> http://<span class="number">192.168</span>.<span class="number">139.136</span>/file</span><br><span class="line">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span><br><span class="line">                             Dload  Upload   Total   Spent    Left  Speed</span><br><span class="line">  <span class="number">0</span> <span class="number">1024</span>M    <span class="number">0</span> <span class="number">5118</span>k    <span class="number">0</span>     <span class="number">0</span>  <span class="number">1162</span>k      <span class="number">0</span>  <span class="number">0</span>:<span class="number">15</span>:<span class="number">01</span>  <span class="number">0</span>:<span class="number">00</span>:<span class="number">04</span>  <span class="number">0</span>:<span class="number">14</span>:<span class="number">57</span> <span class="number">1162</span>k</span><br></pre></td></tr></table></figure><p>确实限速在了10mbitps。成功达到效果，再来看看放倒zorro组下：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> <span class="type">Desktop</span>]<span class="comment"># for i in `ps ax|grep httpd|awk &#x27;&#123; print $1&#125;&#x27;`;do echo $i &gt; /sys/fs/cgroup/net_cls/zorro/tasks;done</span></span><br><span class="line">bash: <span class="built_in">echo</span>: <span class="built_in">write</span> error: No such <span class="keyword">process</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">localhost</span> <span class="type">Desktop</span>]<span class="comment"># cat /sys/fs/cgroup/net_cls/zorro/tasks</span></span><br><span class="line"><span class="number">75733</span></span><br><span class="line"><span class="number">75734</span></span><br><span class="line"><span class="number">75735</span></span><br><span class="line"><span class="number">75736</span></span><br><span class="line"><span class="number">75737</span></span><br><span class="line"><span class="number">75738</span></span><br><span class="line"><span class="number">75777</span></span><br><span class="line"><span class="number">75778</span></span><br><span class="line"><span class="number">75779</span></span><br></pre></td></tr></table></figure><p>再次测试效果：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">zorrozou<span class="literal">-nb</span>:~ zorro<span class="variable">$</span> <span class="built_in">curl</span> <span class="literal">-O</span> http://<span class="number">192.168</span>.<span class="number">139.136</span>/file</span><br><span class="line">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span><br><span class="line">                             Dload  Upload   Total   Spent    Left  Speed</span><br><span class="line">  <span class="number">0</span> <span class="number">1024</span>M    <span class="number">0</span> <span class="number">5586</span>k    <span class="number">0</span>     <span class="number">0</span>  <span class="number">2334</span>k      <span class="number">0</span>  <span class="number">0</span>:<span class="number">07</span>:<span class="number">29</span>  <span class="number">0</span>:<span class="number">00</span>:<span class="number">02</span>  <span class="number">0</span>:<span class="number">07</span>:<span class="number">27</span> <span class="number">2334</span>k</span><br></pre></td></tr></table></figure><p>限速20mbps成功。如果想要修改对于一个分类的限速，使用如下命令即可：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tc cl change dev eno16777736 parent <span class="number">1</span>: classid <span class="number">1</span>:<span class="number">100</span> htb rate <span class="number">100</span>mbit</span><br></pre></td></tr></table></figure><p>关于命令参数的详细解释，这里不做过多说明了。大家可以自行找帮助。</p><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>终于，我的Cgroup系列四部曲算是告一段落了。实际上Linux的Cgroup除了CPU、内存、IO和网络的资源管理以外，还有一些其它的配置，比如针对设备文件的访问控制和freezer机制等功能，但是这些功能都相对比较简单，个人认为没必要过多介绍了，大家要用的时候自己找帮助即可。<br>最后的最后，还是奉送一张Linux网络相关的数据包处理流程图，从这张图上大家可以清晰的看到qdisc的作用位置和其根iptables的作用关系。</p><p><img                         lazyload                       alt="image"                       data-src="https://ebtables.netfilter.org/br_fw_ia/PacketFlow.png"                        alt="Netfilter-packet-flow"                 ></p><hr><blockquote><p>文章来源于：<a class="link"   href="https://github.com/zorrozou" >https://github.com/zorrozou<i class="fas fa-external-link-alt"></i></a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本文不会涉及一些网络基础知识的讲解以及iproute2相关命令的使用的讲解，建议如果想要更好理解本文，之前应该对网络知识、tc命令和&lt;a class=&quot;link&quot;   href=&quot;http://www.lartc.org/LARTC-zh_CN.GB2312.pdf&quot; &gt;L</summary>
      
    
    
    
    <category term="Linux" scheme="https://wuchu.site/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>常用运维SQL命令</title>
    <link href="https://wuchu.site/2024/11/04/common-command/"/>
    <id>https://wuchu.site/2024/11/04/common-command/</id>
    <published>2024-11-04T05:53:10.000Z</published>
    <updated>2024-11-19T14:19:18.367Z</updated>
    
    <content type="html"><![CDATA[<h2 id="实例上操作"><a href="#实例上操作" class="headerlink" title="实例上操作"></a>实例上操作</h2><h3 id="1、获取当前数据库中所以表的大小"><a href="#1、获取当前数据库中所以表的大小" class="headerlink" title="1、获取当前数据库中所以表的大小"></a>1、获取当前数据库中所以表的大小</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> relname <span class="keyword">AS</span> table_name, pg_size_pretty(pg_total_relation_size(relid)) <span class="keyword">AS</span> total_size <span class="keyword">FROM</span> pg_catalog.pg_statio_user_tables <span class="keyword">ORDER</span> <span class="keyword">BY</span> pg_total_relation_size(relid) <span class="keyword">DESC</span>; </span><br></pre></td></tr></table></figure><h3 id="2、查询从-pg-stat-activity-视图中选择了一些列"><a href="#2、查询从-pg-stat-activity-视图中选择了一些列" class="headerlink" title="2、查询从 pg_stat_activity 视图中选择了一些列"></a>2、查询从 pg_stat_activity 视图中选择了一些列</h3><p>用于监控当前活动的会话，并过滤掉空闲的会话。查询的目的是找出那些状态不是 idle 且事务已经运行超过 1 秒的会话。用来查询相关的性能问题。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> pid, state,wait_event,wait_event_type,usename, <span class="built_in">EXTRACT</span>(EPOCH <span class="keyword">FROM</span> (now()<span class="operator">-</span>query_start)), substr(query, <span class="number">0</span>, <span class="number">150</span>) <span class="keyword">from</span> pg_stat_activity <span class="keyword">where</span> state <span class="operator">!=</span> <span class="string">&#x27;idle&#x27;</span> <span class="keyword">and</span> <span class="built_in">EXTRACT</span>(EPOCH <span class="keyword">FROM</span> (now()<span class="operator">-</span>xact_start)) <span class="operator">&gt;</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><h3 id="3、清楚空闲idel的连接"><a href="#3、清楚空闲idel的连接" class="headerlink" title="3、清楚空闲idel的连接"></a>3、清楚空闲idel的连接</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> pg_terminate_backend(pid) <span class="keyword">from</span> pg_stat_activity <span class="keyword">where</span> pid <span class="operator">&lt;&gt;</span> pg_backend_pid() <span class="keyword">and</span> state <span class="operator">=</span><span class="string">&#x27;idle&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="4、获取当前表中死元组的数量"><a href="#4、获取当前表中死元组的数量" class="headerlink" title="4、获取当前表中死元组的数量"></a>4、获取当前表中死元组的数量</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    relname <span class="keyword">AS</span> table_name,</span><br><span class="line">    n_dead_tup <span class="keyword">AS</span> dead_tuple_count</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    pg_stat_user_tables</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    relname <span class="operator">=</span> <span class="string">&#x27;table_name&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="5、linux查看文件"><a href="#5、linux查看文件" class="headerlink" title="5、linux查看文件"></a>5、linux查看文件</h3><p>查看文件每一行1000个字符</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cut <span class="literal">-c</span> <span class="number">1</span><span class="literal">-1000</span> name</span><br></pre></td></tr></table></figure><p>滚动查看文件-S表示不换行</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">less <span class="literal">-S</span> name</span><br></pre></td></tr></table></figure><h3 id="6、过滤log，只保留慢日志"><a href="#6、过滤log，只保留慢日志" class="headerlink" title="6、过滤log，只保留慢日志"></a>6、过滤log，只保留慢日志</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep <span class="literal">-v</span> <span class="literal">-e</span> <span class="string">&quot;setsock&quot;</span> <span class="literal">-e</span> <span class="string">&quot;fail&quot;</span> <span class="literal">-e</span> <span class="string">&quot;checkpoint&quot;</span> <span class="literal">-e</span> <span class="string">&quot;FATAL&quot;</span> <span class="literal">-e</span> <span class="string">&quot;ERROR&quot;</span> postgresql<span class="literal">-20-08</span>.csv &gt;&gt; pgslowlg.csv</span><br></pre></td></tr></table></figure><h2 id="Athena上操作"><a href="#Athena上操作" class="headerlink" title="Athena上操作"></a>Athena上操作</h2><p>1、修改实例参数</p><p>在252管控机上执行</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">athenactl <span class="comment">--cluster-name=集群id update --patch &#x27;&#123;&quot;pgParameters&quot;:&#123;&quot;wal_keep_size&quot;:&quot;2048&quot;&#125;&#125;&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">athenactl <span class="comment">--cluster-name=集群id update --patch &#x27;&#123;&quot;pgParameters&quot;:&#123;&quot;wal_keep_segments&quot;:&quot;8&quot;&#125;&#125;&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">athenactl <span class="comment">--cluster-name= update --patch &#x27;&#123;&quot;pgParameters&quot;:&#123;&quot;log_min_duration_statement&quot;:&quot;50&quot;&#125;&#125;&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">athenactl <span class="comment">--cluster-name=1018704 update --patch &#x27;&#123;&quot;pgParameters&quot;:&#123;&quot;squeeze.worker_role&quot;:&quot;postgres&quot;&#125;&#125;&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">athenactl <span class="comment">--cluster-name=1012374 update --patch &#x27;&#123;&quot;pgParameters&quot;:&#123;&quot;squeeze.worker_role&quot;:&quot;postgres&quot;&#125;&#125;&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;实例上操作&quot;&gt;&lt;a href=&quot;#实例上操作&quot; class=&quot;headerlink&quot; title=&quot;实例上操作&quot;&gt;&lt;/a&gt;实例上操作&lt;/h2&gt;&lt;h3 id=&quot;1、获取当前数据库中所以表的大小&quot;&gt;&lt;a href=&quot;#1、获取当前数据库中所以表的大小&quot; class=&quot;</summary>
      
    
    
    
    <category term="工具" scheme="https://wuchu.site/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="常用命令" scheme="https://wuchu.site/tags/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>PG 的日志模块，追加写？覆盖写？</title>
    <link href="https://wuchu.site/2024/10/31/pg_log_model/"/>
    <id>https://wuchu.site/2024/10/31/pg_log_model/</id>
    <published>2024-10-31T10:51:31.000Z</published>
    <updated>2024-11-19T11:41:38.740Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>PG 的日志模块是一个相对独立的模块，主要功能就是打印用户的操作日志以及一些异常报错信息。本文仅讲述 <code>logging_collector </code>数开启的情况。<code>logging_collector</code> 是 PostgreSQL 中的一个配置参数，用于控制是否启用日志收集器。</p><h2 id="日志模块原理"><a href="#日志模块原理" class="headerlink" title="日志模块原理"></a>日志模块原理</h2><h3 id="Syslogger-核心模块"><a href="#Syslogger-核心模块" class="headerlink" title="Syslogger 核心模块"></a>Syslogger 核心模块</h3><p>PG 有各种各样的进程，其中 syslogger 进程专门用于打印日志信息。而其余进程打印日志的方法如出一辙：将需要打印的信息发送给 syslogger 进程，由其统一负责打印。</p><img                         lazyload                       alt="image"                       data-src="/2024/10/31/pg_log_model/image1.png"                        class="" width="600" height="500"                 ><p>syslogger 的大体逻辑如下图所示：</p><img                         lazyload                       alt="image"                       data-src="/2024/10/31/pg_log_model/image2.png"                        class="" width="700" height="1000"                 ><ol><li>postmaster 进程在 SysLogger_Start 函数完成部分初始化；</li><li>由 postmaster 进程 fork 出 syslogger 进程；</li><li>进入 syslogger 的主逻辑函数 SysLoggerMain 中，大循环监听其他进程发送来的日志消息，处理打印逻辑。在大循环中同时也根据时间和大小，来判断是否进行日志轮转。</li></ol><h3 id="日志消息通信"><a href="#日志消息通信" class="headerlink" title="日志消息通信"></a>日志消息通信</h3><p>PG 的其余进程如果有需要打印的日志，通常会调用 elog 或者 ereport 来打印。而这两个函数会将日志消息分成若干个 chunk 发送给 syslogger 进程，每个 chunk 的结构可参考下图（源码中的 PipeProtoChunk 结构）</p><img                         lazyload                       alt="image"                       data-src="/2024/10/31/pg_log_model/image3.png"                        class="" width="600" height="200"                 ><ul><li>开头两个 \0 ，表示是日志开头</li><li>length：用于记录当前 chunk 的长度</li><li>pid：发送该 chunk 的进程号</li><li>is_last：是否是本条日志消息的最后一个 chunk；</li><li>data：具体的日志消息。</li><li>chunk 大小：PIPE_CHUNK_SIZE ，源码 define 出的一个值，由 OS 的 PIPE_BUF 决定。具体细节可参考这部分定义的代码。</li></ul><blockquote><p>注： PG 15 在 pipe 协议格式中做了一些变化，由 flags 代替 is_last 标记。</p></blockquote><p>syslogger 在接收到日志消息后，将其按照 pid 进行分组，相同的 pid 说明日志消息来源于同一进程，将其组装起来，当收到包含 is_last 标记的最后一个 chunk 后，将整条日志消息打印到日志文件。</p><h3 id="日志轮转"><a href="#日志轮转" class="headerlink" title="日志轮转"></a>日志轮转</h3><p>所谓日志轮转，指的就是不想继续写当前日志文件了，需要新找一个日志文件继续写日志。</p><p>PG 的日志轮转是一个坑非常多的地方，因为它由下面四个参数同时控制：</p><ul><li><p>log_filename ：日志文件格式，我们以其设定为 postgres_%d_%h 为例，某个月 14 号 15 点的日志文件名就是 postgres_14_15.log</p></li><li><p>log_rotation_age：如果距离当前日志文件已经超过设定的时间，那么就新开一个日志文件；</p></li><li><p>log_rotation_size：如果距离当前日志文件还没有超过 log_rotation_age 设定的时间，但是已经超过了 log_rotation_size 设定的大小，那么就新开一个日志文件；</p></li><li><p>log_truncate_on_rotation：是否在按时间轮转后做截断。即如果下一个日志文件的同名文件已经存在了，是否直接清空该文件并从头开始写；</p></li></ul><p>这几个参数的具体使用可参考 PG 官方文档。看完上面的介绍，想必大家已经精通日志参数设置了，那么接下来做几道题检验自己的学习成果。</p><p>假如，我们按照以下值设定日志相关参数</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">log_filename=<span class="string">&#x27;postgres_%d_%h.log&#x27;</span></span><br><span class="line">log_rotation_age = <span class="number">2</span>h</span><br><span class="line">log_rotation_size = <span class="number">10</span>MB</span><br><span class="line">log_truncate_on_rotation = <span class="keyword">on</span></span><br></pre></td></tr></table></figure><h4 id="问题一"><a href="#问题一" class="headerlink" title="问题一"></a>问题一</h4><p>Q：此时时间刚到 14 号下午 17 点 ，日志文件为 postgres_14_16.log，且大小为 5MB，请问接下来要写的日志文件是什么？<br>A：<strong>postgres_14_16.log</strong> 。因为此时距离 15 点仅过了 1h，没有超过 log_rotation_age；大小并没有超过 log_rotation_size ，所以并不发生轮转。</p><h4 id="问题二"><a href="#问题二" class="headerlink" title="问题二"></a>问题二</h4><p>Q：此时时间为 14 号下午 16 点 30 分 ，日志文件为 postgres_14_16.log，且大小刚刚超过 10MB 到达 10.9MB，请问接下来要写的日志文件是什么？<br>A：<strong>postgres_14_16.log</strong> 。因为 log_filename 参数的最小精度值就到小时，哪怕当前日志文件大小变成 1TB 也只会继续追加写这个文件。</p><h4 id="问题三"><a href="#问题三" class="headerlink" title="问题三"></a>问题三</h4><p>Q：此时时间刚到 14 号下午 17 点 ，日志文件为 postgres_14_16.log，且大小刚刚超过 10MB 到达 10.9MB，请问接下来要写的日志文件是什么？<br>A：<strong>postgres_14_17.log</strong> 。因为满足 log_rotation_size 的轮转条件了。</p><h4 id="问题四"><a href="#问题四" class="headerlink" title="问题四"></a>问题四</h4><p>Q：此时时间刚到 14 号下午 17 点 ，日志文件为 postgres_14_16.log，且大小刚刚超过 10MB 到达 10.9MB，但是名为postgres_14_17.log 的文件已经存在了（上个月日志创建的），那么是追加写还是覆盖写该文件？<br>A：<strong>追加写</strong>，因为这是按大小轮转。</p><h4 id="问题五"><a href="#问题五" class="headerlink" title="问题五"></a>问题五</h4><p>Q：此时时间刚到 14 号下午 18 点 ，日志文件为 postgres_14_16.log，且大小只有 0.1MB。但是名为 postgres_14_18.log 的文件已经存在了，那么是追加写还是覆盖写该文件？<br>A：<strong>覆盖写</strong>，log_rotation_age 强制触发按时间轮转逻辑。</p><blockquote><p>上面问题都能搞懂，基本也没什么坑了。</p></blockquote><h2 id="存在的问题"><a href="#存在的问题" class="headerlink" title="存在的问题"></a>存在的问题</h2><h3 id="刷盘性能"><a href="#刷盘性能" class="headerlink" title="刷盘性能"></a>刷盘性能</h3><p>当前情况下，在 log_statement 参数设置成 all 时，性能下降会非常厉害。因为 PG 的日志在刷盘时的默认策略为：每写一行就刷盘。Linux 提供的刷盘模式可分为以下三种：</p><ul><li><p>_IOFBF：全缓冲模式，缓冲区写满后才刷盘</p></li><li><p>_IOLBF：行缓冲模式，一行写满就刷盘</p></li><li><p>_IONBF：不缓冲，直接刷</p></li></ul><p>当前 PG 采用第二种行缓冲模式，优点是日志出来的即时性更高，缺点就是对性能有不小的影响。</p><h3 id="日志轮转-1"><a href="#日志轮转-1" class="headerlink" title="日志轮转"></a>日志轮转</h3><p>日志轮转的逻辑设计虽然勉强算是合理的（不会丢日志），但是理解成本很高，且有可能出现某个日志文件存在了非常非常久（上一节问题 4 的变种），一直没被删掉，需要依赖人工手动删除。</p><hr><blockquote><p>本文来源于：<a class="link"   href="https://blog.csdn.net/zxwsbg/article/details/131437441" >https://blog.csdn.net/zxwsbg/article/details/131437441<i class="fas fa-external-link-alt"></i></a>   内核大神博文哥！！！</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;PG 的日志模块是一个相对独立的模块，主要功能就是打印用户的操作日志以及一些异常报错信息。本文仅讲述 &lt;code&gt;logging_colle</summary>
      
    
    
    
    <category term="PostgreSQL" scheme="https://wuchu.site/categories/PostgreSQL/"/>
    
    
    <category term="日志" scheme="https://wuchu.site/tags/%E6%97%A5%E5%BF%97/"/>
    
  </entry>
  
  <entry>
    <title>Cgroup - Linux的IO资源隔离</title>
    <link href="https://wuchu.site/2024/10/29/cgroup_linux_io_control_group/"/>
    <id>https://wuchu.site/2024/10/29/cgroup_linux_io_control_group/</id>
    <published>2024-10-29T12:38:08.000Z</published>
    <updated>2024-11-19T11:41:38.726Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Linux的IO隔离"><a href="#Linux的IO隔离" class="headerlink" title="Linux的IO隔离"></a>Linux的IO隔离</h3><p>跟内存管理那部分复杂度类似，IO的资源隔离要讲清楚也是比较麻烦的。这部分内容都是这样，配置起来简单，但是要理解清楚确没那么简单。这次是跟Linux内核的IO实现有关系。对于IO的速度限制，实现思路跟CPU和内存都不一样。CPU是针对进程占用时间的比例限制，内存是空间限制，而当我们讨论IO资源隔离的时候，实际上有两个资源需要考虑，一个是空间，另一个是速度。对于空间来说，这个很简单，大不了分区就是了。现实手段中，分区、LVM、磁盘配额、目录配额等等，不同的分区管理方式，不同的文件系统都给出了很多不同的解决方案。所以，空间的限制实际上不是cgroup要解决的问题，那就是说，我们在这里要解决的问题是：如何进行IO数据传输的速度限制。</p><p>限速这件事情，现实中有很多模型、算法去解决这个问题。比如，如果我们想控制高速公路上的汽车单位时间通过率，就让收费站每隔固定时间周期只允许通过固定个数的车就好了。这是一种非常有效的控制手段－－漏斗算法。现实中这种算法可能在特定情况下会造成资源浪费以及用户的体验不好，于是又演化出令牌桶算法。这里我们不去详细分析这些算法，但是我们要知道，对io的限速基本是一个漏斗算法的限速效果。无论如何，这种限速都要有个“收费站”这样的设施来执行限速，那么对于Linux的IO体系来说，这个”收费站”建在哪里呢？于是我们就必须先来了解一下：</p><h3 id="Linux的IO体系"><a href="#Linux的IO体系" class="headerlink" title="Linux的IO体系"></a>Linux的IO体系</h3><p>Linux的IO体系是个层级还算清晰的结构，它基本上分成了如图示这样几层：</p><img                         lazyload                       alt="image"                       data-src="/2024/10/29/cgroup_linux_io_control_group/image1.png"                        class="" width="300" height="550" title="Linux的IO体系层次结构"                 ><p>我们可以通过追踪一个read()系统调用来一窥这些层次的结构，当read()系统调用发生，内核首先会通过汇编指令引发一个软中断，然后根据中断传入的参数查询系统调用影射表，找到read()对应的内核调用方法名，并去执行相关调用，这个系统调用名一般情况下就是sys_read()。从此，便开始了调用在内核中处理的过程的第一步：</p><ol><li>VFS层：虚拟文件系统层。由于内核要跟多种文件系统打交道，而每一种文件系统所实现的数据结构和相关方法都可能不尽相同，所以，内核抽象了这一层，专门用来适配各种文件系统，并对外提供统一操作接口。</li><li>文件系统层：不同的文件系统实现自己的操作过程，提供自己特有的特征，具体不多说了，大家愿意的话自己去看代码即可。</li><li>页缓存层：我们的老朋友了，如果不了解缓存是什么的，可以先来看看<a class="link"   href="http://pan.baidu.com/s/1dEjMnXv" >Linux内存资源<i class="fas fa-external-link-alt"></i></a>管理部分。</li><li>通用块层：由于绝大多数情况的io操作是跟块设备打交道，所以Linux在此提供了一个类似vfs层的块设备操作抽象层。下层对接各种不同属性的块设备，对上提供统一的Block IO请求标准。</li><li>IO调度层：因为绝大多数的块设备都是类似磁盘这样的设备，所以有必要根据这类设备的特点以及应用的不同特点来设置一些不同的调度算法和队列。以便在不同的应用环境下有针对性的提高磁盘的读写效率，这里就是大名鼎鼎的Linux电梯所起作用的地方。针对机械硬盘的各种调度方法就是在这实现的。</li><li>块设备驱动层：驱动层对外提供相对比较高级的设备操作接口，往往是C语言的，而下层对接设备本身的操作方法和规范。</li><li>块设备层：这层就是具体的物理设备了，定义了各种真对设备操作方法和规范。</li></ol><p>根据这几层的特点，如果你是设计者，你会在哪里实现真对块设备的限速策略呢？6、7都是相关具体设备的，如果在这个层次提供，那就不是内核全局的功能，而是某些设备自己的feture。文件系统层也可以实现，但是如果要全局实现也是不可能的，需要每种文件系统中都实现一遍，成本太高。所以，可以实现限速的地方比较合适的是VFS、缓存层、通用块层和IO调度层。而VFS和page cache这样的机制并不是面向块设备设计的，都是做其他事情用的，虽然也在io体系中，但是并不适合用来做block io的限速。所以这几层中，最适合并且成本最低就可以实现的地方就是IO调度层和通用块层。IO调度层本身已经有队列了，我们只要在队列里面实现一个限速机制即可，但是在IO调度层实现的限速会因为不同调度算法的侧重点不一样而有很多局限性，从通用块层实现的限速，原则上就可以对几乎所有的块设备进行带宽和iops的限制。截止目前（4.3.3内核），IO限速主要实现在这两层中。</p><p>根据IO调度层和通用块层的特点，这两层分别实现了两种不同策略的IO控制策略，也是目前blkio子系统提供的两种控制策略，一个是权重比例方式的控制，另一个是针对IO带宽和IOPS的控制。</p><h3 id="IO调度层"><a href="#IO调度层" class="headerlink" title="IO调度层"></a>IO调度层</h3><p>我们需要先来认识一下IO调度层。这一层要解决的核心问题是，如何提高块设备IO的整体性能？这一层也主要是针对用途最广泛的机械硬盘结构而设计的。众所周知，机械硬盘的存储介质是磁介质，并且是盘状，用磁头在盘片上移动进行数据的寻址，这类似播放一张唱片。这种结构的特点是，顺序的数据读写效率比较理想，但是如果一旦对盘片有随机读写，那么大量的时间都会浪费在磁头的移动上，这时候就会导致每次IO的响应时间很长，极大的降低IO的响应速度。磁头在盘片上寻道的操作，类似电梯调度，如果在寻道的过程中，能把路过的相关磁道的数据请求都“顺便”处理掉，那么就可以在比较小影响响应速度的前提下，提高整体IO的吞吐量。所以，一个好的IO调度算法的需求就此产生。在最开始的阶段，Linux就把这个算法命名为Linux电梯算法。目前在内核中默认开启了三种算法，其实严格算应该是两种，因为第一种叫做noop，就是空操作调度算法，也就是没有任何调度操作，并不对io请求进行排序，仅仅做适当的io合并的一个fifo队列。</p><p>目前内核中默认的调度算法应该是cfq，叫做完全公平队列调度。这个调度算法人如其名，它试图给所有进程提供一个完全公平的IO操作环境。它为每个进程创建一个同步IO调度队列，并默认以时间片和请求数限定的方式分配IO资源，以此保证每个进程的IO资源占用是公平的，cfq还实现了针对进程级别的优先级调度，这里我们不去细节解释。我们在此只需要知道，既然时间片分好了，优先级实现了，那么cfq肯定是实现进程级别的权重比例分配的最好方案。内核就是这么做的，cgroup blkio的权重比例限制就是基于cfq调度器实现的。如果你要使用权重比例分配，请先确定对应的块设备的IO调度算法是cfq。</p><p>查看和修改的方法是：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">zorro</span>@<span class="type">zorrozou</span>-<span class="type">pc0</span> ~]<span class="variable">$</span> <span class="built_in">cat</span> /sys/block/sda/queue/scheduler </span><br><span class="line">noop deadline [<span class="type">cfq</span>] </span><br><span class="line">[<span class="type">zorro</span>@<span class="type">zorrozou</span>-<span class="type">pc0</span> ~]<span class="variable">$</span> <span class="built_in">echo</span> cfq &gt; /sys/block/sda/queue/scheduler</span><br></pre></td></tr></table></figure><p>cfq是通用服务器比较好的IO调度算法选择，对桌面用户也是比较好的选择。但是对于很多IO压力较大的场景就并不是很适应，尤其是IO压力集中在某些进程上的场景。因为这种场景我们需要更多的满足某个或者某几个进程的IO响应速度，而不是让所有的进程公平的使用IO，比如数据库应用。</p><p>deadline调度（最终期限调度）就是更适应这样的场景的解决方案。deadline实现了四个队列，其中两个分别处理正常read和write，按扇区号排序，进行正常io的合并处理以提高吞吐量.因为IO请求可能会集中在某些磁盘位置，这样会导致新来的请求一直被合并，于是可能会有其他磁盘位置的io请求被饿死。于是实现了另外两个处理超时read和write的队列，按请求创建时间排序，如果有超时的请求出现，就放进这两个队列，调度算法保证超时（达到最终期限时间）的队列中的请求会优先被处理，防止请求被饿死。由于deadline的特点，无疑在这里无法区分进程，也就不能实现针对进程的io资源控制。</p><p>其实不久前，内核还是默认标配四种算法，还有一种叫做as的算法（Anticipatory scheduler），预测调度算法。一个高大上的名字，搞得我一度认为Linux内核都会算命了。结果发现，无非是在基于deadline算法做io调度的之前等一小会时间，如果这段时间内有可以合并的io请求到来，就可以合并处理，提高deadline调度的在顺序读写情况下的数据吞吐量。其实这根本不是啥预测，我觉得不如叫撞大运调度算法。估计结果是不仅没有提高吞吐量，还降低了响应速度，所以内核干脆把它从默认配置里删除了。毕竟Linux的宗旨是实用。</p><p>根据以上几种io调度算法的简单分析，我们也能对各种调度算法的使用场景有一些大致的思路了。从原理上看，cfq是一种比较通用的调度算法，是一种以进程为出发点考虑的调度算法，保证大家尽量公平。deadline是一种以提高机械硬盘吞吐量为思考出发点的调度算法，只有当有io请求达到最终期限的时候才进行调度，非常适合业务比较单一并且IO压力比较重的业务，比如数据库。而noop呢？其实如果我们把我们的思考对象拓展到固态硬盘，那么你就会发现，无论cfq还是deadline，都是针对机械硬盘的结构进行的队列算法调整，而这种调整对于固态硬盘来说，完全没有意义。对于固态硬盘来说，IO调度算法越复杂，效率就越低，因为额外要处理的逻辑越多。所以，固态硬盘这种场景下，使用noop是最好的，deadline次之，而cfq由于复杂度的原因，无疑效率最低。但是，如果你想对你的固态硬盘做基于权重比例的IO限速的话，那就没啥办法了，毕竟这时候，效率并不是你的需求，要不你限速干嘛？</p><h3 id="通用块设备层"><a href="#通用块设备层" class="headerlink" title="通用块设备层"></a>通用块设备层</h3><p>这层的作用我这里就不再复述了，本节其实主要想解释的是，既然这里实现了对blkio的带宽和iops的速度限制，那么有没有什么需要注意的地方？这自然是有的。首先我们还是要先来搞清楚IO中的几个概念。</p><p><strong>一般IO</strong>：</p><p>一个正常的文件io，需要经过vfs -&gt; buffer\page cache -&gt; 文件系统 -&gt; 通用块设备层 -&gt; IO调度层 -&gt; 块设备驱动 -&gt; 硬件设备这所有几个层次。其实这就是一般IO。当然，不同的状态可能会有变化，比如一个进程正好open并read一个已经存在于page cache中的数据。这样的事情我们排出在外不分析。那么什么是比较特别的io呢？</p><p><strong>Direct IO</strong>：</p><p>中文也可以叫直接IO操作，其特点是，VFS之后跳过buffer\page cache层，直接从文件系统层进行操作。那么就意味着，无论读还是写，都不会进行cache。我们基本上可以理解这样的io看起来效率要低很多，直接看到的速度就是设备的速度，并且缺少了cache层对数据的缓存之后，文件系统和数据块的操作效率直接暴露给了应用程序，块的大小会直接影响io速度。</p><p><strong>Sync IO</strong> &amp; <strong>write-through</strong>:</p><p>中文叫做同步IO操作，如果是写操作的话也叫write-through，这个操作往往容易跟上面的DIO搞混，因为看起来他们速度上差不多，但是是有本质区别的。这种方式写的数据要等待存储写入返回才能成功返回，所以跟DIO效率差不多，但是，写的数据仍然是要在cache中写入的，这样其他一般IO的程度仍然可以使用cache机制加速IO操作。所以，这里的sync的意思就是，在执行write操作的时候，让cache和存储上的数据一致。那么他跟一般IO其实一样，数据是要经过cache层的。</p><p><strong>write-back</strong>:</p><p>既然明白了write-thuough，那么write-back就好理解了，无非就是将目前在cache中还没写回存储的脏数据写回到存储。这个名词一般指的是一个独立的过程，这个过程不是随着应用的写而发生，这往往是内核自己找个时间来单独操作的。说白了就是，应用写文件，感觉自己很快写完了，其实内核都把数据放倒cache里了，然后内核自己找时间再去写回到存储上。实际上write-back只是在一般IO的情况下，保证数据一致性的一种机制而已。</p><p>有人将IO过程中，以是否使用缓冲（缓存）的区别，将IO分成了缓存IO（Buffered IO）和直接IO（Direct io）。其实就是名词上的不同而已。这里面的buffer的含义跟内存中buffer cache有概念上的不同。实际上这里Buffered IO的含义，相当于内存中的buffer cache+page cache，就是IO经过缓存的意思。到这我们思考一个问题，如果cgroup针对IO的资源限制实现在了通用块设备层，那么将会对哪些IO操作有影响呢？其实原则上说都有影响，因为绝大多数数据都是要经过通用块设备层写入存储的，但是对于应用程序来说感受可能不一样。在一般IO的情况下，应用程序很可能很快的就写完了数据（在数据量小于缓存空间的情况下），然后去做其他事情了。这时应用程序感受不到自己被限速了，而内核在处理write-back的阶段，由于没有相关page cache中的inode是属于那个cgroup的信息记录，所以所有的page cache的回写只能放到cgroup的root组中进行限制，而不能在其他cgroup中进行限制，因为root组的cgroup一般是不做限制的，所以就相当于目前的cgroup的blkio对buffered IO是没有限速支持的。这个功能将在使用了unified-hierarchy体系的cgroup v2中的部分文件系统（ext系列）已经得到得到支持，目前这个功能还在开发中，据说将在4.5版本的内核中正式发布。</p><p>而在Sync IO和Direct IO的情况下，由于应用程序写的数据是不经过缓存层的，所以能直接感受到速度被限制，一定要等到整个数据按限制好的速度写完或者读完，才能返回。这就是当前cgroup的blkio限制所能起作用的环境限制。了解了这个之后，我们就可以来看：</p><h3 id="blkio配置方法"><a href="#blkio配置方法" class="headerlink" title="blkio配置方法"></a>blkio配置方法</h3><h4 id="权重比例分配"><a href="#权重比例分配" class="headerlink" title="权重比例分配"></a>权重比例分配</h4><p>我们这次直接使用命令行的方式对cgroup进行操作。在我们的系统上，我们现在想创建两个cgroup组，一个叫test1，一个叫test2。我们想让这两个组的进程在对&#x2F;dev&#x2F;sdb，设备号为8:16的这个磁盘进行读写的时候按权重比例进行io资源的分配。具体配置方法如下：</p><p>首先确认系统上已经mount了相关的cgroup目录：</p><pre><code>[root@zorrozou-pc0 ~]# ls /sys/fs/cgroup/blkio/blkio.io_merged   blkio.io_service_bytes_recursive  blkio.io_wait_time   blkio.sectors    blkio.throttle.read_iops_device   blkio.weight     tasksblkio.io_merged_recursive  blkio.io_serviced     blkio.io_wait_time_recursive  blkio.sectors_recursive    blkio.throttle.write_bps_device   blkio.weight_deviceblkio.io_queued   blkio.io_serviced_recursive     blkio.leaf_weight   blkio.throttle.io_service_bytes  blkio.throttle.write_iops_device  cgroup.clone_childrenblkio.io_queued_recursive  blkio.io_service_time     blkio.leaf_weight_device   blkio.throttle.io_serviced    blkio.time      cgroup.procsblkio.io_service_bytes   blkio.io_service_time_recursive   blkio.reset_stats   blkio.throttle.read_bps_device   blkio.time_recursive      notify_on_release</code></pre><p>然后创建两个针对blkio的cgroup</p><pre><code>[root@zorrozou-pc0 ~]# mkdir /sys/fs/cgroup/blkio/test1[root@zorrozou-pc0 ~]# mkdir /sys/fs/cgroup/blkio/test2</code></pre><p>相关目录下会自动产生相关配置项：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">zorrozou</span>-<span class="type">pc0</span> ~]<span class="comment"># ls /sys/fs/cgroup/blkio/test&#123;1,2&#125;</span></span><br><span class="line">/sys/fs/cgroup/blkio/test1:</span><br><span class="line">blkio.io_merged   blkio.io_service_bytes_recursive  blkio.io_wait_time   blkio.sectors    blkio.throttle.read_iops_device   blkio.weight     tasks</span><br><span class="line">blkio.io_merged_recursive  blkio.io_serviced     blkio.io_wait_time_recursive  blkio.sectors_recursive    blkio.throttle.write_bps_device   blkio.weight_device</span><br><span class="line">blkio.io_queued   blkio.io_serviced_recursive     blkio.leaf_weight   blkio.throttle.io_service_bytes  blkio.throttle.write_iops_device  cgroup.clone_children</span><br><span class="line">blkio.io_queued_recursive  blkio.io_service_time     blkio.leaf_weight_device   blkio.throttle.io_serviced    blkio.time      cgroup.procs</span><br><span class="line">blkio.io_service_bytes   blkio.io_service_time_recursive   blkio.reset_stats   blkio.throttle.read_bps_device   blkio.time_recursive      notify_on_release</span><br><span class="line"></span><br><span class="line">/sys/fs/cgroup/blkio/test2:</span><br><span class="line">blkio.io_merged   blkio.io_service_bytes_recursive  blkio.io_wait_time   blkio.sectors    blkio.throttle.read_iops_device   blkio.weight     tasks</span><br><span class="line">blkio.io_merged_recursive  blkio.io_serviced     blkio.io_wait_time_recursive  blkio.sectors_recursive    blkio.throttle.write_bps_device   blkio.weight_device</span><br><span class="line">blkio.io_queued   blkio.io_serviced_recursive     blkio.leaf_weight   blkio.throttle.io_service_bytes  blkio.throttle.write_iops_device  cgroup.clone_children</span><br><span class="line">blkio.io_queued_recursive  blkio.io_service_time     blkio.leaf_weight_device   blkio.throttle.io_serviced    blkio.time      cgroup.procs</span><br><span class="line">blkio.io_service_bytes   blkio.io_service_time_recursive   blkio.reset_stats   blkio.throttle.read_bps_device   blkio.time_recursive      notify_on_release</span><br></pre></td></tr></table></figure><p>之后我们就可以进行限制了。针对cgroup进行权重限制的配置有<strong>blkio.weight</strong>，是单纯针对cgroup进行权重配置的，还有<strong>blkio.weight_device</strong>可以针对设备单独进行限制，我们都来试试。首先我们想设置test1和test2使用任何设备的io权重比例都是1:2：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">zorrozou</span>-<span class="type">pc0</span> <span class="type">zorro</span>]<span class="comment"># echo 100 &gt; /sys/fs/cgroup/blkio/test1/blkio.weight</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">zorrozou</span>-<span class="type">pc0</span> <span class="type">zorro</span>]<span class="comment"># echo 200 &gt; /sys/fs/cgroup/blkio/test2/blkio.weight</span></span><br></pre></td></tr></table></figure><p>注意权重设置的取值范围为：10-1000。然后我们来写一个测试脚本：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">testfile1=/home/test1</span><br><span class="line">testfile2=/home/test2</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -<span class="type">e</span> <span class="variable">$testfile1</span> ]</span><br><span class="line">then</span><br><span class="line">    <span class="built_in">rm</span> <span class="literal">-rf</span> <span class="variable">$testfile1</span></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -<span class="type">e</span> <span class="variable">$testfile2</span> ]</span><br><span class="line">then</span><br><span class="line">    <span class="built_in">rm</span> <span class="literal">-rf</span> <span class="variable">$testfile2</span></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">sync</span><br><span class="line"><span class="built_in">echo</span> <span class="number">3</span> &gt; /proc/sys/vm/drop_caches</span><br><span class="line"></span><br><span class="line">cgexec <span class="literal">-g</span> blkio:test1 dd <span class="keyword">if</span>=/dev/zero of=<span class="variable">$testfile1</span> oflag=direct bs=<span class="number">1</span>M count=<span class="number">1023</span> &amp;</span><br><span class="line"></span><br><span class="line">cgexec <span class="literal">-g</span> blkio:test2 dd <span class="keyword">if</span>=/dev/zero of=<span class="variable">$testfile2</span> oflag=direct bs=<span class="number">1</span>M count=<span class="number">1023</span> &amp;</span><br></pre></td></tr></table></figure><p>我们dd的时候使用的是direct标记，在这使用sync和不加任何标记的话都达不到效果。因为权重限制是基于cfq实现，cfq要标记进程，而buffered IO都是内核同步，无法标记进程。使用iotop查看限制效果：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">zorrozou</span>-<span class="type">pc0</span> <span class="type">zorro</span>]<span class="comment"># iotop -b -n1|grep direct</span></span><br><span class="line"> <span class="number">1519</span> be/<span class="number">4</span> root        <span class="number">0.00</span> B/s  <span class="number">110.00</span> M/s  <span class="number">0.00</span> % <span class="number">99.99</span> % dd <span class="keyword">if</span>=/dev/zero of=/home/test2 oflag=direct bs=<span class="number">1</span>M count=<span class="number">1023</span></span><br><span class="line"> <span class="number">1518</span> be/<span class="number">4</span> root        <span class="number">0.00</span> B/s   <span class="number">55.00</span> M/s  <span class="number">0.00</span> % <span class="number">99.99</span> % dd <span class="keyword">if</span>=/dev/zero of=/home/test1 oflag=direct bs=<span class="number">1</span>M count=<span class="number">1023</span></span><br></pre></td></tr></table></figure><p>却是达到了1:2比例限速的效果。此时对于磁盘读取的限制效果也一样，具体测试用例大家可以自己编写。读取的时候要注意，仍然要保证读取的文件不在page cache中，方法就是：echo 3 &gt; &#x2F;proc&#x2F;sys&#x2F;vm&#x2F;drop_caches。因为在page cache中的数据已经在内存里了，直接修改是直接改内存中的内容，只有write-back的时候才会经过cfq。</p><p>我们再来试一下针对设备的权重分配，请注意设备号的填写格式：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">zorrozou</span>-<span class="type">pc0</span> <span class="type">zorro</span>]<span class="comment"># echo &quot;8:16 400&quot; &gt; /sys/fs/cgroup/blkio/test1/blkio.weight_device </span></span><br><span class="line">[<span class="type">root</span>@<span class="type">zorrozou</span>-<span class="type">pc0</span> <span class="type">zorro</span>]<span class="comment"># echo &quot;8:16 200&quot; &gt; /sys/fs/cgroup/blkio/test2/blkio.weight_device </span></span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">zorrozou</span>-<span class="type">pc0</span> <span class="type">zorro</span>]<span class="comment"># iotop -b -n1|grep direct</span></span><br><span class="line"> <span class="number">1800</span> be/<span class="number">4</span> root        <span class="number">0.00</span> B/s  <span class="number">102.24</span> M/s  <span class="number">0.00</span> % <span class="number">99.99</span> % dd <span class="keyword">if</span>=/dev/zero of=/home/test1 oflag=direct bs=<span class="number">1</span>M count=<span class="number">1023</span></span><br><span class="line"> <span class="number">1801</span> be/<span class="number">4</span> root        <span class="number">0.00</span> B/s   <span class="number">51.12</span> M/s  <span class="number">0.00</span> % <span class="number">99.99</span> % dd <span class="keyword">if</span>=/dev/zero of=/home/test2 oflag=direct bs=<span class="number">1</span>M count=<span class="number">1023</span></span><br></pre></td></tr></table></figure><p>我们会发现，这时权重确实是按照最后一次的设置，test1和test2变成了2:1的比例，而不是1:2了。这里要说明的就是，注意blkio.weight_device的设置会覆盖blkio.weight的设置，因为前者的设置精确到了设备，Linux在这里的策略是，越精确越优先。</p><h4 id="读写带宽和iops限制"><a href="#读写带宽和iops限制" class="headerlink" title="读写带宽和iops限制"></a>读写带宽和iops限制</h4><p>针对读写带宽和iops的限制都是绝对值限制，所以我们不用两个cgroup做对比了。我们就设置test1的写带宽速度为1M&#x2F;s:</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">zorrozou</span>-<span class="type">pc0</span> <span class="type">zorro</span>]<span class="comment"># echo &quot;8:16  1048576&quot; &gt; /sys/fs/cgroup/blkio/test1/blkio.throttle.write_bps_device</span></span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">zorrozou</span>-<span class="type">pc0</span> <span class="type">zorro</span>]<span class="comment"># sync</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">zorrozou</span>-<span class="type">pc0</span> <span class="type">zorro</span>]<span class="comment"># echo 3 &gt; /proc/sys/vm/drop_caches</span></span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">zorrozou</span>-<span class="type">pc0</span> <span class="type">zorro</span>]<span class="comment"># cgexec -g blkio:test1 dd if=/dev/zero of=/home/test oflag=direct count=1024 bs=1M</span></span><br><span class="line">^C21+<span class="number">0</span> records <span class="keyword">in</span></span><br><span class="line"><span class="number">21</span>+<span class="number">0</span> records out</span><br><span class="line"><span class="number">22020096</span> bytes (<span class="number">22</span> MB) copied, <span class="number">21.012</span> s, <span class="number">1.0</span> MB/s</span><br></pre></td></tr></table></figure><p>此时不用dd命令执行完，稍等一下中断执行就能看到速度确实限制在了1M／s。写的同时，iostat显示为：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">zorro</span>@<span class="type">zorrozou</span>-<span class="type">pc0</span> ~]<span class="variable">$</span> iostat <span class="literal">-x</span> <span class="number">1</span></span><br><span class="line">Linux <span class="number">4.3</span>.<span class="number">3</span><span class="literal">-2-ARCH</span> (zorrozou<span class="literal">-pc0</span>.tencent.com) <span class="number">2016</span>年<span class="number">01</span>月<span class="number">15</span>日 _x86_64_(<span class="number">4</span> CPU)</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">avg<span class="literal">-cpu</span>:  %user   %nice %system %iowait  %steal   %idle</span><br><span class="line">       <span class="number">0.50</span>    <span class="number">0.00</span>    <span class="number">0.50</span>   <span class="number">25.13</span>    <span class="number">0.00</span>   <span class="number">73.87</span></span><br><span class="line"></span><br><span class="line">Device:         rrqm/s   wrqm/s     <span class="built_in">r</span>/s     w/s    rkB/s    wkB/s avgrq<span class="literal">-sz</span> avgqu<span class="literal">-sz</span>   await r_await w_await  svctm  %util</span><br><span class="line">sda               <span class="number">0.00</span>     <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>     <span class="number">0.00</span>     <span class="number">0.00</span>     <span class="number">0.00</span>     <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>   <span class="number">0.00</span>   <span class="number">0.00</span></span><br><span class="line">sdb               <span class="number">0.00</span>     <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">1.00</span>     <span class="number">0.00</span>  <span class="number">1024.00</span>  <span class="number">2048.00</span>     <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>   <span class="number">0.00</span>   <span class="number">0.00</span></span><br><span class="line">dm<span class="literal">-0</span>              <span class="number">0.00</span>     <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">1.00</span>     <span class="number">0.00</span>  <span class="number">1024.00</span>  <span class="number">2048.00</span>     <span class="number">1.00</span> <span class="number">1000.00</span>    <span class="number">0.00</span> <span class="number">1000.00</span> <span class="number">1000.00</span> <span class="number">100.00</span></span><br><span class="line">dm<span class="literal">-1</span>              <span class="number">0.00</span>     <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>     <span class="number">0.00</span>     <span class="number">0.00</span>     <span class="number">0.00</span>     <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>   <span class="number">0.00</span>   <span class="number">0.00</span></span><br><span class="line">dm<span class="literal">-2</span>              <span class="number">0.00</span>     <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>     <span class="number">0.00</span>     <span class="number">0.00</span>     <span class="number">0.00</span>     <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>   <span class="number">0.00</span>   <span class="number">0.00</span></span><br><span class="line">dm<span class="literal">-3</span>              <span class="number">0.00</span>     <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>     <span class="number">0.00</span>     <span class="number">0.00</span>     <span class="number">0.00</span>     <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>   <span class="number">0.00</span>   <span class="number">0.00</span></span><br><span class="line"></span><br><span class="line">avg<span class="literal">-cpu</span>:  %user   %nice %system %iowait  %steal   %idle</span><br><span class="line">        <span class="number">1.25</span>    <span class="number">0.00</span>    <span class="number">0.50</span>   <span class="number">24.81</span>    <span class="number">0.00</span>   <span class="number">73.43</span></span><br><span class="line"></span><br><span class="line">Device:         rrqm/s   wrqm/s     <span class="built_in">r</span>/s     w/s    rkB/s    wkB/s avgrq<span class="literal">-sz</span> avgqu<span class="literal">-sz</span>   await r_await w_await  svctm  %util</span><br><span class="line">sda               <span class="number">0.00</span>     <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>     <span class="number">0.00</span>     <span class="number">0.00</span>     <span class="number">0.00</span>     <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>   <span class="number">0.00</span>   <span class="number">0.00</span></span><br><span class="line">sdb               <span class="number">0.00</span>     <span class="number">5.00</span>    <span class="number">0.00</span>    <span class="number">6.00</span>     <span class="number">0.00</span>  <span class="number">1060.00</span>   <span class="number">353.33</span>     <span class="number">0.06</span>    <span class="number">9.33</span>    <span class="number">0.00</span>    <span class="number">9.33</span>   <span class="number">9.50</span>   <span class="number">5.70</span></span><br><span class="line">dm<span class="literal">-0</span>              <span class="number">0.00</span>     <span class="number">0.00</span>    <span class="number">0.00</span>   <span class="number">10.00</span>     <span class="number">0.00</span>  <span class="number">1060.00</span>   <span class="number">212.00</span>     <span class="number">1.08</span>  <span class="number">109.00</span>    <span class="number">0.00</span>  <span class="number">109.00</span> <span class="number">100.00</span> <span class="number">100.00</span></span><br><span class="line">dm<span class="literal">-1</span>              <span class="number">0.00</span>     <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>     <span class="number">0.00</span>     <span class="number">0.00</span>     <span class="number">0.00</span>     <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>   <span class="number">0.00</span>   <span class="number">0.00</span></span><br><span class="line">dm<span class="literal">-2</span>              <span class="number">0.00</span>     <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>     <span class="number">0.00</span>     <span class="number">0.00</span>     <span class="number">0.00</span>     <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>   <span class="number">0.00</span>   <span class="number">0.00</span></span><br><span class="line">dm<span class="literal">-3</span>              <span class="number">0.00</span>     <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>     <span class="number">0.00</span>     <span class="number">0.00</span>     <span class="number">0.00</span>     <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>   <span class="number">0.00</span>   <span class="number">0.00</span></span><br><span class="line"></span><br><span class="line">avg<span class="literal">-cpu</span>:  %user   %nice %system %iowait  %steal   %idle</span><br><span class="line">       <span class="number">1.25</span>    <span class="number">0.00</span>    <span class="number">1.00</span>   <span class="number">24.44</span>    <span class="number">0.00</span>   <span class="number">73.32</span></span><br><span class="line"></span><br><span class="line">Device:         rrqm/s   wrqm/s     <span class="built_in">r</span>/s     w/s    rkB/s    wkB/s avgrq<span class="literal">-sz</span> avgqu<span class="literal">-sz</span>   await r_await w_await  svctm  %util</span><br><span class="line">sda               <span class="number">0.00</span>     <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>     <span class="number">0.00</span>     <span class="number">0.00</span>     <span class="number">0.00</span>     <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>   <span class="number">0.00</span>   <span class="number">0.00</span></span><br><span class="line">sdb               <span class="number">0.00</span>     <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">1.00</span>     <span class="number">0.00</span>  <span class="number">1024.00</span>  <span class="number">2048.00</span>     <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>   <span class="number">0.00</span>   <span class="number">0.00</span></span><br><span class="line">dm<span class="literal">-0</span>              <span class="number">0.00</span>     <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">1.00</span>     <span class="number">0.00</span>  <span class="number">1024.00</span>  <span class="number">2048.00</span>     <span class="number">1.00</span>  <span class="number">993.00</span>    <span class="number">0.00</span>  <span class="number">993.00</span> <span class="number">1000.00</span> <span class="number">100.00</span></span><br><span class="line">dm<span class="literal">-1</span>              <span class="number">0.00</span>     <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>     <span class="number">0.00</span>     <span class="number">0.00</span>     <span class="number">0.00</span>     <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>   <span class="number">0.00</span>   <span class="number">0.00</span></span><br><span class="line">dm<span class="literal">-2</span>              <span class="number">0.00</span>     <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>     <span class="number">0.00</span>     <span class="number">0.00</span>     <span class="number">0.00</span>     <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>   <span class="number">0.00</span>   <span class="number">0.00</span></span><br><span class="line">dm<span class="literal">-3</span>              <span class="number">0.00</span>     <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>     <span class="number">0.00</span>     <span class="number">0.00</span>     <span class="number">0.00</span>     <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>   <span class="number">0.00</span>   <span class="number">0.00</span></span><br><span class="line"></span><br><span class="line">avg<span class="literal">-cpu</span>:  %user   %nice %system %iowait  %steal   %idle</span><br><span class="line">       <span class="number">1.50</span>    <span class="number">0.25</span>    <span class="number">0.75</span>   <span class="number">24.50</span>    <span class="number">0.00</span>   <span class="number">73.00</span></span><br><span class="line"></span><br><span class="line">Device:         rrqm/s   wrqm/s     <span class="built_in">r</span>/s     w/s    rkB/s    wkB/s avgrq<span class="literal">-sz</span> avgqu<span class="literal">-sz</span>   await r_await w_await  svctm  %util</span><br><span class="line">sda               <span class="number">0.00</span>     <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>     <span class="number">0.00</span>     <span class="number">0.00</span>     <span class="number">0.00</span>     <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>   <span class="number">0.00</span>   <span class="number">0.00</span></span><br><span class="line">sdb               <span class="number">0.00</span>     <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">1.00</span>     <span class="number">0.00</span>  <span class="number">1024.00</span>  <span class="number">2048.00</span>     <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>   <span class="number">0.00</span>   <span class="number">0.00</span></span><br><span class="line">dm<span class="literal">-0</span>              <span class="number">0.00</span>     <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">1.00</span>     <span class="number">0.00</span>  <span class="number">1024.00</span>  <span class="number">2048.00</span>     <span class="number">1.00</span> <span class="number">1000.00</span>    <span class="number">0.00</span> <span class="number">1000.00</span> <span class="number">1000.00</span> <span class="number">100.00</span></span><br><span class="line">dm<span class="literal">-1</span>              <span class="number">0.00</span>     <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>     <span class="number">0.00</span>     <span class="number">0.00</span>     <span class="number">0.00</span>     <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>   <span class="number">0.00</span>   <span class="number">0.00</span></span><br><span class="line">dm<span class="literal">-2</span>              <span class="number">0.00</span>     <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>     <span class="number">0.00</span>     <span class="number">0.00</span>     <span class="number">0.00</span>     <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>   <span class="number">0.00</span>   <span class="number">0.00</span></span><br><span class="line">dm<span class="literal">-3</span>              <span class="number">0.00</span>     <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>     <span class="number">0.00</span>     <span class="number">0.00</span>     <span class="number">0.00</span>     <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>   <span class="number">0.00</span>   <span class="number">0.00</span></span><br></pre></td></tr></table></figure><p>可以看到写的速度确实为1024wkB&#x2F;s左右。我们再来试试读，先创建一个大文件，此处没有限速：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">zorrozou</span>-<span class="type">pc0</span> <span class="type">zorro</span>]<span class="comment"># dd if=/dev/zero of=/home/test oflag=direct count=1024 bs=1M</span></span><br><span class="line"><span class="number">1024</span>+<span class="number">0</span> records <span class="keyword">in</span></span><br><span class="line"><span class="number">1024</span>+<span class="number">0</span> records out</span><br><span class="line"><span class="number">1073741824</span> bytes (<span class="number">1.1</span> GB) copied, <span class="number">10.213</span> s, <span class="number">105</span> MB/s</span><br></pre></td></tr></table></figure><p>然后进行限速设置并确认：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">zorrozou</span>-<span class="type">pc0</span> <span class="type">zorro</span>]<span class="comment"># sync</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">zorrozou</span>-<span class="type">pc0</span> <span class="type">zorro</span>]<span class="comment"># echo 3 &gt; /proc/sys/vm/drop_caches </span></span><br><span class="line">[<span class="type">root</span>@<span class="type">zorrozou</span>-<span class="type">pc0</span> <span class="type">zorro</span>]<span class="comment"># echo &quot;8:16  1048576&quot; &gt; /sys/fs/cgroup/blkio/test1/blkio.throttle.read_bps_device</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">zorrozou</span>-<span class="type">pc0</span> <span class="type">zorro</span>]<span class="comment"># cgexec -g blkio:test1 dd if=/home/test of=/dev/null iflag=direct count=1024 bs=1M</span></span><br><span class="line">^C15+<span class="number">0</span> records <span class="keyword">in</span></span><br><span class="line"><span class="number">14</span>+<span class="number">0</span> records out</span><br><span class="line"><span class="number">14680064</span> bytes (<span class="number">15</span> MB) copied, <span class="number">15.0032</span> s, <span class="number">978</span> kB/s</span><br></pre></td></tr></table></figure><p>iostat结果：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">avg<span class="literal">-cpu</span>:  %user   %nice %system %iowait  %steal   %idle</span><br><span class="line">       <span class="number">0.75</span>    <span class="number">0.00</span>    <span class="number">0.75</span>   <span class="number">24.63</span>    <span class="number">0.00</span>   <span class="number">73.88</span></span><br><span class="line"></span><br><span class="line">Device:         rrqm/s   wrqm/s     <span class="built_in">r</span>/s     w/s    rkB/s    wkB/s avgrq<span class="literal">-sz</span> avgqu<span class="literal">-sz</span>   await r_await w_await  svctm  %util</span><br><span class="line">sda               <span class="number">0.00</span>     <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>     <span class="number">0.00</span>     <span class="number">0.00</span>     <span class="number">0.00</span>     <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>   <span class="number">0.00</span>   <span class="number">0.00</span></span><br><span class="line">sdb               <span class="number">0.00</span>     <span class="number">0.00</span>    <span class="number">2.00</span>    <span class="number">0.00</span>  <span class="number">1024.00</span>     <span class="number">0.00</span>  <span class="number">1024.00</span>     <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>   <span class="number">0.00</span>   <span class="number">0.00</span></span><br><span class="line">dm<span class="literal">-0</span>              <span class="number">0.00</span>     <span class="number">0.00</span>    <span class="number">2.00</span>    <span class="number">0.00</span>  <span class="number">1024.00</span>     <span class="number">0.00</span>  <span class="number">1024.00</span>     <span class="number">1.65</span>  <span class="number">825.00</span>  <span class="number">825.00</span>    <span class="number">0.00</span> <span class="number">500.00</span> <span class="number">100.00</span></span><br><span class="line">dm<span class="literal">-1</span>              <span class="number">0.00</span>     <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>     <span class="number">0.00</span>     <span class="number">0.00</span>     <span class="number">0.00</span>     <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>   <span class="number">0.00</span>   <span class="number">0.00</span></span><br><span class="line">dm<span class="literal">-2</span>              <span class="number">0.00</span>     <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>     <span class="number">0.00</span>     <span class="number">0.00</span>     <span class="number">0.00</span>     <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>   <span class="number">0.00</span>   <span class="number">0.00</span></span><br><span class="line">dm<span class="literal">-3</span>              <span class="number">0.00</span>     <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>     <span class="number">0.00</span>     <span class="number">0.00</span>     <span class="number">0.00</span>     <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>   <span class="number">0.00</span>   <span class="number">0.00</span></span><br><span class="line"></span><br><span class="line">avg<span class="literal">-cpu</span>:  %user   %nice %system %iowait  %steal   %idle</span><br><span class="line">       <span class="number">0.75</span>    <span class="number">0.00</span>    <span class="number">0.50</span>   <span class="number">24.87</span>    <span class="number">0.00</span>   <span class="number">73.87</span></span><br><span class="line"></span><br><span class="line">Device:         rrqm/s   wrqm/s     <span class="built_in">r</span>/s     w/s    rkB/s    wkB/s avgrq<span class="literal">-sz</span> avgqu<span class="literal">-sz</span>   await r_await w_await  svctm  %util</span><br><span class="line">sda               <span class="number">0.00</span>     <span class="number">2.00</span>    <span class="number">0.00</span>    <span class="number">2.00</span>     <span class="number">0.00</span>    <span class="number">16.00</span>    <span class="number">16.00</span>     <span class="number">0.02</span>   <span class="number">10.00</span>    <span class="number">0.00</span>   <span class="number">10.00</span>  <span class="number">10.00</span>   <span class="number">2.00</span></span><br><span class="line">sdb               <span class="number">0.00</span>     <span class="number">0.00</span>    <span class="number">2.00</span>    <span class="number">0.00</span>  <span class="number">1024.00</span>     <span class="number">0.00</span>  <span class="number">1024.00</span>     <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>   <span class="number">0.00</span>   <span class="number">0.00</span></span><br><span class="line">dm<span class="literal">-0</span>              <span class="number">0.00</span>     <span class="number">0.00</span>    <span class="number">2.00</span>    <span class="number">0.00</span>  <span class="number">1024.00</span>     <span class="number">0.00</span>  <span class="number">1024.00</span>     <span class="number">1.65</span>  <span class="number">825.00</span>  <span class="number">825.00</span>    <span class="number">0.00</span> <span class="number">500.00</span> <span class="number">100.00</span></span><br><span class="line">dm<span class="literal">-1</span>              <span class="number">0.00</span>     <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>     <span class="number">0.00</span>     <span class="number">0.00</span>     <span class="number">0.00</span>     <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>   <span class="number">0.00</span>   <span class="number">0.00</span></span><br><span class="line">dm<span class="literal">-2</span>              <span class="number">0.00</span>     <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>     <span class="number">0.00</span>     <span class="number">0.00</span>     <span class="number">0.00</span>     <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>   <span class="number">0.00</span>   <span class="number">0.00</span></span><br><span class="line">dm<span class="literal">-3</span>              <span class="number">0.00</span>     <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>     <span class="number">0.00</span>     <span class="number">0.00</span>     <span class="number">0.00</span>     <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>   <span class="number">0.00</span>   <span class="number">0.00</span></span><br></pre></td></tr></table></figure><p>最后是iops的限制，我就不废话了，直接上命令执行结果：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">zorrozou</span>-<span class="type">pc0</span> <span class="type">zorro</span>]<span class="comment"># echo &quot;8:16  20&quot; &gt; /sys/fs/cgroup/blkio/test1/blkio.throttle.write_iops_device </span></span><br><span class="line">[<span class="type">root</span>@<span class="type">zorrozou</span>-<span class="type">pc0</span> <span class="type">zorro</span>]<span class="comment"># rm /home/test </span></span><br><span class="line">[<span class="type">root</span>@<span class="type">zorrozou</span>-<span class="type">pc0</span> <span class="type">zorro</span>]<span class="comment"># sync</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">zorrozou</span>-<span class="type">pc0</span> <span class="type">zorro</span>]<span class="comment"># echo 3 &gt; /proc/sys/vm/drop_caches</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">zorrozou</span>-<span class="type">pc0</span> <span class="type">zorro</span>]<span class="comment"># cgexec -g blkio:test1 dd if=/dev/zero of=/home/test oflag=direct count=1024 bs=1M</span></span><br><span class="line">^C121+<span class="number">0</span> records <span class="keyword">in</span></span><br><span class="line"><span class="number">121</span>+<span class="number">0</span> records out</span><br><span class="line"><span class="number">126877696</span> bytes (<span class="number">127</span> MB) copied, <span class="number">12.0576</span> s, <span class="number">10.5</span> MB/s</span><br><span class="line"></span><br><span class="line">[<span class="type">zorro</span>@<span class="type">zorrozou</span>-<span class="type">pc0</span> ~]<span class="variable">$</span> iostat <span class="literal">-x</span> <span class="number">1</span></span><br><span class="line">avg<span class="literal">-cpu</span>:  %user   %nice %system %iowait  %steal   %idle</span><br><span class="line">       <span class="number">0.50</span>    <span class="number">0.00</span>    <span class="number">0.25</span>   <span class="number">24.81</span>    <span class="number">0.00</span>   <span class="number">74.44</span></span><br><span class="line"></span><br><span class="line">Device:         rrqm/s   wrqm/s     <span class="built_in">r</span>/s     w/s    rkB/s    wkB/s avgrq<span class="literal">-sz</span> avgqu<span class="literal">-sz</span>   await r_await w_await  svctm  %util</span><br><span class="line">sda               <span class="number">0.00</span>     <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>     <span class="number">0.00</span>     <span class="number">0.00</span>     <span class="number">0.00</span>     <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>   <span class="number">0.00</span>   <span class="number">0.00</span></span><br><span class="line">sdb               <span class="number">0.00</span>     <span class="number">0.00</span>    <span class="number">0.00</span>   <span class="number">20.00</span>     <span class="number">0.00</span> <span class="number">10240.00</span>  <span class="number">1024.00</span>     <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>   <span class="number">0.00</span>   <span class="number">0.00</span></span><br><span class="line">dm<span class="literal">-0</span>              <span class="number">0.00</span>     <span class="number">0.00</span>    <span class="number">0.00</span>   <span class="number">20.00</span>     <span class="number">0.00</span> <span class="number">10240.00</span>  <span class="number">1024.00</span>     <span class="number">2.00</span>  <span class="number">100.00</span>    <span class="number">0.00</span>  <span class="number">100.00</span>  <span class="number">50.00</span> <span class="number">100.00</span></span><br><span class="line">dm<span class="literal">-1</span>              <span class="number">0.00</span>     <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>     <span class="number">0.00</span>     <span class="number">0.00</span>     <span class="number">0.00</span>     <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>   <span class="number">0.00</span>   <span class="number">0.00</span></span><br><span class="line">dm<span class="literal">-2</span>              <span class="number">0.00</span>     <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>     <span class="number">0.00</span>     <span class="number">0.00</span>     <span class="number">0.00</span>     <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>   <span class="number">0.00</span>   <span class="number">0.00</span></span><br><span class="line">dm<span class="literal">-3</span>              <span class="number">0.00</span>     <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>     <span class="number">0.00</span>     <span class="number">0.00</span>     <span class="number">0.00</span>     <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>   <span class="number">0.00</span>   <span class="number">0.00</span></span><br><span class="line"></span><br><span class="line">avg<span class="literal">-cpu</span>:  %user   %nice %system %iowait  %steal   %idle</span><br><span class="line">       <span class="number">0.75</span>    <span class="number">0.00</span>    <span class="number">0.25</span>   <span class="number">24.31</span>    <span class="number">0.00</span>   <span class="number">74.69</span></span><br><span class="line"></span><br><span class="line">Device:         rrqm/s   wrqm/s     <span class="built_in">r</span>/s     w/s    rkB/s    wkB/s avgrq<span class="literal">-sz</span> avgqu<span class="literal">-sz</span>   await r_await w_await  svctm  %util</span><br><span class="line">sda               <span class="number">0.00</span>     <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>     <span class="number">0.00</span>     <span class="number">0.00</span>     <span class="number">0.00</span>     <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>   <span class="number">0.00</span>   <span class="number">0.00</span></span><br><span class="line">sdb               <span class="number">0.00</span>     <span class="number">0.00</span>    <span class="number">0.00</span>   <span class="number">20.00</span>     <span class="number">0.00</span> <span class="number">10240.00</span>  <span class="number">1024.00</span>     <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>   <span class="number">0.00</span>   <span class="number">0.00</span></span><br><span class="line">dm<span class="literal">-0</span>              <span class="number">0.00</span>     <span class="number">0.00</span>    <span class="number">0.00</span>   <span class="number">20.00</span>     <span class="number">0.00</span> <span class="number">10240.00</span>  <span class="number">1024.00</span>     <span class="number">2.00</span>  <span class="number">100.00</span>    <span class="number">0.00</span>  <span class="number">100.00</span>  <span class="number">50.00</span> <span class="number">100.00</span></span><br><span class="line">dm<span class="literal">-1</span>              <span class="number">0.00</span>     <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>     <span class="number">0.00</span>     <span class="number">0.00</span>     <span class="number">0.00</span>     <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>   <span class="number">0.00</span>   <span class="number">0.00</span></span><br><span class="line">dm<span class="literal">-2</span>              <span class="number">0.00</span>     <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>     <span class="number">0.00</span>     <span class="number">0.00</span>     <span class="number">0.00</span>     <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>   <span class="number">0.00</span>   <span class="number">0.00</span></span><br><span class="line">dm<span class="literal">-3</span>              <span class="number">0.00</span>     <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>     <span class="number">0.00</span>     <span class="number">0.00</span>     <span class="number">0.00</span>     <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>   <span class="number">0.00</span>   <span class="number">0.00</span></span><br></pre></td></tr></table></figure><p>iops的读限制我就不在废话了，大家可以自己做实验测试一下。</p><h3 id="其他相关文件"><a href="#其他相关文件" class="headerlink" title="其他相关文件"></a>其他相关文件</h3><h4 id="针对权重比例限制的相关文件"><a href="#针对权重比例限制的相关文件" class="headerlink" title="针对权重比例限制的相关文件"></a>针对权重比例限制的相关文件</h4><p><strong>blkio.leaf_weight[_device]</strong></p><p>其意义等同于blkio.weight[_device]，主要表示当本cgroup中有子cgroup的时候，本cgroup的进程和子cgroup中的进程所分配的资源比例是怎么样的。举个例子说吧，假设有一组cgroups的关系是这样的：</p><pre><code>          root       /    |   \      A     B    leaf     400   200   200</code></pre><p>leaf就表示root组下的进程所占io资源的比例。<br>此时A组中的进程可以占用的比例为：400&#x2F;（400+200+200） ＊ 100% ＝ 50%<br>B为：200&#x2F;（400+200+200） ＊ 100% ＝ 25%<br>而root下的进程为：200&#x2F;（400+200+200） ＊ 100% ＝ 25%</p><p><strong>blkio.time</strong></p><p>统计相关设备的分配给本组的io处理时间，单位为ms。权重就是依据此时间比例进行分配的。</p><p><strong>blkio.sectors</strong></p><p>统计本cgroup对设备的读写扇区个数。</p><p><strong>blkio.io_service_bytes</strong></p><p>统计本cgroup对设备的读写字节个数。</p><p><strong>blkio.io_serviced</strong></p><p>统计本cgroup对设备的读写操作个数。</p><p><strong>blkio.io_service_time</strong></p><p>统计本cgroup对设备的各种操作时间。时间单位是ns。</p><p><strong>blkio.io_wait_time</strong></p><p>统计本cgroup对设备的各种操作的等待时间。时间单位是ns。</p><p><strong>blkio.io_merged</strong></p><p>统计本cgroup对设备的各种操作的合并处理次数。</p><p><strong>blkio.io_queued</strong></p><p>统计本cgroup对设备的各种操作的当前正在排队的请求个数。</p><p><strong>blkio.*_recursive</strong></p><p>这一堆文件是相对应的不带_recursive的文件的递归显示版本，所谓递归的意思就是，它会显示出包括本cgroup在内的衍生cgroup的所有信息的总和。</p><h4 id="针对带宽和iops限制的相关文件"><a href="#针对带宽和iops限制的相关文件" class="headerlink" title="针对带宽和iops限制的相关文件"></a>针对带宽和iops限制的相关文件</h4><p><strong>blkio.throttle.io_serviced</strong></p><p>统计本cgroup对设备的读写操作个数。</p><p><strong>blkio.throttle.io_service_bytes</strong></p><p>统计本cgroup对设备的读写字节个数。</p><p><strong>blkio.reset_stats</strong></p><p>对本文件写入一个int可以对以上所有文件的值置零，重新开始累计。</p><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>其实一直纠结要不要写这部分IO隔离的文档，因为看上去意义不大。一则因为目前IO隔离似乎工作场景里用的不多，二则因为目前内核中这部分代码还在进行较大变化的调整，还要继续加入其它功能。从内核Linux 3.16版本之后，cgroup调整方向，开始了基于unified hierarchy架构的cgroup v2。IO部分在write-back部分进行了较大调整，加入了对buffered IO的资源限制。我们这次系统环境为ArchLinux，内核版本为Linux 4.3.3，虽然环境中的unified hierarchy的开发版本功能已经部分支持了，但是思考再三还是暂时不加入到此文档中。新架构的cgoup v2预计会跟随Linux 4.5一起推出，到时候我们再做详细分析好了。</p><p>附送一张更详细的Linux 4.0 IO协议栈框架图:</p><img                         lazyload                       alt="image"                       data-src="https://www.thomas-krenn.com/de/wikiDE/images/b/ba/Linux-storage-stack-diagram_v4.0.png"                        class="" width="700" height="1000" title="vi-vim-cheat-sheet"                 ><hr><blockquote><p>文章来源于：<a class="link"   href="https://github.com/zorrozou" >https://github.com/zorrozou<i class="fas fa-external-link-alt"></i></a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Linux的IO隔离&quot;&gt;&lt;a href=&quot;#Linux的IO隔离&quot; class=&quot;headerlink&quot; title=&quot;Linux的IO隔离&quot;&gt;&lt;/a&gt;Linux的IO隔离&lt;/h3&gt;&lt;p&gt;跟内存管理那部分复杂度类似，IO的资源隔离要讲清楚也是比较麻烦的。这部分内容</summary>
      
    
    
    
    <category term="Linux" scheme="https://wuchu.site/categories/Linux/"/>
    
    
    <category term="资源隔离" scheme="https://wuchu.site/tags/%E8%B5%84%E6%BA%90%E9%9A%94%E7%A6%BB/"/>
    
  </entry>
  
  <entry>
    <title>Cgroup - 从CPU资源隔离说起</title>
    <link href="https://wuchu.site/2024/10/29/cgroup_linux_cpu_control_group/"/>
    <id>https://wuchu.site/2024/10/29/cgroup_linux_cpu_control_group/</id>
    <published>2024-10-29T12:38:08.000Z</published>
    <updated>2024-11-19T11:41:38.725Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是Cgroup？"><a href="#什么是Cgroup？" class="headerlink" title="什么是Cgroup？"></a>什么是Cgroup？</h3><p>【引自<a class="link"   href="https://zh.wikipedia.org/wiki/Cgroups" >维基百科:cgroup<i class="fas fa-external-link-alt"></i></a>  】cgroups，其名称源自控制组群（control groups）的简写，是Linux内核的一个功能，用来限制，控制与分离一个进程组群的资源（如CPU、内存、磁盘输入输出等）</p><p>引用官方说法总是那么冰冷的让人不好理解，所以我还是稍微解释一下：</p><p>一个正在运行着服务的计算机系统，跟我们高中上课的情景还是很相似的。如果把系统中的每个进程理解为一个同学的话，那么班主任就是操作系统的核心（kernel），负责管理班里的同学。而cgroup，就是班主任控制学生行为的一种手段，所以，它起名叫control groups。</p><p>既然是一种控制手段，那么cgroup能控制什么呢？当然是资源啦！对于计算机来说，资源大概可以分成以下几个部分：</p><ul><li>计算资源</li><li>内存资源</li><li>io资源</li><li>网络资源</li></ul><p>这就是我们常说的内核四大子系统。当我们学习内核的时候，我们也基本上是围绕这四大子系统进行研究。<br>我们今天要讨论的，主要是cgroup是如何对系统中的CPU资源进行隔离和分配的。其他资源的控制，我们以后有空再说喽。</p><h3 id="如何看待CPU资源？"><a href="#如何看待CPU资源？" class="headerlink" title="如何看待CPU资源？"></a>如何看待CPU资源？</h3><p>由于进程和线程在Linux的CPU调度看来没啥区别，所以本文后续都会用<strong>进程</strong>这个名词来代表内核的调度对象，一般来讲也包括线程</p><p>如果要分配资源，我们必须先搞清楚这个资源是如何存在的，或者说是如何组织的。我想CPU大家都不陌生，我们都在系统中用过各种工具查看过CPU的使用率，比如说以下这个命令和它的输出：</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[zorro@zorrozou-pc0 ~]$ mpstat -P <span class="keyword">ALL</span> <span class="number">1</span> <span class="number">1</span></span><br><span class="line">Linux <span class="number">4.2</span><span class="number">.5</span><span class="number">-1</span>-ARCH (zorrozou-pc0) <span class="number">2015</span>年<span class="number">12</span>月<span class="number">22</span>日 _x86_64_     (<span class="number">4</span> CPU)mt</span><br><span class="line"></span><br><span class="line"><span class="number">16</span>时<span class="number">01</span>分<span class="number">08</span>秒  CPU    %usr   %nice    %sys %iowait    %irq   %soft  %steal  %guest  %gnice   %idle</span><br><span class="line"><span class="number">16</span>时<span class="number">01</span>分<span class="number">09</span>秒  <span class="keyword">all</span>    <span class="number">0.25</span>    <span class="number">0.00</span>    <span class="number">0.25</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>   <span class="number">99.50</span></span><br><span class="line"><span class="number">16</span>时<span class="number">01</span>分<span class="number">09</span>秒    <span class="number">0</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>  <span class="number">100.00</span></span><br><span class="line"><span class="number">16</span>时<span class="number">01</span>分<span class="number">09</span>秒    <span class="number">1</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>  <span class="number">100.00</span></span><br><span class="line"><span class="number">16</span>时<span class="number">01</span>分<span class="number">09</span>秒    <span class="number">2</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>  <span class="number">100.00</span></span><br><span class="line"><span class="number">16</span>时<span class="number">01</span>分<span class="number">09</span>秒    <span class="number">3</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">1.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>   <span class="number">99.00</span></span><br><span class="line"></span><br><span class="line">Average:     CPU    %usr   %nice    %sys %iowait    %irq   %soft  %steal  %guest  %gnice   %idle</span><br><span class="line">Average:     <span class="keyword">all</span>    <span class="number">0.25</span>    <span class="number">0.00</span>    <span class="number">0.25</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>   <span class="number">99.50</span></span><br><span class="line">Average:       <span class="number">0</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>  <span class="number">100.00</span></span><br><span class="line">Average:       <span class="number">1</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>  <span class="number">100.00</span></span><br><span class="line">Average:       <span class="number">2</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>  <span class="number">100.00</span></span><br><span class="line">Average:       <span class="number">3</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">1.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>   <span class="number">99.00</span></span><br></pre></td></tr></table></figure><p>显示的内容具体什么意思，希望大家都能了解，我就不在这细解释了。根据显示内容我们知道，这个计算机有4个cpu核心，目前的cpu利用率几乎是0，就是说系统整体比较闲。</p><p>从这个例子大概可以看出，我们对cpu资源的评估一般有两个观察角度：</p><ul><li>核心个数</li><li>百分比</li></ul><p>目前的计算机基本都是多核甚至多cpu系统，一个服务器上存在几个到几十个cpu核心的情况都很常见。所以，从这个角度看，cgroup应该提供一种手段，可以给进程们指定它们可以占用的cpu核心，以此来做到cpu计算资源的隔离。<br>百分比这个概念我们需要多解释一下：这个百分比究竟是怎么来的呢？难道每个cpu核心的计算能力就像一个带刻度表的水杯一样？一个进程要占用就会占用到它的一定刻度么？</p><p>当然不是啦！这个cpu的百分比是按时间比率计算的。</p><p>基本思路是：一个CPU一般就只有两种状态，要么被占用，要么不被占用。当有多个进程要占用cpu的时候，那么操作系统在一个cpu核心上是进行分时处理的。比如说，我们把一秒钟分成1000份，那么每一份就是1毫秒，假设现在有5个进程都要用cpu，那么我们就让它们5个轮着使用，比如一人一毫秒，那么1秒过后，每个进程只占用了这个CPU的200ms，使用率为20%。整体cpu使用比率为100%。<br>同理，如果只有一个进程占用，而且它只用了300ms，那么在这一秒的尺度看来，cpu的占用时间是30％。于是显示出来的状态就是占用30%的CPU时间。</p><p>这就是内核是如何看待和分配计算资源的。当然实际情况要比这复杂的多，但是基本思路就是这样。Linux内核是通过CPU调度器CFS－－完全公平调度器对CPU的时间进行调度的，由于本文的侧重点是cgroup而不是CFS，对这个题目感兴趣的同学可以到<a class="link"   href="http://www.linuxjournal.com/magazine/completely-fair-scheduler?page=0,1" >这里<i class="fas fa-external-link-alt"></i></a>进一步学习。CFS是内核可以实现真对CPU资源隔离的核心手段，因此，理解清楚CFS对理解清楚CPU资源隔离会有很大的帮助。</p><h3 id="如何隔离CPU资源？"><a href="#如何隔离CPU资源？" class="headerlink" title="如何隔离CPU资源？"></a>如何隔离CPU资源？</h3><p>根据CPU资源的组织形式，我们就可以理解cgroup是如何对CPU资源进行隔离的了。</p><p>无非也是两个思路，一个是分配核心进行隔离，另一个是分配CPU使用时间进行隔离。</p><p>再介绍如何做隔离之前，我们先来介绍一下我们的实验系统环境：没有特殊情况，我们的实验环境都是一台24核心、128G内存的服务器，上面安装的系统可以认为是Centos7.</p><h3 id="搭建测试环境"><a href="#搭建测试环境" class="headerlink" title="搭建测试环境"></a>搭建测试环境</h3><p>我们将使用cgconfig服务和cgred服务对cgroup进行配置和使用。我们将配置两个group，一个叫zorro，另一个叫jerry。它们分别也是系统上的两个账户，其中zorro用户所运行的进程都默认在zorro group中进行限制，jerry用户所运行的进程都放到jerry group中进行限制。配置文件内容和配置方法如下：</p><blockquote><p>本文并不对以下配置方法的具体含义做解释，大家只要知道如此配置可以达到相关试验环境要求即可。如果大家对配置的细节感兴趣，可以自行查找相关资料进行学习。</p></blockquote><p>首先添加两个用户，zorro和jerry：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">zorrozou</span>-<span class="type">pc</span> ~]<span class="comment"># useradd zorro</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">zorrozou</span>-<span class="type">pc</span> ~]<span class="comment"># useradd jerry</span></span><br></pre></td></tr></table></figure><p>修改&#x2F;etc&#x2F;cgrules.conf，添加两行内容：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">zorrozou</span>-<span class="type">pc</span> ~]<span class="comment"># cat /etc/cgrules.conf </span></span><br><span class="line">zorrocpu,cpuacctzorro</span><br><span class="line">jerrycpu,cpuacctjerry</span><br></pre></td></tr></table></figure><p>修改&#x2F;etc&#x2F;cgconfig.conf，添加以下内容：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">zorrozou</span>-<span class="type">pc</span> ~]<span class="comment"># cat /etc/cgconfig.conf</span></span><br><span class="line"><span class="built_in">mount</span> &#123;</span><br><span class="line">cpuset= /cgroup/cpuset;</span><br><span class="line">cpu= /cgroup/cpu;</span><br><span class="line">cpuacct= /cgroup/cpuacct;</span><br><span class="line">memory= /cgroup/memory;</span><br><span class="line">devices= /cgroup/devices;</span><br><span class="line">freezer= /cgroup/freezer;</span><br><span class="line">net_cls= /cgroup/net_cls;</span><br><span class="line">blkio= /cgroup/blkio;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">group</span> zorro &#123;</span><br><span class="line">cpuset &#123;</span><br><span class="line">cpuset.cpus = <span class="string">&quot;1,2&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">group</span> jerry &#123;</span><br><span class="line">cpuset &#123;</span><br><span class="line">cpuset.cpus = <span class="string">&quot;3,4&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重启cgconfig服务和cgred服务：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">zorrozou</span>-<span class="type">pc</span> ~]<span class="comment"># service cgconfig restart</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">zorrozou</span>-<span class="type">pc</span> ~]<span class="comment"># service cgred restart</span></span><br></pre></td></tr></table></figure><p>根据上面的配置，我们给zorro组合jerry组分别配置了cpuset的隔离设置，那么在cgroup的相关目录下应该出现相关组的配置文件：</p><blockquote><p>本文中所出现的<strong>组</strong>的含义，如无特殊说明都是对应cgroup的控制组，而非用户组身份。</p></blockquote><p>我们可以通过检查相关目录内容来检查一下环境是否配置完成： </p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">zorrozou</span>-<span class="type">pc</span> ~]<span class="comment"># ls /cgroup/cpuset/&#123;zorro,jerry&#125;</span></span><br><span class="line">/cgroup/cpuset/jerry:</span><br><span class="line">cgroup.clone_children  cpuset.cpu_exclusive  cpuset.mem_exclusive   cpuset.memory_pressure     cpuset.mems                      cpuset.stat</span><br><span class="line">cgroup.event_control   cpuset.cpuinfo        cpuset.mem_hardwall    cpuset.memory_spread_page  cpuset.sched_load_balance        notify_on_release</span><br><span class="line">cgroup.procs           cpuset.cpus           cpuset.memory_migrate  cpuset.memory_spread_slab  cpuset.sched_relax_domain_level  tasks</span><br><span class="line"></span><br><span class="line">/cgroup/cpuset/zorro:</span><br><span class="line">cgroup.clone_children  cpuset.cpu_exclusive  cpuset.mem_exclusive   cpuset.memory_pressure     cpuset.mems                      cpuset.stat</span><br><span class="line">cgroup.event_control   cpuset.cpuinfo        cpuset.mem_hardwall    cpuset.memory_spread_page  cpuset.sched_load_balance        notify_on_release</span><br><span class="line">cgroup.procs           cpuset.cpus           cpuset.memory_migrate  cpuset.memory_spread_slab  cpuset.sched_relax_domain_level  tasks</span><br></pre></td></tr></table></figure><p>至此，我们的实验环境已经搭建完成。</p><h3 id="测试用例设计"><a href="#测试用例设计" class="headerlink" title="测试用例设计"></a>测试用例设计</h3><p>无论是针对CPU核心的隔离还是针对CPU时间的隔离，我们都需要一个可以消耗大量的CPU运算资源的程序来进行测试，考虑到我们是一个多CPU核心的环境，所以我们的测试用例一定也是一个可以并发使用多个CPU核心的计算型测试用例。针对这个需求，我们首先设计了一个使用多线程并发进行筛质数的简单程序。这个程序可以打印出从100010001到100020000数字范围内的质数有哪些。并发48个工作线程从一个共享的count整型变量中取数进行计算。程序源代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NUM 48</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> START 100010001</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> END 100020000</span></span><br><span class="line"></span><br><span class="line"><span class="type">pthread_mutex_t</span> mutex = PTHREAD_MUTEX_INITIALIZER;</span><br><span class="line"><span class="type">pthread_cond_t</span> cond = PTHREAD_COND_INITIALIZER;</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> *<span class="title">prime</span><span class="params">(<span class="type">void</span> *p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n, i, flag;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">pthread_mutex_lock</span>(&amp;mutex) != <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="built_in">perror</span>(<span class="string">&quot;pthread_mutex_lock()&quot;</span>);</span><br><span class="line">                    <span class="built_in">pthread_exit</span>(<span class="literal">NULL</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (count == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="built_in">pthread_cond_wait</span>(&amp;cond, &amp;mutex) != <span class="number">0</span>) &#123;</span><br><span class="line">                            <span class="built_in">perror</span>(<span class="string">&quot;pthread_cond_wait()&quot;</span>);</span><br><span class="line">                            <span class="built_in">pthread_exit</span>(<span class="literal">NULL</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (count == <span class="number">-1</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="built_in">pthread_mutex_unlock</span>(&amp;mutex) != <span class="number">0</span>) &#123;</span><br><span class="line">                            <span class="built_in">perror</span>(<span class="string">&quot;pthread_mutex_unlock()&quot;</span>);</span><br><span class="line">                            <span class="built_in">pthread_exit</span>(<span class="literal">NULL</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            n = count;</span><br><span class="line">            count = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">pthread_cond_broadcast</span>(&amp;cond) != <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="built_in">perror</span>(<span class="string">&quot;pthread_cond_broadcast()&quot;</span>);</span><br><span class="line">                    <span class="built_in">pthread_exit</span>(<span class="literal">NULL</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">pthread_mutex_unlock</span>(&amp;mutex) != <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="built_in">perror</span>(<span class="string">&quot;pthread_mutex_unlock()&quot;</span>);</span><br><span class="line">                    <span class="built_in">pthread_exit</span>(<span class="literal">NULL</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            flag = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (i=<span class="number">2</span>;i&lt;n/<span class="number">2</span>;i++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (n%i == <span class="number">0</span>) &#123;</span><br><span class="line">                            flag = <span class="number">0</span>;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (flag == <span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;%d is a prime form %d!\n&quot;</span>, n, <span class="built_in">pthread_self</span>());</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">pthread_exit</span>(<span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">pthread_t</span> tid[NUM];</span><br><span class="line">    <span class="type">int</span> ret, i;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;NUM;i++) &#123;</span><br><span class="line">            ret = <span class="built_in">pthread_create</span>(&amp;tid[i], <span class="literal">NULL</span>, prime, <span class="literal">NULL</span>);</span><br><span class="line">            <span class="keyword">if</span> (ret != <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="built_in">perror</span>(<span class="string">&quot;pthread_create()&quot;</span>);</span><br><span class="line">                    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i=START;i&lt;END;i+=<span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">pthread_mutex_lock</span>(&amp;mutex) != <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="built_in">perror</span>(<span class="string">&quot;pthread_mutex_lock()&quot;</span>);</span><br><span class="line">                    <span class="built_in">pthread_exit</span>(<span class="literal">NULL</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (count != <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="built_in">pthread_cond_wait</span>(&amp;cond, &amp;mutex) != <span class="number">0</span>) &#123;</span><br><span class="line">                            <span class="built_in">perror</span>(<span class="string">&quot;pthread_cond_wait()&quot;</span>);</span><br><span class="line">                            <span class="built_in">pthread_exit</span>(<span class="literal">NULL</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            count = i;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">pthread_cond_broadcast</span>(&amp;cond) != <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="built_in">perror</span>(<span class="string">&quot;pthread_cond_broadcast()&quot;</span>);</span><br><span class="line">                    <span class="built_in">pthread_exit</span>(<span class="literal">NULL</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">pthread_mutex_unlock</span>(&amp;mutex) != <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="built_in">perror</span>(<span class="string">&quot;pthread_mutex_unlock()&quot;</span>);</span><br><span class="line">                    <span class="built_in">pthread_exit</span>(<span class="literal">NULL</span>);</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">pthread_mutex_lock</span>(&amp;mutex) != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">perror</span>(<span class="string">&quot;pthread_mutex_lock()&quot;</span>);</span><br><span class="line">            <span class="built_in">pthread_exit</span>(<span class="literal">NULL</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (count != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">pthread_cond_wait</span>(&amp;cond, &amp;mutex) != <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="built_in">perror</span>(<span class="string">&quot;pthread_cond_wait()&quot;</span>);</span><br><span class="line">                    <span class="built_in">pthread_exit</span>(<span class="literal">NULL</span>);</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    count = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">pthread_cond_broadcast</span>(&amp;cond) != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">perror</span>(<span class="string">&quot;pthread_cond_broadcast()&quot;</span>);</span><br><span class="line">            <span class="built_in">pthread_exit</span>(<span class="literal">NULL</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">pthread_mutex_unlock</span>(&amp;mutex) != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">perror</span>(<span class="string">&quot;pthread_mutex_unlock()&quot;</span>);</span><br><span class="line">            <span class="built_in">pthread_exit</span>(<span class="literal">NULL</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;NUM;i++) &#123;</span><br><span class="line">            ret = <span class="built_in">pthread_join</span>(tid[i], <span class="literal">NULL</span>);</span><br><span class="line">            <span class="keyword">if</span> (ret != <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">                    <span class="built_in">perror</span>(<span class="string">&quot;pthread_join()&quot;</span>);</span><br><span class="line">                    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们先来看一下这个程序在不做限制的情况下的执行效果和执行时间：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">zorrozou</span>-<span class="type">pc</span> ~/<span class="type">test</span>]<span class="comment"># time ./prime_thread</span></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line"><span class="number">100019603</span> is a prime form <span class="number">2068363008</span>!</span><br><span class="line"><span class="number">100019471</span> is a prime form <span class="number">1866938112</span>!</span><br><span class="line"><span class="number">100019681</span> is a prime form <span class="number">1934079744</span>!</span><br><span class="line"><span class="number">100019597</span> is a prime form <span class="number">1875330816</span>!</span><br><span class="line"><span class="number">100019701</span> is a prime form <span class="number">2059970304</span>!</span><br><span class="line"><span class="number">100019657</span> is a prime form <span class="number">1799796480</span>!</span><br><span class="line"><span class="number">100019761</span> is a prime form <span class="number">1808189184</span>!</span><br><span class="line"><span class="number">100019587</span> is a prime form <span class="number">1824974592</span>!</span><br><span class="line"><span class="number">100019659</span> is a prime form <span class="number">2076755712</span>!</span><br><span class="line"><span class="number">100019837</span> is a prime form <span class="number">1959257856</span>!</span><br><span class="line"><span class="number">100019923</span> is a prime form <span class="number">2034792192</span>!</span><br><span class="line"><span class="number">100019921</span> is a prime form <span class="number">1908901632</span>!</span><br><span class="line"><span class="number">100019729</span> is a prime form <span class="number">1850152704</span>!</span><br><span class="line"><span class="number">100019863</span> is a prime form <span class="literal">-2109106432</span>!</span><br><span class="line"><span class="number">100019911</span> is a prime form <span class="literal">-2125891840</span>!</span><br><span class="line"><span class="number">100019749</span> is a prime form <span class="number">2101933824</span>!</span><br><span class="line"><span class="number">100019879</span> is a prime form <span class="number">2026399488</span>!</span><br><span class="line"><span class="number">100019947</span> is a prime form <span class="number">1942472448</span>!</span><br><span class="line"><span class="number">100019693</span> is a prime form <span class="number">1917294336</span>!</span><br><span class="line"><span class="number">100019683</span> is a prime form <span class="number">2051577600</span>!</span><br><span class="line"><span class="number">100019873</span> is a prime form <span class="number">2110326528</span>!</span><br><span class="line"><span class="number">100019929</span> is a prime form <span class="literal">-2134284544</span>!</span><br><span class="line"><span class="number">100019977</span> is a prime form <span class="number">1892116224</span>!</span><br><span class="line"></span><br><span class="line">real<span class="number">0</span>m8.<span class="number">945</span>s</span><br><span class="line">user<span class="number">3</span>m32.<span class="number">095</span>s</span><br><span class="line">sys<span class="number">0</span>m0.<span class="number">235</span>s</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">zorrozou</span>-<span class="type">pc</span> ~]<span class="comment"># mpstat -P ALL 1</span></span><br><span class="line"><span class="number">11</span>:<span class="number">21</span>:<span class="number">51</span>     CPU    %usr   %nice    %sys %iowait    %irq   %soft  %steal  %guest  %gnice   %idle</span><br><span class="line"><span class="number">11</span>:<span class="number">21</span>:<span class="number">52</span>     all   <span class="number">99.92</span>    <span class="number">0.00</span>    <span class="number">0.08</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span></span><br><span class="line"><span class="number">11</span>:<span class="number">21</span>:<span class="number">52</span>       <span class="number">0</span>  <span class="number">100.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span></span><br><span class="line"><span class="number">11</span>:<span class="number">21</span>:<span class="number">52</span>       <span class="number">1</span>  <span class="number">100.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span></span><br><span class="line"><span class="number">11</span>:<span class="number">21</span>:<span class="number">52</span>       <span class="number">2</span>  <span class="number">100.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span></span><br><span class="line"><span class="number">11</span>:<span class="number">21</span>:<span class="number">52</span>       <span class="number">3</span>  <span class="number">100.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span></span><br><span class="line"><span class="number">11</span>:<span class="number">21</span>:<span class="number">52</span>       <span class="number">4</span>   <span class="number">99.00</span>    <span class="number">0.00</span>    <span class="number">1.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span></span><br><span class="line"><span class="number">11</span>:<span class="number">21</span>:<span class="number">52</span>       <span class="number">5</span>  <span class="number">100.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span></span><br><span class="line"><span class="number">11</span>:<span class="number">21</span>:<span class="number">52</span>       <span class="number">6</span>  <span class="number">100.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span></span><br><span class="line"><span class="number">11</span>:<span class="number">21</span>:<span class="number">52</span>       <span class="number">7</span>  <span class="number">100.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span></span><br><span class="line"><span class="number">11</span>:<span class="number">21</span>:<span class="number">52</span>       <span class="number">8</span>  <span class="number">100.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span></span><br><span class="line"><span class="number">11</span>:<span class="number">21</span>:<span class="number">52</span>       <span class="number">9</span>  <span class="number">100.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span></span><br><span class="line"><span class="number">11</span>:<span class="number">21</span>:<span class="number">52</span>      <span class="number">10</span>  <span class="number">100.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span></span><br><span class="line"><span class="number">11</span>:<span class="number">21</span>:<span class="number">52</span>      <span class="number">11</span>   <span class="number">99.01</span>    <span class="number">0.00</span>    <span class="number">0.99</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span></span><br><span class="line"><span class="number">11</span>:<span class="number">21</span>:<span class="number">52</span>      <span class="number">12</span>  <span class="number">100.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span></span><br><span class="line"><span class="number">11</span>:<span class="number">21</span>:<span class="number">52</span>      <span class="number">13</span>  <span class="number">100.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span></span><br><span class="line"><span class="number">11</span>:<span class="number">21</span>:<span class="number">52</span>      <span class="number">14</span>  <span class="number">100.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span></span><br><span class="line"><span class="number">11</span>:<span class="number">21</span>:<span class="number">52</span>      <span class="number">15</span>  <span class="number">100.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span></span><br><span class="line"><span class="number">11</span>:<span class="number">21</span>:<span class="number">52</span>      <span class="number">16</span>   <span class="number">99.01</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.99</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span></span><br><span class="line"><span class="number">11</span>:<span class="number">21</span>:<span class="number">52</span>      <span class="number">17</span>  <span class="number">100.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span></span><br><span class="line"><span class="number">11</span>:<span class="number">21</span>:<span class="number">52</span>      <span class="number">18</span>  <span class="number">100.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span></span><br><span class="line"><span class="number">11</span>:<span class="number">21</span>:<span class="number">52</span>      <span class="number">19</span>  <span class="number">100.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span></span><br><span class="line"><span class="number">11</span>:<span class="number">21</span>:<span class="number">52</span>      <span class="number">20</span>  <span class="number">100.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span></span><br><span class="line"><span class="number">11</span>:<span class="number">21</span>:<span class="number">52</span>      <span class="number">21</span>  <span class="number">100.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span></span><br><span class="line"><span class="number">11</span>:<span class="number">21</span>:<span class="number">52</span>      <span class="number">22</span>  <span class="number">100.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span></span><br><span class="line"><span class="number">11</span>:<span class="number">21</span>:<span class="number">52</span>      <span class="number">23</span>  <span class="number">100.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span></span><br></pre></td></tr></table></figure><p>经过多次测试，程序执行时间基本稳定：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">zorrozou</span>-<span class="type">pc</span> ~/<span class="type">test</span>]<span class="comment"># time ./prime_thread &amp;&gt; /dev/null</span></span><br><span class="line"></span><br><span class="line">real<span class="number">0</span>m8.<span class="number">953</span>s</span><br><span class="line">user<span class="number">3</span>m31.<span class="number">950</span>s</span><br><span class="line">sys<span class="number">0</span>m0.<span class="number">227</span>s</span><br><span class="line">[<span class="type">root</span>@<span class="type">zorrozou</span>-<span class="type">pc</span> ~/<span class="type">test</span>]<span class="comment"># time ./prime_thread &amp;&gt; /dev/null</span></span><br><span class="line"></span><br><span class="line">real<span class="number">0</span>m8.<span class="number">932</span>s</span><br><span class="line">user<span class="number">3</span>m31.<span class="number">984</span>s</span><br><span class="line">sys<span class="number">0</span>m0.<span class="number">231</span>s</span><br><span class="line">[<span class="type">root</span>@<span class="type">zorrozou</span>-<span class="type">pc</span> ~/<span class="type">test</span>]<span class="comment"># time ./prime_thread &amp;&gt; /dev/null</span></span><br><span class="line"></span><br><span class="line">real<span class="number">0</span>m8.<span class="number">954</span>s</span><br><span class="line">user<span class="number">3</span>m31.<span class="number">794</span>s</span><br><span class="line">sys<span class="number">0</span>m0.<span class="number">224</span>s</span><br></pre></td></tr></table></figure><p>所有相关环境都准备就绪，后续我们将在此程序的基础上进行各种隔离的测试。</p><h3 id="针对CPU核心进行资源隔离"><a href="#针对CPU核心进行资源隔离" class="headerlink" title="针对CPU核心进行资源隔离"></a>针对CPU核心进行资源隔离</h3><p>针对CPU核心进行隔离，其实就是把要运行的进程绑定到指定的核心上运行，通过让不同的进程占用不同的核心，以达到运算资源隔离的目的。其实对于Linux来说，这种手段并不新鲜，也并不是在引入cgroup之后实现的，早在内核使用O1调度算法的时候，就已经支持通过taskset命令来绑定进程的cpu核心了。</p><p>好的，废话少说，我们来看看这在cgroup中是怎么配置的。</p><p>其实通过刚才的&#x2F;etc&#x2F;cgconfig.conf配置文件的内容，我们已经配置好了针对不同的组占用核心的设置，来回顾一下：</p><pre><code>group zorro &#123;    cpuset &#123;        cpuset.cpus = &quot;1,2&quot;;    &#125;&#125;</code></pre><p>这段配置内容就是说，将zorro组中的进程都放在编号为1，2的cpu核心上运行。这里要说明的是，cpu核心的编号一般是从0号开始的。24个核心的服务器编号范围是从0-23.我们可以通过查看&#x2F;proc&#x2F;cpuinfo的内容来确定相关物理cpu的个数和核心的个数。我们截取一段来看一下：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">zorrozou</span>-<span class="type">pc</span> ~/<span class="type">test</span>]<span class="comment"># cat /proc/cpuinfo</span></span><br><span class="line">processor: <span class="number">23</span></span><br><span class="line">vendor_id: GenuineIntel</span><br><span class="line">cpu family: <span class="number">6</span></span><br><span class="line">model: <span class="number">63</span></span><br><span class="line">model name: Intel(<span class="built_in">R</span>) Xeon(<span class="built_in">R</span>) CPU E5<span class="literal">-2620</span> v3 <span class="selector-tag">@</span> <span class="number">2.40</span>GHz</span><br><span class="line">stepping: <span class="number">2</span></span><br><span class="line">microcode: <span class="number">0</span>x2b</span><br><span class="line">cpu MHz: <span class="number">2599.968</span></span><br><span class="line">cache size: <span class="number">15360</span> KB</span><br><span class="line">physical id: <span class="number">1</span></span><br><span class="line">siblings: <span class="number">12</span></span><br><span class="line">core id: <span class="number">5</span></span><br><span class="line">cpu cores: <span class="number">6</span></span><br><span class="line">apicid: <span class="number">27</span></span><br><span class="line">initial apicid: <span class="number">27</span></span><br><span class="line">fpu: yes</span><br><span class="line">fpu_exception: yes</span><br><span class="line">cpuid level: <span class="number">15</span></span><br><span class="line">wp: yes</span><br><span class="line">flags: fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 fma cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand lahf_lm abm ida arat epb xsaveopt pln pts dtherm tpr_shadow vnmi flexpriority ept vpid fsgsbase tsc_adjust bmi1 avx2 smep bmi2 erms invpcid</span><br><span class="line">bogomips: <span class="number">4796.38</span></span><br><span class="line">clflush size: <span class="number">64</span></span><br><span class="line">cache_alignment: <span class="number">64</span></span><br><span class="line">address sizes: <span class="number">46</span> bits physical, <span class="number">48</span> bits virtual</span><br><span class="line">power management:</span><br></pre></td></tr></table></figure><p>其中<em>processor: 23</em>就是核心编号，说明我们当前显示的是这个服务器上的第24个核心，<em>physical id: 1</em>表示的是这个核心所在的物理cpu是哪个。这个编号也是从0开始，表示这个核心在第二个物理cpu上。那就意味着，我这个服务器是一个双物理cpu的服务器，那就可能意味着我们的系统时NUMA架构。另外还有一个要注意的是<em>core id: 5</em>这个子段，这里面隐含着一个可能的含义：你的服务器是否开启了超线程。众所周知，开启了超线程的服务器，在系统看来，一个核心会编程两个核心来看待。那么我们再确定一下是否开了超线程，可以grep一下：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">zorrozou</span>-<span class="type">pc</span> ~/<span class="type">test</span>]<span class="comment"># cat /proc/cpuinfo |grep -e &quot;core id&quot; -e &quot;physical id&quot;</span></span><br><span class="line">physical id: <span class="number">0</span></span><br><span class="line">core id: <span class="number">0</span></span><br><span class="line">physical id: <span class="number">0</span></span><br><span class="line">core id: <span class="number">1</span></span><br><span class="line">physical id: <span class="number">0</span></span><br><span class="line">core id: <span class="number">2</span></span><br><span class="line">physical id: <span class="number">0</span></span><br><span class="line">core id: <span class="number">3</span></span><br><span class="line">physical id: <span class="number">0</span></span><br><span class="line">core id: <span class="number">4</span></span><br><span class="line">physical id: <span class="number">0</span></span><br><span class="line">core id: <span class="number">5</span></span><br><span class="line">physical id: <span class="number">1</span></span><br><span class="line">core id: <span class="number">0</span></span><br><span class="line">physical id: <span class="number">1</span></span><br><span class="line">core id: <span class="number">1</span></span><br><span class="line">physical id: <span class="number">1</span></span><br><span class="line">core id: <span class="number">2</span></span><br><span class="line">physical id: <span class="number">1</span></span><br><span class="line">core id: <span class="number">3</span></span><br><span class="line">physical id: <span class="number">1</span></span><br><span class="line">core id: <span class="number">4</span></span><br><span class="line">physical id: <span class="number">1</span></span><br><span class="line">core id: <span class="number">5</span></span><br><span class="line">physical id: <span class="number">0</span></span><br><span class="line">core id: <span class="number">0</span></span><br><span class="line">physical id: <span class="number">0</span></span><br><span class="line">core id: <span class="number">1</span></span><br><span class="line">physical id: <span class="number">0</span></span><br><span class="line">core id: <span class="number">2</span></span><br><span class="line">physical id: <span class="number">0</span></span><br><span class="line">core id: <span class="number">3</span></span><br><span class="line">physical id: <span class="number">0</span></span><br><span class="line">core id: <span class="number">4</span></span><br><span class="line">physical id: <span class="number">0</span></span><br><span class="line">core id: <span class="number">5</span></span><br><span class="line">physical id: <span class="number">1</span></span><br><span class="line">core id: <span class="number">0</span></span><br><span class="line">physical id: <span class="number">1</span></span><br><span class="line">core id: <span class="number">1</span></span><br><span class="line">physical id: <span class="number">1</span></span><br><span class="line">core id: <span class="number">2</span></span><br><span class="line">physical id: <span class="number">1</span></span><br><span class="line">core id: <span class="number">3</span></span><br><span class="line">physical id: <span class="number">1</span></span><br><span class="line">core id: <span class="number">4</span></span><br><span class="line">physical id: <span class="number">1</span></span><br><span class="line">core id: <span class="number">5</span></span><br></pre></td></tr></table></figure><p>这个内容显示出我的服务器是开启了超线程的，因为有同一个<em>physical id: 1</em>的<em>core id: 5</em>可能出现两次，那么就说明这个物理cpu上的5号核心在系统看来出现了2个，那么肯定意味着开了超线程。</p><blockquote><p>我在此要强调超线程这个事情，因为在一个开启了超线程的服务器上运行我们当前的测试用例是很可能得不到预想的结果的。因为从原理上看，超线程技术虽然使cpu核心变多了，但是在本测试中并不能反映出相应的性能提高。我们后续会通过cpuset的资源隔离先来说明一下这个问题，然后在后续的测试中，我们将采用一些手段规避这个问题。</p></blockquote><p>我们先通过一个cpuset的配置来反映一下超线程对本测试的影响，顺便学习一下cgroup的cpuset配置方法。</p><ol><li>不绑定核心测试：</li></ol><p>将&#x2F;etc&#x2F;cgconfig.conf文件中zorro组相关配置修改为以下状态，之后重启cgconfig服务：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">group</span> zorro &#123;</span><br><span class="line">cpuset &#123;</span><br><span class="line">cpuset.cpus = <span class="string">&quot;0-23&quot;</span>;</span><br><span class="line">cpuset.mems = <span class="string">&quot;0-1&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">zorrozou</span>-<span class="type">pc</span> ~]<span class="comment"># service cgconfig restart</span></span><br></pre></td></tr></table></figure><p>切换用户身份到zorro，并察看zorro组的配置：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">zorrozou</span>-<span class="type">pc</span> ~]<span class="comment"># su - zorro</span></span><br><span class="line">[<span class="type">zorro</span>@<span class="type">zorrozou</span>-<span class="type">pc</span> ~]<span class="variable">$</span> <span class="built_in">cat</span> /cgroup/cpuset/zorro/cpuset.cpus </span><br><span class="line"><span class="number">0</span><span class="literal">-23</span></span><br></pre></td></tr></table></figure><p>zorro用户对应的进程已经绑定在0-23核心上执行，我们看一下执行结果：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">zorro</span>@<span class="type">zorrozou</span>-<span class="type">pc</span> ~/<span class="type">test</span>]<span class="variable">$</span> time ./prime_thread_zorro &amp;&gt; /dev/null</span><br><span class="line"></span><br><span class="line">real<span class="number">0</span>m8.<span class="number">956</span>s</span><br><span class="line">user<span class="number">3</span>m31.<span class="number">990</span>s</span><br><span class="line">sys<span class="number">0</span>m0.<span class="number">246</span>s</span><br><span class="line">[<span class="type">zorro</span>@<span class="type">zorrozou</span>-<span class="type">pc</span> ~/<span class="type">test</span>]<span class="variable">$</span> time ./prime_thread_zorro &amp;&gt; /dev/null</span><br><span class="line"></span><br><span class="line">real<span class="number">0</span>m8.<span class="number">944</span>s</span><br><span class="line">user<span class="number">3</span>m31.<span class="number">956</span>s</span><br><span class="line">sys<span class="number">0</span>m0.<span class="number">247</span>s</span><br></pre></td></tr></table></figure><p>执行速度跟刚才一样，这相当于没绑定的情况。下面，我们对zorro组的进程绑定一半的cpu核心进行测试，先测试绑定0-11号核心，将*cpuset.cpus &#x3D; “0-23”<em>改为</em>cpuset.cpus &#x3D; “0-11”*。</p><blockquote><p>请注意每次修改完&#x2F;etc&#x2F;cgconfig.conf文件内容都应该重启cgconfig服务，并重新登陆zorro账户。过程不再复述。</p></blockquote><p>将核心绑定到0-11之后的测试结果如下：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">zorro</span>@<span class="type">zorrozou</span>-<span class="type">pc</span> ~/<span class="type">test</span>]<span class="variable">$</span> time ./prime_thread_zorro &amp;&gt; /dev/null</span><br><span class="line"></span><br><span class="line">real<span class="number">0</span>m9.<span class="number">457</span>s</span><br><span class="line">user<span class="number">1</span>m52.<span class="number">773</span>s</span><br><span class="line">sys<span class="number">0</span>m0.<span class="number">155</span>s</span><br><span class="line">[<span class="type">zorro</span>@<span class="type">zorrozou</span>-<span class="type">pc</span> ~/<span class="type">test</span>]<span class="variable">$</span> time ./prime_thread_zorro &amp;&gt; /dev/null</span><br><span class="line"></span><br><span class="line">real<span class="number">0</span>m9.<span class="number">460</span>s</span><br><span class="line">user<span class="number">1</span>m52.<span class="number">589</span>s</span><br><span class="line">sys<span class="number">0</span>m0.<span class="number">153</span>s</span><br><span class="line"></span><br><span class="line"><span class="number">14</span>:<span class="number">52</span>:<span class="number">02</span>     CPU    %usr   %nice    %sys %iowait    %irq   %soft  %steal  %guest  %gnice   %idle</span><br><span class="line"><span class="number">14</span>:<span class="number">52</span>:<span class="number">03</span>     all   <span class="number">49.92</span>    <span class="number">0.00</span>    <span class="number">0.08</span>    <span class="number">0.00</span>    <span class="number">0.08</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>   <span class="number">49.92</span></span><br><span class="line"><span class="number">14</span>:<span class="number">52</span>:<span class="number">03</span>       <span class="number">0</span>  <span class="number">100.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span></span><br><span class="line"><span class="number">14</span>:<span class="number">52</span>:<span class="number">03</span>       <span class="number">1</span>  <span class="number">100.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span></span><br><span class="line"><span class="number">14</span>:<span class="number">52</span>:<span class="number">03</span>       <span class="number">2</span>  <span class="number">100.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span></span><br><span class="line"><span class="number">14</span>:<span class="number">52</span>:<span class="number">03</span>       <span class="number">3</span>  <span class="number">100.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span></span><br><span class="line"><span class="number">14</span>:<span class="number">52</span>:<span class="number">03</span>       <span class="number">4</span>  <span class="number">100.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span></span><br><span class="line"><span class="number">14</span>:<span class="number">52</span>:<span class="number">03</span>       <span class="number">5</span>  <span class="number">100.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span></span><br><span class="line"><span class="number">14</span>:<span class="number">52</span>:<span class="number">03</span>       <span class="number">6</span>   <span class="number">99.01</span>    <span class="number">0.00</span>    <span class="number">0.99</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span></span><br><span class="line"><span class="number">14</span>:<span class="number">52</span>:<span class="number">03</span>       <span class="number">7</span>  <span class="number">100.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span></span><br><span class="line"><span class="number">14</span>:<span class="number">52</span>:<span class="number">03</span>       <span class="number">8</span>  <span class="number">100.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span></span><br><span class="line"><span class="number">14</span>:<span class="number">52</span>:<span class="number">03</span>       <span class="number">9</span>  <span class="number">100.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span></span><br><span class="line"><span class="number">14</span>:<span class="number">52</span>:<span class="number">03</span>      <span class="number">10</span>  <span class="number">100.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span></span><br><span class="line"><span class="number">14</span>:<span class="number">52</span>:<span class="number">03</span>      <span class="number">11</span>  <span class="number">100.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span></span><br><span class="line"><span class="number">14</span>:<span class="number">52</span>:<span class="number">03</span>      <span class="number">12</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">2.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>   <span class="number">98.00</span></span><br><span class="line"><span class="number">14</span>:<span class="number">52</span>:<span class="number">03</span>      <span class="number">13</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>  <span class="number">100.00</span></span><br><span class="line"><span class="number">14</span>:<span class="number">52</span>:<span class="number">03</span>      <span class="number">14</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>  <span class="number">100.00</span></span><br><span class="line"><span class="number">14</span>:<span class="number">52</span>:<span class="number">03</span>      <span class="number">15</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>  <span class="number">100.00</span></span><br><span class="line"><span class="number">14</span>:<span class="number">52</span>:<span class="number">03</span>      <span class="number">16</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>  <span class="number">100.00</span></span><br><span class="line"><span class="number">14</span>:<span class="number">52</span>:<span class="number">03</span>      <span class="number">17</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>  <span class="number">100.00</span></span><br><span class="line"><span class="number">14</span>:<span class="number">52</span>:<span class="number">03</span>      <span class="number">18</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>  <span class="number">100.00</span></span><br><span class="line"><span class="number">14</span>:<span class="number">52</span>:<span class="number">03</span>      <span class="number">19</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>  <span class="number">100.00</span></span><br><span class="line"><span class="number">14</span>:<span class="number">52</span>:<span class="number">03</span>      <span class="number">20</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>  <span class="number">100.00</span></span><br><span class="line"><span class="number">14</span>:<span class="number">52</span>:<span class="number">03</span>      <span class="number">21</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>  <span class="number">100.00</span></span><br><span class="line"><span class="number">14</span>:<span class="number">52</span>:<span class="number">03</span>      <span class="number">22</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>  <span class="number">100.00</span></span><br><span class="line"><span class="number">14</span>:<span class="number">52</span>:<span class="number">03</span>      <span class="number">23</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.99</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>   <span class="number">99.01</span></span><br></pre></td></tr></table></figure><p>此时会发现一个现象，执行的总体时间变化不大，大概慢了0.5秒，但是user时间下降了将近一半。</p><p>我们再降核心绑定成0-5,12-17测试一下，就是*cpuset.cpus &#x3D; “0-5,12-17”*，测试结果如下：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">zorro</span>@<span class="type">zorrozou</span>-<span class="type">pc</span> ~/<span class="type">test</span>]<span class="variable">$</span> time ./prime_thread_zorro &amp;&gt; /dev/null</span><br><span class="line"></span><br><span class="line">real<span class="number">0</span>m17.<span class="number">821</span>s</span><br><span class="line">user<span class="number">3</span>m32.<span class="number">425</span>s</span><br><span class="line">sys<span class="number">0</span>m0.<span class="number">223</span>s</span><br><span class="line">[<span class="type">zorro</span>@<span class="type">zorrozou</span>-<span class="type">pc</span> ~/<span class="type">test</span>]<span class="variable">$</span> time ./prime_thread_zorro &amp;&gt; /dev/null</span><br><span class="line">real<span class="number">0</span>m17.<span class="number">839</span>s</span><br><span class="line">user<span class="number">3</span>m32.<span class="number">375</span>s</span><br><span class="line">sys<span class="number">0</span>m0.<span class="number">223</span>s</span><br><span class="line"></span><br><span class="line"><span class="number">15</span>:<span class="number">03</span>:<span class="number">03</span>     CPU    %usr   %nice    %sys %iowait    %irq   %soft  %steal  %guest  %gnice   %idle</span><br><span class="line"><span class="number">15</span>:<span class="number">03</span>:<span class="number">04</span>     all   <span class="number">49.94</span>    <span class="number">0.00</span>    <span class="number">0.04</span>    <span class="number">0.00</span>    <span class="number">0.04</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>   <span class="number">49.98</span></span><br><span class="line"><span class="number">15</span>:<span class="number">03</span>:<span class="number">04</span>       <span class="number">0</span>  <span class="number">100.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span></span><br><span class="line"><span class="number">15</span>:<span class="number">03</span>:<span class="number">04</span>       <span class="number">1</span>  <span class="number">100.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span></span><br><span class="line"><span class="number">15</span>:<span class="number">03</span>:<span class="number">04</span>       <span class="number">2</span>  <span class="number">100.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span></span><br><span class="line"><span class="number">15</span>:<span class="number">03</span>:<span class="number">04</span>       <span class="number">3</span>  <span class="number">100.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span></span><br><span class="line"><span class="number">15</span>:<span class="number">03</span>:<span class="number">04</span>       <span class="number">4</span>  <span class="number">100.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span></span><br><span class="line"><span class="number">15</span>:<span class="number">03</span>:<span class="number">04</span>       <span class="number">5</span>  <span class="number">100.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span></span><br><span class="line"><span class="number">15</span>:<span class="number">03</span>:<span class="number">04</span>       <span class="number">6</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.99</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>   <span class="number">99.01</span></span><br><span class="line"><span class="number">15</span>:<span class="number">03</span>:<span class="number">04</span>       <span class="number">7</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>  <span class="number">100.00</span></span><br><span class="line"><span class="number">15</span>:<span class="number">03</span>:<span class="number">04</span>       <span class="number">8</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>  <span class="number">100.00</span></span><br><span class="line"><span class="number">15</span>:<span class="number">03</span>:<span class="number">04</span>       <span class="number">9</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>  <span class="number">100.00</span></span><br><span class="line"><span class="number">15</span>:<span class="number">03</span>:<span class="number">04</span>      <span class="number">10</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>  <span class="number">100.00</span></span><br><span class="line"><span class="number">15</span>:<span class="number">03</span>:<span class="number">04</span>      <span class="number">11</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>  <span class="number">100.00</span></span><br><span class="line"><span class="number">15</span>:<span class="number">03</span>:<span class="number">04</span>      <span class="number">12</span>  <span class="number">100.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span></span><br><span class="line"><span class="number">15</span>:<span class="number">03</span>:<span class="number">04</span>      <span class="number">13</span>  <span class="number">100.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span></span><br><span class="line"><span class="number">15</span>:<span class="number">03</span>:<span class="number">04</span>      <span class="number">14</span>  <span class="number">100.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span></span><br><span class="line"><span class="number">15</span>:<span class="number">03</span>:<span class="number">04</span>      <span class="number">15</span>   <span class="number">99.01</span>    <span class="number">0.00</span>    <span class="number">0.99</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span></span><br><span class="line"><span class="number">15</span>:<span class="number">03</span>:<span class="number">04</span>      <span class="number">16</span>   <span class="number">99.01</span>    <span class="number">0.00</span>    <span class="number">0.99</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span></span><br><span class="line"><span class="number">15</span>:<span class="number">03</span>:<span class="number">04</span>      <span class="number">17</span>  <span class="number">100.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span></span><br><span class="line"><span class="number">15</span>:<span class="number">03</span>:<span class="number">04</span>      <span class="number">18</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>  <span class="number">100.00</span></span><br><span class="line"><span class="number">15</span>:<span class="number">03</span>:<span class="number">04</span>      <span class="number">19</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>  <span class="number">100.00</span></span><br><span class="line"><span class="number">15</span>:<span class="number">03</span>:<span class="number">04</span>      <span class="number">20</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>  <span class="number">100.00</span></span><br><span class="line"><span class="number">15</span>:<span class="number">03</span>:<span class="number">04</span>      <span class="number">21</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>  <span class="number">100.00</span></span><br><span class="line"><span class="number">15</span>:<span class="number">03</span>:<span class="number">04</span>      <span class="number">22</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>  <span class="number">100.00</span></span><br><span class="line"><span class="number">15</span>:<span class="number">03</span>:<span class="number">04</span>      <span class="number">23</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>  <span class="number">100.00</span></span><br></pre></td></tr></table></figure><p>这次测试的结果就比较符合我们的常识，看上去cpu核心少了一半，于是执行时间增加了几乎一倍。那么是什么原因导致我们绑定到0-11核心的时候看上去性能没有下降呢？</p><p>在此我们不去过多讨论超线程的技术细节，简单来说：0-5核心是属于物理cpu0的6个实际核心，6-11是属于物理cpu1的6个实际核心，当我们使用这12个核心的时候，运算覆盖了两个物理cpu的所有真实核心。而12-17核心是对应0-5核心超线程出来的6个核心，18-23则是对应6-11核心超线程出来的6个。我们的测试应用并不能充分利用超线程之后的运算资源，所以，从我们的测试用例角度看来，只要选择了合适核心，12核跟24核的效果几本差别不大。了解了超线程的这个问题，我们后续的测试过程就要注意对比的环境。从本轮测试看来，我们应该用绑定0-5，12-17的测试结果来参考绑定一半cpu核心的效果，而不是绑定到“0-11”上的结果。从测试结果看，减少一半核心之后，确实让运算时间增加了一倍。</p><blockquote><p>出个两个思考题吧：</p><ol><li><p>我们发现第二轮绑定0-11核心测试的user时间和绑定0-23的测试时间减少一倍，而real时间几乎没变，这是为什么？</p></li><li><p>我们发现第三轮绑定0-5，12-17核心测试的user时间和绑定0-23的测试时间几乎一样，而real时间增加了一倍，这是为什么？</p></li></ol></blockquote><p>至此，如何使用cgroup的cpuset对cpu核心进行资源分配的方法大家应该学会了，这里需要强调一点：</p><p>配置中*cpuset.mems &#x3D; “0-1”*这段配置非常重要，它相当于打开cpuset功能的开关，本身的意义是用来配置cpu使用的内存节点的，不配置这个字段的结果将是cpuset.cpus设置无效。字段具体含义，请大家自行补脑。</p><h3 id="针对CPU时间进行资源隔离"><a href="#针对CPU时间进行资源隔离" class="headerlink" title="针对CPU时间进行资源隔离"></a>针对CPU时间进行资源隔离</h3><p>再回顾一下系统对cpu资源的使用方式－－分时使用。分时使用要有一个基本本的时间调度单元，这个单元的意思是说，在这样一段时间范围内，我们将多少比例分配给某个进程组。我们刚才举的例子是说1秒钟，但是实际情况是1秒钟这个时间周期对计算机来说有点长。Linux内核将这个时间周期定义放在cgroup相关目录下的一个文件里，这个文件在我们服务器上是：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">zorrozou</span>-<span class="type">pc</span> ~]<span class="comment"># cat /cgroup/cpu/zorro/cpu.cfs_period_us </span></span><br><span class="line"><span class="number">100000</span></span><br></pre></td></tr></table></figure><p>这个数字的单位是微秒，就是说，我们的cpu时间周期是100ms。还有一点需要注意的是，这个时间是针对单核来说的。</p><p>那么针对cgroup的限制放在哪里呢？</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">zorrozou</span>-<span class="type">pc</span> ~]<span class="comment"># cat /cgroup/cpu/zorro/cpu.cfs_quota_us  </span></span><br><span class="line"><span class="literal">-1</span></span><br></pre></td></tr></table></figure><p>就是这个cpu.cfs_quota_us文件。这里的cfs就是完全公平调度器，我们的资源隔离就是靠cfs来实现的。-1表示目前无限制。</p><p>限制方法很简单，就是设置cpu.cfs_quota_us这个文件的值，调度器会根据这个值的大小决定进程组在一个时间周期内（即100ms）使用cpu时间的比率。比如这个值我们设置成50000，那么就是时间周期的50%，于是这个进程组只能在一个cpu上占用50%的cpu时间。理解了这个概念，我们就可以思考一下，如果想让我们的进程在24核的服务器上不绑定核心的情况下占用所有核心的50%的cpu时间，该如何设置？计算公式为：</p><blockquote><p>（50% * 100000 * cpu核心数）</p></blockquote><p>在此设置为1200000，我们来试一下。修改cgconfig.conf内容，然后重启cgconfig：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">group</span> zorro &#123;</span><br><span class="line">    cpu &#123;</span><br><span class="line">            cpu.cfs_quota_us = <span class="string">&quot;1200000&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">zorrozou</span>-<span class="type">pc</span> ~]<span class="comment"># service cgconfig restart</span></span><br></pre></td></tr></table></figure><p>测试结果如下：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">zorro</span>@<span class="type">zorrozou</span>-<span class="type">pc</span> ~/<span class="type">test</span>]<span class="variable">$</span> time ./prime_thread_zorro &amp;&gt; /dev/null</span><br><span class="line"></span><br><span class="line">real<span class="number">0</span>m17.<span class="number">322</span>s</span><br><span class="line">user<span class="number">3</span>m27.<span class="number">116</span>s</span><br><span class="line">sys<span class="number">0</span>m0.<span class="number">266</span>s</span><br><span class="line">[<span class="type">zorro</span>@<span class="type">zorrozou</span>-<span class="type">pc</span> ~/<span class="type">test</span>]<span class="variable">$</span> time ./prime_thread_zorro &amp;&gt; /dev/null</span><br><span class="line"></span><br><span class="line">real<span class="number">0</span>m17.<span class="number">347</span>s</span><br><span class="line">user<span class="number">3</span>m27.<span class="number">208</span>s</span><br><span class="line">sys<span class="number">0</span>m0.<span class="number">260</span>s</span><br><span class="line"></span><br><span class="line"><span class="number">16</span>:<span class="number">15</span>:<span class="number">12</span>     CPU    %usr   %nice    %sys %iowait    %irq   %soft  %steal  %guest  %gnice   %idle</span><br><span class="line"><span class="number">16</span>:<span class="number">15</span>:<span class="number">13</span>     all   <span class="number">49.92</span>    <span class="number">0.00</span>    <span class="number">0.08</span>    <span class="number">0.00</span>    <span class="number">0.04</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>   <span class="number">49.96</span></span><br><span class="line"><span class="number">16</span>:<span class="number">15</span>:<span class="number">13</span>       <span class="number">0</span>   <span class="number">51.49</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.99</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>   <span class="number">47.52</span></span><br><span class="line"><span class="number">16</span>:<span class="number">15</span>:<span class="number">13</span>       <span class="number">1</span>   <span class="number">51.49</span>    <span class="number">0.00</span>    <span class="number">0.99</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>   <span class="number">47.52</span></span><br><span class="line"><span class="number">16</span>:<span class="number">15</span>:<span class="number">13</span>       <span class="number">2</span>   <span class="number">54.46</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>   <span class="number">45.54</span></span><br><span class="line"><span class="number">16</span>:<span class="number">15</span>:<span class="number">13</span>       <span class="number">3</span>   <span class="number">51.52</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>   <span class="number">48.48</span></span><br><span class="line"><span class="number">16</span>:<span class="number">15</span>:<span class="number">13</span>       <span class="number">4</span>   <span class="number">48.51</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>   <span class="number">51.49</span></span><br><span class="line"><span class="number">16</span>:<span class="number">15</span>:<span class="number">13</span>       <span class="number">5</span>   <span class="number">48.04</span>    <span class="number">0.00</span>    <span class="number">0.98</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>   <span class="number">50.98</span></span><br><span class="line"><span class="number">16</span>:<span class="number">15</span>:<span class="number">13</span>       <span class="number">6</span>   <span class="number">49.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>   <span class="number">51.00</span></span><br><span class="line"><span class="number">16</span>:<span class="number">15</span>:<span class="number">13</span>       <span class="number">7</span>   <span class="number">49.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>   <span class="number">51.00</span></span><br><span class="line"><span class="number">16</span>:<span class="number">15</span>:<span class="number">13</span>       <span class="number">8</span>   <span class="number">49.49</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>   <span class="number">50.51</span></span><br><span class="line"><span class="number">16</span>:<span class="number">15</span>:<span class="number">13</span>       <span class="number">9</span>   <span class="number">49.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>   <span class="number">51.00</span></span><br><span class="line"><span class="number">16</span>:<span class="number">15</span>:<span class="number">13</span>      <span class="number">10</span>   <span class="number">48.00</span>    <span class="number">0.00</span>    <span class="number">1.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>   <span class="number">51.00</span></span><br><span class="line"><span class="number">16</span>:<span class="number">15</span>:<span class="number">13</span>      <span class="number">11</span>   <span class="number">49.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>   <span class="number">51.00</span></span><br><span class="line"><span class="number">16</span>:<span class="number">15</span>:<span class="number">13</span>      <span class="number">12</span>   <span class="number">49.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>   <span class="number">51.00</span></span><br><span class="line"><span class="number">16</span>:<span class="number">15</span>:<span class="number">13</span>      <span class="number">13</span>   <span class="number">49.49</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>   <span class="number">50.51</span></span><br><span class="line"><span class="number">16</span>:<span class="number">15</span>:<span class="number">13</span>      <span class="number">14</span>   <span class="number">49.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>   <span class="number">51.00</span></span><br><span class="line"><span class="number">16</span>:<span class="number">15</span>:<span class="number">13</span>      <span class="number">15</span>   <span class="number">50.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>   <span class="number">50.00</span></span><br><span class="line"><span class="number">16</span>:<span class="number">15</span>:<span class="number">13</span>      <span class="number">16</span>   <span class="number">50.51</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>   <span class="number">49.49</span></span><br><span class="line"><span class="number">16</span>:<span class="number">15</span>:<span class="number">13</span>      <span class="number">17</span>   <span class="number">49.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>   <span class="number">51.00</span></span><br><span class="line"><span class="number">16</span>:<span class="number">15</span>:<span class="number">13</span>      <span class="number">18</span>   <span class="number">50.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>   <span class="number">50.00</span></span><br><span class="line"><span class="number">16</span>:<span class="number">15</span>:<span class="number">13</span>      <span class="number">19</span>   <span class="number">50.50</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>   <span class="number">49.50</span></span><br><span class="line"><span class="number">16</span>:<span class="number">15</span>:<span class="number">13</span>      <span class="number">20</span>   <span class="number">50.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>   <span class="number">50.00</span></span><br><span class="line"><span class="number">16</span>:<span class="number">15</span>:<span class="number">13</span>      <span class="number">21</span>   <span class="number">50.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>   <span class="number">50.00</span></span><br><span class="line"><span class="number">16</span>:<span class="number">15</span>:<span class="number">13</span>      <span class="number">22</span>   <span class="number">50.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>   <span class="number">50.00</span></span><br><span class="line"><span class="number">16</span>:<span class="number">15</span>:<span class="number">13</span>      <span class="number">23</span>   <span class="number">50.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>   <span class="number">50.00</span></span><br></pre></td></tr></table></figure><p>我们可以看到，基本跟绑定一半的cpu核心数的效果一样，从这个简单的对比来看，使用cpu核心数绑定的方法和使用cpu分配时间的方法，在隔离上效果几乎是相同的。但是考虑到超线程的影响，我们使用cpu时间比率的方式很可能根cpuset的方式有些差别，为了看到这个差别，我们将针对cpuset和cpuquota进行一个对比测试，测试结果如下表：</p><table><thead><tr><th>cpu比率（核心数）</th><th>cpuset realtime</th><th>cpuquota realtime</th></tr></thead><tbody><tr><td>8.3%(2)</td><td>1m46.557s</td><td>1m36.786s</td></tr><tr><td>16.7%(4)</td><td>0m53.271s</td><td>0m51.067s</td></tr><tr><td>25%(6)</td><td>0m35.528s</td><td>0m34.539s</td></tr><tr><td>33.3%(8)</td><td>0m26.643s</td><td>0m25.923s</td></tr><tr><td>50%(12)</td><td>0m17.839s</td><td>0m17.347s</td></tr><tr><td>66.7%(16)</td><td>0m13.384s</td><td>0m13.015s</td></tr><tr><td>100%(24)</td><td>0m8.972s</td><td>0m8.932s</td></tr></tbody></table><blockquote><p>思考题时间又到了：请解释这个表格测试得到的数字的差异。</p></blockquote><p>我们现在已经学会了如何使用cpuset和cpuquota两种方式对cpu资源进行分配，但是这两种分配的缺点也是显而易见的－－就是分配完之后，进程都最多只能占用相关比例的cpu资源。即使服务器上还有空闲资源，这两种方式都无法将资源“<strong>借来使用</strong>”。</p><p>那么有没有一种方法，既可以保证在系统忙的情况下让cgroup进程组只占用相关比例的资源，而在系统闲的情况下，又可以借用别人的资源，以达到资源利用率最大话的程度呢？当然有！那就是－－</p><h3 id="权重CPU资源隔离"><a href="#权重CPU资源隔离" class="headerlink" title="权重CPU资源隔离"></a>权重CPU资源隔离</h3><p>这里的权重其实是shares。我把它叫做权重是因为这个值可以理解为对资源占用的权重。这种资源隔离方式事实上也是对cpu时间的进行分配。区别是作用在cfs调度器的权重值上。从用户的角度看，无非就是给每个cgroup配置一个share值，cpu在进行时间分配的时候，按照share的大小比率来确定cpu时间的百分比。它对比cpuquota的优势是，当进程不在cfs可执行调度队列中的时候，这个权重是不起作用的。就是说，一旦其他cgroup的进程释放cpu的时候，正在占用cpu的进程可以全占所有计算资源。而当有多个cgroup进程都要占用cpu的时候，大家按比例分配。</p><p>我们照例通过实验来说明这个情况，配置方法也很简单，修改cgconfig.conf，添加字段，并重启服务：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">group</span> zorro &#123;</span><br><span class="line">    cpu &#123;</span><br><span class="line">            cpu.shares = <span class="number">1000</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[<span class="type">root</span>@<span class="type">zorrozou</span>-<span class="type">pc</span> ~]<span class="comment"># service cgconfig restart</span></span><br></pre></td></tr></table></figure><p>配置完之后，我们就给zorro组配置了一个shares值为1000，但是实际上如果系统中只有这一个组的话，cpu看起来对他是没有限制的。现在的执行效果是这样：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">zorrozou</span>-<span class="type">pc</span> ~]<span class="comment"># mpstat -P ALL 1</span></span><br><span class="line"></span><br><span class="line"><span class="number">17</span>:<span class="number">17</span>:<span class="number">29</span>     CPU    %usr   %nice    %sys %iowait    %irq   %soft  %steal  %guest  %gnice   %idle</span><br><span class="line"><span class="number">17</span>:<span class="number">17</span>:<span class="number">30</span>     all   <span class="number">99.88</span>    <span class="number">0.00</span>    <span class="number">0.12</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span></span><br><span class="line"><span class="number">17</span>:<span class="number">17</span>:<span class="number">30</span>       <span class="number">0</span>  <span class="number">100.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span></span><br><span class="line"><span class="number">17</span>:<span class="number">17</span>:<span class="number">30</span>       <span class="number">1</span>  <span class="number">100.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span></span><br><span class="line"><span class="number">17</span>:<span class="number">17</span>:<span class="number">30</span>       <span class="number">2</span>  <span class="number">100.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span></span><br><span class="line"><span class="number">17</span>:<span class="number">17</span>:<span class="number">30</span>       <span class="number">3</span>   <span class="number">99.01</span>    <span class="number">0.00</span>    <span class="number">0.99</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span></span><br><span class="line"><span class="number">17</span>:<span class="number">17</span>:<span class="number">30</span>       <span class="number">4</span>   <span class="number">99.00</span>    <span class="number">0.00</span>    <span class="number">1.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span></span><br><span class="line"><span class="number">17</span>:<span class="number">17</span>:<span class="number">30</span>       <span class="number">5</span>  <span class="number">100.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span></span><br><span class="line"><span class="number">17</span>:<span class="number">17</span>:<span class="number">30</span>       <span class="number">6</span>  <span class="number">100.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span></span><br><span class="line"><span class="number">17</span>:<span class="number">17</span>:<span class="number">30</span>       <span class="number">7</span>  <span class="number">100.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span></span><br><span class="line"><span class="number">17</span>:<span class="number">17</span>:<span class="number">30</span>       <span class="number">8</span>  <span class="number">100.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span></span><br><span class="line"><span class="number">17</span>:<span class="number">17</span>:<span class="number">30</span>       <span class="number">9</span>  <span class="number">100.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span></span><br><span class="line"><span class="number">17</span>:<span class="number">17</span>:<span class="number">30</span>      <span class="number">10</span>  <span class="number">100.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span></span><br><span class="line"><span class="number">17</span>:<span class="number">17</span>:<span class="number">30</span>      <span class="number">11</span>  <span class="number">100.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span></span><br><span class="line"><span class="number">17</span>:<span class="number">17</span>:<span class="number">30</span>      <span class="number">12</span>  <span class="number">100.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span></span><br><span class="line"><span class="number">17</span>:<span class="number">17</span>:<span class="number">30</span>      <span class="number">13</span>  <span class="number">100.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span></span><br><span class="line"><span class="number">17</span>:<span class="number">17</span>:<span class="number">30</span>      <span class="number">14</span>  <span class="number">100.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span></span><br><span class="line"><span class="number">17</span>:<span class="number">17</span>:<span class="number">30</span>      <span class="number">15</span>  <span class="number">100.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span></span><br><span class="line"><span class="number">17</span>:<span class="number">17</span>:<span class="number">30</span>      <span class="number">16</span>  <span class="number">100.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span></span><br><span class="line"><span class="number">17</span>:<span class="number">17</span>:<span class="number">30</span>      <span class="number">17</span>   <span class="number">99.00</span>    <span class="number">0.00</span>    <span class="number">1.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span></span><br><span class="line"><span class="number">17</span>:<span class="number">17</span>:<span class="number">30</span>      <span class="number">18</span>  <span class="number">100.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span></span><br><span class="line"><span class="number">17</span>:<span class="number">17</span>:<span class="number">30</span>      <span class="number">19</span>  <span class="number">100.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span></span><br><span class="line"><span class="number">17</span>:<span class="number">17</span>:<span class="number">30</span>      <span class="number">20</span>  <span class="number">100.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span></span><br><span class="line"><span class="number">17</span>:<span class="number">17</span>:<span class="number">30</span>      <span class="number">21</span>  <span class="number">100.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span></span><br><span class="line"><span class="number">17</span>:<span class="number">17</span>:<span class="number">30</span>      <span class="number">22</span>  <span class="number">100.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span></span><br><span class="line"><span class="number">17</span>:<span class="number">17</span>:<span class="number">30</span>      <span class="number">23</span>  <span class="number">100.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span></span><br><span class="line"></span><br><span class="line">[<span class="type">zorro</span>@<span class="type">zorrozou</span>-<span class="type">pc</span> ~/<span class="type">test</span>]<span class="variable">$</span> time ./prime_thread_zorro &amp;&gt; /dev/null</span><br><span class="line"></span><br><span class="line">real<span class="number">0</span>m8.<span class="number">937</span>s</span><br><span class="line">user<span class="number">3</span>m32.<span class="number">190</span>s</span><br><span class="line">sys<span class="number">0</span>m0.<span class="number">225</span>s</span><br></pre></td></tr></table></figure><p>如显示，cpu我们是独占的。那么什么时候有隔离效果呢？是系统中有别的cgroup也要占用cpu的时候，就能看出效果了。比如此时我们再添加一个jerry，shares值也配置为1000，并且让jerry组一直有占用cpu的进程在运行。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">group</span> jerry &#123;</span><br><span class="line">    cpu &#123;</span><br><span class="line">            cpu.shares = <span class="string">&quot;1000&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">top - <span class="number">17</span>:<span class="number">24</span>:<span class="number">26</span> up <span class="number">1</span> day, <span class="number">5</span> min,  <span class="number">2</span> users,  load average: <span class="number">41.34</span>, <span class="number">16.17</span>, <span class="number">8.17</span></span><br><span class="line">Tasks: <span class="number">350</span> total,   <span class="number">2</span> running, <span class="number">348</span> sleeping,   <span class="number">0</span> stopped,   <span class="number">0</span> zombie</span><br><span class="line">Cpu0  :<span class="number">100.0</span>%us,  <span class="number">0.0</span>%sy,  <span class="number">0.0</span>%<span class="built_in">ni</span>,  <span class="number">0.0</span>%id,  <span class="number">0.0</span>%wa,  <span class="number">0.0</span>%hi,  <span class="number">0.0</span>%<span class="built_in">si</span>,  <span class="number">0.0</span>%st</span><br><span class="line">Cpu1  : <span class="number">99.7</span>%us,  <span class="number">0.3</span>%sy,  <span class="number">0.0</span>%<span class="built_in">ni</span>,  <span class="number">0.0</span>%id,  <span class="number">0.0</span>%wa,  <span class="number">0.0</span>%hi,  <span class="number">0.0</span>%<span class="built_in">si</span>,  <span class="number">0.0</span>%st</span><br><span class="line">Cpu2  :<span class="number">100.0</span>%us,  <span class="number">0.0</span>%sy,  <span class="number">0.0</span>%<span class="built_in">ni</span>,  <span class="number">0.0</span>%id,  <span class="number">0.0</span>%wa,  <span class="number">0.0</span>%hi,  <span class="number">0.0</span>%<span class="built_in">si</span>,  <span class="number">0.0</span>%st</span><br><span class="line">Cpu3  : <span class="number">99.7</span>%us,  <span class="number">0.3</span>%sy,  <span class="number">0.0</span>%<span class="built_in">ni</span>,  <span class="number">0.0</span>%id,  <span class="number">0.0</span>%wa,  <span class="number">0.0</span>%hi,  <span class="number">0.0</span>%<span class="built_in">si</span>,  <span class="number">0.0</span>%st</span><br><span class="line">Cpu4  : <span class="number">99.7</span>%us,  <span class="number">0.3</span>%sy,  <span class="number">0.0</span>%<span class="built_in">ni</span>,  <span class="number">0.0</span>%id,  <span class="number">0.0</span>%wa,  <span class="number">0.0</span>%hi,  <span class="number">0.0</span>%<span class="built_in">si</span>,  <span class="number">0.0</span>%st</span><br><span class="line">Cpu5  :<span class="number">100.0</span>%us,  <span class="number">0.0</span>%sy,  <span class="number">0.0</span>%<span class="built_in">ni</span>,  <span class="number">0.0</span>%id,  <span class="number">0.0</span>%wa,  <span class="number">0.0</span>%hi,  <span class="number">0.0</span>%<span class="built_in">si</span>,  <span class="number">0.0</span>%st</span><br><span class="line">Cpu6  : <span class="number">99.7</span>%us,  <span class="number">0.3</span>%sy,  <span class="number">0.0</span>%<span class="built_in">ni</span>,  <span class="number">0.0</span>%id,  <span class="number">0.0</span>%wa,  <span class="number">0.0</span>%hi,  <span class="number">0.0</span>%<span class="built_in">si</span>,  <span class="number">0.0</span>%st</span><br><span class="line">Cpu7  :<span class="number">100.0</span>%us,  <span class="number">0.0</span>%sy,  <span class="number">0.0</span>%<span class="built_in">ni</span>,  <span class="number">0.0</span>%id,  <span class="number">0.0</span>%wa,  <span class="number">0.0</span>%hi,  <span class="number">0.0</span>%<span class="built_in">si</span>,  <span class="number">0.0</span>%st</span><br><span class="line">Cpu8  :<span class="number">100.0</span>%us,  <span class="number">0.0</span>%sy,  <span class="number">0.0</span>%<span class="built_in">ni</span>,  <span class="number">0.0</span>%id,  <span class="number">0.0</span>%wa,  <span class="number">0.0</span>%hi,  <span class="number">0.0</span>%<span class="built_in">si</span>,  <span class="number">0.0</span>%st</span><br><span class="line">Cpu9  : <span class="number">99.7</span>%us,  <span class="number">0.0</span>%sy,  <span class="number">0.0</span>%<span class="built_in">ni</span>,  <span class="number">0.0</span>%id,  <span class="number">0.0</span>%wa,  <span class="number">0.3</span>%hi,  <span class="number">0.0</span>%<span class="built_in">si</span>,  <span class="number">0.0</span>%st</span><br><span class="line">Cpu10 :<span class="number">100.0</span>%us,  <span class="number">0.0</span>%sy,  <span class="number">0.0</span>%<span class="built_in">ni</span>,  <span class="number">0.0</span>%id,  <span class="number">0.0</span>%wa,  <span class="number">0.0</span>%hi,  <span class="number">0.0</span>%<span class="built_in">si</span>,  <span class="number">0.0</span>%st</span><br><span class="line">Cpu11 : <span class="number">99.7</span>%us,  <span class="number">0.3</span>%sy,  <span class="number">0.0</span>%<span class="built_in">ni</span>,  <span class="number">0.0</span>%id,  <span class="number">0.0</span>%wa,  <span class="number">0.0</span>%hi,  <span class="number">0.0</span>%<span class="built_in">si</span>,  <span class="number">0.0</span>%st</span><br><span class="line">Cpu12 :<span class="number">100.0</span>%us,  <span class="number">0.0</span>%sy,  <span class="number">0.0</span>%<span class="built_in">ni</span>,  <span class="number">0.0</span>%id,  <span class="number">0.0</span>%wa,  <span class="number">0.0</span>%hi,  <span class="number">0.0</span>%<span class="built_in">si</span>,  <span class="number">0.0</span>%st</span><br><span class="line">Cpu13 : <span class="number">99.7</span>%us,  <span class="number">0.3</span>%sy,  <span class="number">0.0</span>%<span class="built_in">ni</span>,  <span class="number">0.0</span>%id,  <span class="number">0.0</span>%wa,  <span class="number">0.0</span>%hi,  <span class="number">0.0</span>%<span class="built_in">si</span>,  <span class="number">0.0</span>%st</span><br><span class="line">Cpu14 :<span class="number">100.0</span>%us,  <span class="number">0.0</span>%sy,  <span class="number">0.0</span>%<span class="built_in">ni</span>,  <span class="number">0.0</span>%id,  <span class="number">0.0</span>%wa,  <span class="number">0.0</span>%hi,  <span class="number">0.0</span>%<span class="built_in">si</span>,  <span class="number">0.0</span>%st</span><br><span class="line">Cpu15 :<span class="number">100.0</span>%us,  <span class="number">0.0</span>%sy,  <span class="number">0.0</span>%<span class="built_in">ni</span>,  <span class="number">0.0</span>%id,  <span class="number">0.0</span>%wa,  <span class="number">0.0</span>%hi,  <span class="number">0.0</span>%<span class="built_in">si</span>,  <span class="number">0.0</span>%st</span><br><span class="line">Cpu16 :<span class="number">100.0</span>%us,  <span class="number">0.0</span>%sy,  <span class="number">0.0</span>%<span class="built_in">ni</span>,  <span class="number">0.0</span>%id,  <span class="number">0.0</span>%wa,  <span class="number">0.0</span>%hi,  <span class="number">0.0</span>%<span class="built_in">si</span>,  <span class="number">0.0</span>%st</span><br><span class="line">Cpu17 :<span class="number">100.0</span>%us,  <span class="number">0.0</span>%sy,  <span class="number">0.0</span>%<span class="built_in">ni</span>,  <span class="number">0.0</span>%id,  <span class="number">0.0</span>%wa,  <span class="number">0.0</span>%hi,  <span class="number">0.0</span>%<span class="built_in">si</span>,  <span class="number">0.0</span>%st</span><br><span class="line">Cpu18 : <span class="number">99.3</span>%us,  <span class="number">0.7</span>%sy,  <span class="number">0.0</span>%<span class="built_in">ni</span>,  <span class="number">0.0</span>%id,  <span class="number">0.0</span>%wa,  <span class="number">0.0</span>%hi,  <span class="number">0.0</span>%<span class="built_in">si</span>,  <span class="number">0.0</span>%st</span><br><span class="line">Cpu19 :<span class="number">100.0</span>%us,  <span class="number">0.0</span>%sy,  <span class="number">0.0</span>%<span class="built_in">ni</span>,  <span class="number">0.0</span>%id,  <span class="number">0.0</span>%wa,  <span class="number">0.0</span>%hi,  <span class="number">0.0</span>%<span class="built_in">si</span>,  <span class="number">0.0</span>%st</span><br><span class="line">Cpu20 :<span class="number">100.0</span>%us,  <span class="number">0.0</span>%sy,  <span class="number">0.0</span>%<span class="built_in">ni</span>,  <span class="number">0.0</span>%id,  <span class="number">0.0</span>%wa,  <span class="number">0.0</span>%hi,  <span class="number">0.0</span>%<span class="built_in">si</span>,  <span class="number">0.0</span>%st</span><br><span class="line">Cpu21 : <span class="number">99.7</span>%us,  <span class="number">0.3</span>%sy,  <span class="number">0.0</span>%<span class="built_in">ni</span>,  <span class="number">0.0</span>%id,  <span class="number">0.0</span>%wa,  <span class="number">0.0</span>%hi,  <span class="number">0.0</span>%<span class="built_in">si</span>,  <span class="number">0.0</span>%st</span><br><span class="line">Cpu22 :<span class="number">100.0</span>%us,  <span class="number">0.0</span>%sy,  <span class="number">0.0</span>%<span class="built_in">ni</span>,  <span class="number">0.0</span>%id,  <span class="number">0.0</span>%wa,  <span class="number">0.0</span>%hi,  <span class="number">0.0</span>%<span class="built_in">si</span>,  <span class="number">0.0</span>%st</span><br><span class="line">Cpu23 :<span class="number">100.0</span>%us,  <span class="number">0.0</span>%sy,  <span class="number">0.0</span>%<span class="built_in">ni</span>,  <span class="number">0.0</span>%id,  <span class="number">0.0</span>%wa,  <span class="number">0.0</span>%hi,  <span class="number">0.0</span>%<span class="built_in">si</span>,  <span class="number">0.0</span>%st</span><br><span class="line">Mem:  <span class="number">131904480</span>k total,  <span class="number">4938020</span>k used, <span class="number">126966460</span>k free,   <span class="number">136140</span>k buffers</span><br><span class="line">Swap:  <span class="number">2088956</span>k total,        <span class="number">0</span>k used,  <span class="number">2088956</span>k free,  <span class="number">3700480</span>k cached</span><br><span class="line"></span><br><span class="line">  PID USER      PR  <span class="built_in">NI</span>  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND                                                                                                                                               </span><br><span class="line"><span class="number">13945</span> jerry     <span class="number">20</span>   <span class="number">0</span>  <span class="number">390</span>m  <span class="number">872</span>  <span class="number">392</span> S <span class="number">2397.2</span>  <span class="number">0.0</span>  <span class="number">48</span>:<span class="number">42.54</span> jerry                                               </span><br></pre></td></tr></table></figure><p>我们以jerry用户身份执行了一个进程一直100%占用cpu，从上面的显示可以看到，这个进程占用了2400%的cpu，是因为每个cpu核心算100%，24个核心就是2400%。此时我们再以zorro身份执行筛质数的程序，并察看这个程序占用cpu的百分比：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">top - <span class="number">19</span>:<span class="number">44</span>:<span class="number">11</span> up <span class="number">1</span> day,  <span class="number">2</span>:<span class="number">25</span>,  <span class="number">3</span> users,  load average: <span class="number">60.91</span>, <span class="number">50.92</span>, <span class="number">48.85</span></span><br><span class="line">Tasks: <span class="number">336</span> total,   <span class="number">3</span> running, <span class="number">333</span> sleeping,   <span class="number">0</span> stopped,   <span class="number">0</span> zombie</span><br><span class="line">Cpu0  : <span class="number">99.7</span>%us,  <span class="number">0.3</span>%sy,  <span class="number">0.0</span>%<span class="built_in">ni</span>,  <span class="number">0.0</span>%id,  <span class="number">0.0</span>%wa,  <span class="number">0.0</span>%hi,  <span class="number">0.0</span>%<span class="built_in">si</span>,  <span class="number">0.0</span>%st</span><br><span class="line">Cpu1  :<span class="number">100.0</span>%us,  <span class="number">0.0</span>%sy,  <span class="number">0.0</span>%<span class="built_in">ni</span>,  <span class="number">0.0</span>%id,  <span class="number">0.0</span>%wa,  <span class="number">0.0</span>%hi,  <span class="number">0.0</span>%<span class="built_in">si</span>,  <span class="number">0.0</span>%st</span><br><span class="line">Cpu2  : <span class="number">99.7</span>%us,  <span class="number">0.3</span>%sy,  <span class="number">0.0</span>%<span class="built_in">ni</span>,  <span class="number">0.0</span>%id,  <span class="number">0.0</span>%wa,  <span class="number">0.0</span>%hi,  <span class="number">0.0</span>%<span class="built_in">si</span>,  <span class="number">0.0</span>%st</span><br><span class="line">Cpu3  :<span class="number">100.0</span>%us,  <span class="number">0.0</span>%sy,  <span class="number">0.0</span>%<span class="built_in">ni</span>,  <span class="number">0.0</span>%id,  <span class="number">0.0</span>%wa,  <span class="number">0.0</span>%hi,  <span class="number">0.0</span>%<span class="built_in">si</span>,  <span class="number">0.0</span>%st</span><br><span class="line">Cpu4  :<span class="number">100.0</span>%us,  <span class="number">0.0</span>%sy,  <span class="number">0.0</span>%<span class="built_in">ni</span>,  <span class="number">0.0</span>%id,  <span class="number">0.0</span>%wa,  <span class="number">0.0</span>%hi,  <span class="number">0.0</span>%<span class="built_in">si</span>,  <span class="number">0.0</span>%st</span><br><span class="line">Cpu5  :<span class="number">100.0</span>%us,  <span class="number">0.0</span>%sy,  <span class="number">0.0</span>%<span class="built_in">ni</span>,  <span class="number">0.0</span>%id,  <span class="number">0.0</span>%wa,  <span class="number">0.0</span>%hi,  <span class="number">0.0</span>%<span class="built_in">si</span>,  <span class="number">0.0</span>%st</span><br><span class="line">Cpu6  :<span class="number">100.0</span>%us,  <span class="number">0.0</span>%sy,  <span class="number">0.0</span>%<span class="built_in">ni</span>,  <span class="number">0.0</span>%id,  <span class="number">0.0</span>%wa,  <span class="number">0.0</span>%hi,  <span class="number">0.0</span>%<span class="built_in">si</span>,  <span class="number">0.0</span>%st</span><br><span class="line">Cpu7  :<span class="number">100.0</span>%us,  <span class="number">0.0</span>%sy,  <span class="number">0.0</span>%<span class="built_in">ni</span>,  <span class="number">0.0</span>%id,  <span class="number">0.0</span>%wa,  <span class="number">0.0</span>%hi,  <span class="number">0.0</span>%<span class="built_in">si</span>,  <span class="number">0.0</span>%st</span><br><span class="line">Cpu8  :<span class="number">100.0</span>%us,  <span class="number">0.0</span>%sy,  <span class="number">0.0</span>%<span class="built_in">ni</span>,  <span class="number">0.0</span>%id,  <span class="number">0.0</span>%wa,  <span class="number">0.0</span>%hi,  <span class="number">0.0</span>%<span class="built_in">si</span>,  <span class="number">0.0</span>%st</span><br><span class="line">Cpu9  :<span class="number">100.0</span>%us,  <span class="number">0.0</span>%sy,  <span class="number">0.0</span>%<span class="built_in">ni</span>,  <span class="number">0.0</span>%id,  <span class="number">0.0</span>%wa,  <span class="number">0.0</span>%hi,  <span class="number">0.0</span>%<span class="built_in">si</span>,  <span class="number">0.0</span>%st</span><br><span class="line">Cpu10 :<span class="number">100.0</span>%us,  <span class="number">0.0</span>%sy,  <span class="number">0.0</span>%<span class="built_in">ni</span>,  <span class="number">0.0</span>%id,  <span class="number">0.0</span>%wa,  <span class="number">0.0</span>%hi,  <span class="number">0.0</span>%<span class="built_in">si</span>,  <span class="number">0.0</span>%st</span><br><span class="line">Cpu11 : <span class="number">99.7</span>%us,  <span class="number">0.3</span>%sy,  <span class="number">0.0</span>%<span class="built_in">ni</span>,  <span class="number">0.0</span>%id,  <span class="number">0.0</span>%wa,  <span class="number">0.0</span>%hi,  <span class="number">0.0</span>%<span class="built_in">si</span>,  <span class="number">0.0</span>%st</span><br><span class="line">Cpu12 : <span class="number">99.7</span>%us,  <span class="number">0.3</span>%sy,  <span class="number">0.0</span>%<span class="built_in">ni</span>,  <span class="number">0.0</span>%id,  <span class="number">0.0</span>%wa,  <span class="number">0.0</span>%hi,  <span class="number">0.0</span>%<span class="built_in">si</span>,  <span class="number">0.0</span>%st</span><br><span class="line">Cpu13 :<span class="number">100.0</span>%us,  <span class="number">0.0</span>%sy,  <span class="number">0.0</span>%<span class="built_in">ni</span>,  <span class="number">0.0</span>%id,  <span class="number">0.0</span>%wa,  <span class="number">0.0</span>%hi,  <span class="number">0.0</span>%<span class="built_in">si</span>,  <span class="number">0.0</span>%st</span><br><span class="line">Cpu14 : <span class="number">99.7</span>%us,  <span class="number">0.0</span>%sy,  <span class="number">0.0</span>%<span class="built_in">ni</span>,  <span class="number">0.0</span>%id,  <span class="number">0.0</span>%wa,  <span class="number">0.3</span>%hi,  <span class="number">0.0</span>%<span class="built_in">si</span>,  <span class="number">0.0</span>%st</span><br><span class="line">Cpu15 : <span class="number">99.7</span>%us,  <span class="number">0.3</span>%sy,  <span class="number">0.0</span>%<span class="built_in">ni</span>,  <span class="number">0.0</span>%id,  <span class="number">0.0</span>%wa,  <span class="number">0.0</span>%hi,  <span class="number">0.0</span>%<span class="built_in">si</span>,  <span class="number">0.0</span>%st</span><br><span class="line">Cpu16 :<span class="number">100.0</span>%us,  <span class="number">0.0</span>%sy,  <span class="number">0.0</span>%<span class="built_in">ni</span>,  <span class="number">0.0</span>%id,  <span class="number">0.0</span>%wa,  <span class="number">0.0</span>%hi,  <span class="number">0.0</span>%<span class="built_in">si</span>,  <span class="number">0.0</span>%st</span><br><span class="line">Cpu17 : <span class="number">99.7</span>%us,  <span class="number">0.3</span>%sy,  <span class="number">0.0</span>%<span class="built_in">ni</span>,  <span class="number">0.0</span>%id,  <span class="number">0.0</span>%wa,  <span class="number">0.0</span>%hi,  <span class="number">0.0</span>%<span class="built_in">si</span>,  <span class="number">0.0</span>%st</span><br><span class="line">Cpu18 :<span class="number">100.0</span>%us,  <span class="number">0.0</span>%sy,  <span class="number">0.0</span>%<span class="built_in">ni</span>,  <span class="number">0.0</span>%id,  <span class="number">0.0</span>%wa,  <span class="number">0.0</span>%hi,  <span class="number">0.0</span>%<span class="built_in">si</span>,  <span class="number">0.0</span>%st</span><br><span class="line">Cpu19 :<span class="number">100.0</span>%us,  <span class="number">0.0</span>%sy,  <span class="number">0.0</span>%<span class="built_in">ni</span>,  <span class="number">0.0</span>%id,  <span class="number">0.0</span>%wa,  <span class="number">0.0</span>%hi,  <span class="number">0.0</span>%<span class="built_in">si</span>,  <span class="number">0.0</span>%st</span><br><span class="line">Cpu20 :<span class="number">100.0</span>%us,  <span class="number">0.0</span>%sy,  <span class="number">0.0</span>%<span class="built_in">ni</span>,  <span class="number">0.0</span>%id,  <span class="number">0.0</span>%wa,  <span class="number">0.0</span>%hi,  <span class="number">0.0</span>%<span class="built_in">si</span>,  <span class="number">0.0</span>%st</span><br><span class="line">Cpu21 :<span class="number">100.0</span>%us,  <span class="number">0.0</span>%sy,  <span class="number">0.0</span>%<span class="built_in">ni</span>,  <span class="number">0.0</span>%id,  <span class="number">0.0</span>%wa,  <span class="number">0.0</span>%hi,  <span class="number">0.0</span>%<span class="built_in">si</span>,  <span class="number">0.0</span>%st</span><br><span class="line">Cpu22 : <span class="number">99.7</span>%us,  <span class="number">0.3</span>%sy,  <span class="number">0.0</span>%<span class="built_in">ni</span>,  <span class="number">0.0</span>%id,  <span class="number">0.0</span>%wa,  <span class="number">0.0</span>%hi,  <span class="number">0.0</span>%<span class="built_in">si</span>,  <span class="number">0.0</span>%st</span><br><span class="line">Cpu23 :<span class="number">100.0</span>%us,  <span class="number">0.0</span>%sy,  <span class="number">0.0</span>%<span class="built_in">ni</span>,  <span class="number">0.0</span>%id,  <span class="number">0.0</span>%wa,  <span class="number">0.0</span>%hi,  <span class="number">0.0</span>%<span class="built_in">si</span>,  <span class="number">0.0</span>%st</span><br><span class="line">Mem:  <span class="number">131904480</span>k total,  <span class="number">1471772</span>k used, <span class="number">130432708</span>k free,   <span class="number">144216</span>k buffers</span><br><span class="line">Swap:  <span class="number">2088956</span>k total,        <span class="number">0</span>k used,  <span class="number">2088956</span>k free,   <span class="number">322404</span>k cached</span><br><span class="line"></span><br><span class="line">  PID USER      PR  <span class="built_in">NI</span>  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND                                                                                                                                               </span><br><span class="line"><span class="number">13945</span> jerry     <span class="number">20</span>   <span class="number">0</span>  <span class="number">390</span>m  <span class="number">872</span>  <span class="number">392</span> S <span class="number">1200.3</span>  <span class="number">0.0</span>   <span class="number">3383</span>:<span class="number">04</span> jerry                                                                                                                                               </span><br><span class="line"> <span class="number">9311</span> zorro     <span class="number">20</span>   <span class="number">0</span>  <span class="number">390</span>m  <span class="number">872</span>  <span class="number">392</span> <span class="built_in">R</span> <span class="number">1197.0</span>  <span class="number">0.0</span>   <span class="number">0</span>:<span class="number">51.56</span> prime_thread_zo                        </span><br></pre></td></tr></table></figure><p>通过top我们可以看到，以zorro用户身份执行的进程和jerry进程平分了cpu，每人50%。zorro筛质数执行的时间为：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">zorro</span>@<span class="type">zorrozou</span>-<span class="type">pc</span> ~/<span class="type">test</span>]<span class="variable">$</span> time ./prime_thread_zorro &amp;&gt; /dev/null</span><br><span class="line"></span><br><span class="line">real<span class="number">0</span>m15.<span class="number">152</span>s</span><br><span class="line">user<span class="number">2</span>m58.<span class="number">637</span>s</span><br><span class="line">sys<span class="number">0</span>m0.<span class="number">220</span>s</span><br><span class="line">[<span class="type">zorro</span>@<span class="type">zorrozou</span>-<span class="type">pc</span> ~/<span class="type">test</span>]<span class="variable">$</span> time ./prime_thread_zorro &amp;&gt; /dev/null</span><br><span class="line"></span><br><span class="line">real<span class="number">0</span>m15.<span class="number">465</span>s</span><br><span class="line">user<span class="number">3</span>m0.<span class="number">706</span>s</span><br><span class="line">sys<span class="number">0</span>m0.<span class="number">221</span>s</span><br></pre></td></tr></table></figure><p>根据这个时间看起来，基本与通过cpuquota方式分配50%的cpu时间以及通过cpuset方式分配12个核心的情况相当，而且效率还稍微高一些。当然我要说明的是，这里几乎两秒左右的效率的提高并不具备很大的参考性，它与jerry进程执行的运算是有很大相关性的。此时jerry进程执行的是一个多线程的while死循环，占满所有cpu跑。当我们把jerry进程执行的内容同样变成筛质数的时候，zorro用户的进程执行效率的参考值就比较标准了：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">zorro</span>@<span class="type">zorrozou</span>-<span class="type">pc</span> ~/<span class="type">test</span>]<span class="variable">$</span> time ./prime_thread_zorro &amp;&gt; /dev/null</span><br><span class="line"></span><br><span class="line">real<span class="number">0</span>m17.<span class="number">521</span>s</span><br><span class="line">user<span class="number">3</span>m32.<span class="number">684</span>s</span><br><span class="line">sys<span class="number">0</span>m0.<span class="number">254</span>s</span><br><span class="line">[<span class="type">zorro</span>@<span class="type">zorrozou</span>-<span class="type">pc</span> ~/<span class="type">test</span>]<span class="variable">$</span> time ./prime_thread_zorro &amp;&gt; /dev/null</span><br><span class="line"></span><br><span class="line">real<span class="number">0</span>m17.<span class="number">597</span>s</span><br><span class="line">user<span class="number">3</span>m32.<span class="number">682</span>s</span><br><span class="line">sys<span class="number">0</span>m0.<span class="number">253</span>s</span><br></pre></td></tr></table></figure><p>如程序执行显示，执行效率基本与cpuset和cpuquota相当。</p><blockquote><p>这又引发了另一个问题请大家思考：为什么jerry用户执行的运算的逻辑不同会影响zorro用户的运算效率？</p></blockquote><p>我们可以将刚才cpuset和cpuquota的对比列表加入cpushare一列来一起对比了，为了方便参考，我们都以cpuset为基准进行比较：</p><table><thead><tr><th>shares zorro&#x2F;shares jerry（核心数）</th><th>cpuset realtime</th><th><strong>cpushare realtime</strong></th><th>cpuquota realtime</th></tr></thead><tbody><tr><td>2000&#x2F;22000(2)</td><td>1m46.557s</td><td><strong>1m41.691s</strong></td><td>1m36.786s</td></tr><tr><td>4000&#x2F;20000(4)</td><td>0m53.271s</td><td><strong>0m51.801s</strong></td><td>0m51.067s</td></tr><tr><td>6000&#x2F;18000(6)</td><td>0m35.528s</td><td><strong>0m35.152s</strong></td><td>0m34.539s</td></tr><tr><td>8000&#x2F;16000(8)</td><td>0m26.643s</td><td><strong>0m26.372s</strong></td><td>0m25.923s</td></tr><tr><td>12000&#x2F;12000(12)</td><td>0m17.839s</td><td><strong>0m17.694s</strong></td><td>0m17.347s</td></tr><tr><td>16000&#x2F;8000(16)</td><td>0m13.384s</td><td><strong>0m13.388s</strong></td><td>0m13.015s</td></tr><tr><td>24000&#x2F;0(24)</td><td>0m8.972s</td><td><strong>0m8.943s</strong></td><td>0m8.932s</td></tr></tbody></table><p>请注意一个问题，由于cpushares无法像cpuquota或者cpuset那样只执行zorro用户的进程，所以在进行cpushares测试的时候，必须让jerry用户同时执行相同的筛质数程序，才能使两个用户分别分到相应比例的cpu时间。这样可能造成本轮测试结果的不准确。通过对比看到，当比率分别都配置了相当于两个核心的计算能力的情况下，本轮测试是cpuquota方式消耗了1m36.786s稍快一些。为了保证相对公平的环境作为参照，我们将重新对这轮测试进行数据采集，这次在cpuset和cpuquota的压测时，都用jerry用户执行一个干扰程序作为参照，重新分析数据。当然，cpushares的测试数据就不必重新测试了：</p><table><thead><tr><th>shares zorro&#x2F;shares jerry（核心数）</th><th>cpuset realtime</th><th>cpushare realtime</th><th>cpuquota realtime</th></tr></thead><tbody><tr><td>2000&#x2F;22000(2)</td><td>1m46.758s</td><td>1m41.691s</td><td>1m42.341s</td></tr><tr><td>4000&#x2F;20000(4)</td><td>0m53.340s</td><td>0m51.801s</td><td>0m51.512s</td></tr><tr><td>6000&#x2F;18000(6)</td><td>0m35.525s</td><td>0m35.152s</td><td>0m34.392s</td></tr><tr><td>8000&#x2F;16000(8)</td><td>0m26.738s</td><td>0m26.372s</td><td>0m25.772s</td></tr><tr><td>12000&#x2F;12000(12)</td><td>0m17.793s</td><td>0m17.694s</td><td>0m17.256s</td></tr><tr><td>16000&#x2F;8000(16)</td><td>0m13.366s</td><td>0m13.388s</td><td>0m13.155s</td></tr><tr><td>24000&#x2F;0(24)</td><td>0m8.930s</td><td>0m8.943s</td><td>0m8.939s</td></tr></tbody></table><p>至此，cgroup中针对cpu的三种资源隔离都介绍完了，分析我们的测试数据可以得出一些结论：</p><ol><li>三种cpu资源隔离的效果基本相同，在资源分配比率相同的情况下，它们都提供了差不多相同的计算能力。</li><li>cpuset隔离方式是以分配核心的方式进行资源隔离，可以提供的资源分配最小粒度是核心，不能提供更细粒度的资源隔离，但是隔离之后运算的相互影响最低。需要注意的是在服务器开启了超线程的情况下，要小心选择分配的核心，否则不同cgroup间的性能差距会比较大。</li><li>cpuquota给我们提供了一种比cpuset可以更细粒度的分配资源的方式，并且保证了cgroup使用cpu比率的上限，相当于对cpu资源的硬限制。</li><li>cpushares给我们提供了一种可以按权重比率弹性分配cpu时间资源的手段：当cpu空闲的时候，某一个要占用cpu的cgroup可以完全占用剩余cpu时间，充分利用资源。而当其他cgroup需要占用的时候，每个cgroup都能保证其最低占用时间比率，达到资源隔离的效果。</li></ol><p>大家可以根据这三种不同隔离手段特点，针对自己的环境来选择不同的方式进行cpu资源的隔离。当然，这些手段也可以混合使用，以达到更好的QOS效果。</p><p>但是可是but，这就完了么？<br>显然并没有。。。。。。</p><p>以上测试只针对了一种计算场景，这种场景在如此的简单的情况下，影响测试结果的条件已经很复杂了。如果是其他情况呢？我们线上真正跑业务的环境会这么单纯么？显然不会。我们不可能针对所有场景得出结论，想要找到适用于自己场景的隔离方式，还是需要在自己的环境中进行充分测试。在此只能介绍方法，以及针对一个场景的参考数据，仅此而已。单就这一个测试来说，它仍然不够全面，无法体现出内核cpu资源隔离的真正面目。众所周知，cpu使用主要分两个部分，user和sys。上面这个测试，由于测试用例的选择，只关注了user的使用。那么如果我们的sys占用较多会变成什么样呢？</p><h3 id="CPU资源隔离在sys较高的情况下是什么表现？"><a href="#CPU资源隔离在sys较高的情况下是什么表现？" class="headerlink" title="CPU资源隔离在sys较高的情况下是什么表现？"></a>CPU资源隔离在sys较高的情况下是什么表现？</h3><h4 id="内核资源不冲突的情况"><a href="#内核资源不冲突的情况" class="headerlink" title="内核资源不冲突的情况"></a>内核资源不冲突的情况</h4><p>首先我们简单说一下什么叫sys较高。先看mpstat命令的输出：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">zorrozou</span>-<span class="type">pc</span> ~]<span class="comment"># mpstat 1</span></span><br><span class="line">Linux <span class="number">3.10</span>.<span class="number">90</span><span class="literal">-1-linux</span> (zorrozou<span class="literal">-pc</span>) <span class="number">12</span>/<span class="number">24</span>/<span class="number">15</span> _x86_64_(<span class="number">24</span> CPU)</span><br><span class="line"></span><br><span class="line"><span class="number">16</span>:<span class="number">08</span>:<span class="number">52</span>     CPU    %usr   %nice    %sys %iowait    %irq   %soft  %steal  %guest  %gnice   %idle</span><br><span class="line"><span class="number">16</span>:<span class="number">08</span>:<span class="number">53</span>     all    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>  <span class="number">100.00</span></span><br><span class="line"><span class="number">16</span>:<span class="number">08</span>:<span class="number">54</span>     all    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.04</span>    <span class="number">0.00</span>    <span class="number">0.04</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>   <span class="number">99.92</span></span><br><span class="line"><span class="number">16</span>:<span class="number">08</span>:<span class="number">55</span>     all    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>  <span class="number">100.00</span></span><br><span class="line"><span class="number">16</span>:<span class="number">08</span>:<span class="number">56</span>     all    <span class="number">0.04</span>    <span class="number">0.00</span>    <span class="number">0.04</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>   <span class="number">99.92</span></span><br><span class="line"><span class="number">16</span>:<span class="number">08</span>:<span class="number">57</span>     all    <span class="number">0.04</span>    <span class="number">0.00</span>    <span class="number">0.04</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>   <span class="number">99.92</span></span><br><span class="line"><span class="number">16</span>:<span class="number">08</span>:<span class="number">58</span>     all    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.04</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>   <span class="number">99.96</span></span><br><span class="line"></span><br><span class="line">Average:     all    <span class="number">0.01</span>    <span class="number">0.00</span>    <span class="number">0.03</span>    <span class="number">0.00</span>    <span class="number">0.01</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>   <span class="number">99.95</span></span><br></pre></td></tr></table></figure><p>这里面我们看到cpu的使用比率分了很多栏目，我们一般评估进程占用CPU的时候，最重要的是％user和％sys。％sys一般是指，进程陷入内核执行时所占用的时间，这些时间是内核在工作。常见的情况时，进程执行过程中之行了某个系统调用，而陷入内核态执行所产生的cpu占用。</p><p>所以在这一部分，我们需要重新提供一个测试用例，让sys部分的cpu占用变高。基于筛质数进行改造即可，我们这次让每个筛质数的线程，在做运算之前都用非阻塞方式open()打开一个文件，每次拿到一个数运算的时候，循环中都用系统调用read()读一下文件。以此来增加sys占用时间的比率。先来改程序：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;strings.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NUM 48</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> START 1010001</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> END 1020000</span></span><br><span class="line"></span><br><span class="line"><span class="type">pthread_mutex_t</span> mutex = PTHREAD_MUTEX_INITIALIZER;</span><br><span class="line"><span class="type">pthread_cond_t</span> cond = PTHREAD_COND_INITIALIZER;</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *<span class="title function_">prime</span><span class="params">(<span class="type">void</span> *p)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> n, i, flag;</span><br><span class="line"><span class="type">int</span> num, fd, ret;</span><br><span class="line"><span class="type">char</span> name[BUFSIZ];</span><br><span class="line"><span class="type">char</span> buf[BUFSIZ];</span><br><span class="line"></span><br><span class="line">bzero(name, BUFSIZ);</span><br><span class="line"></span><br><span class="line">num = (<span class="type">int</span> *)p;</span><br><span class="line"><span class="built_in">sprintf</span>(name, <span class="string">&quot;/tmp/tmpfilezorro%d&quot;</span>, num);</span><br><span class="line"></span><br><span class="line">fd = open(name, O_RDWR|O_CREAT|O_TRUNC|O_NONBLOCK , <span class="number">0644</span>);</span><br><span class="line"><span class="keyword">if</span> (fd &lt; <span class="number">0</span>) &#123;</span><br><span class="line">perror(<span class="string">&quot;open()&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (pthread_mutex_lock(&amp;mutex) != <span class="number">0</span>) &#123;</span><br><span class="line">perror(<span class="string">&quot;pthread_mutex_lock()&quot;</span>);</span><br><span class="line">pthread_exit(<span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (count == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (pthread_cond_wait(&amp;cond, &amp;mutex) != <span class="number">0</span>) &#123;</span><br><span class="line">perror(<span class="string">&quot;pthread_cond_wait()&quot;</span>);</span><br><span class="line">pthread_exit(<span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (count == <span class="number">-1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (pthread_mutex_unlock(&amp;mutex) != <span class="number">0</span>) &#123;</span><br><span class="line">perror(<span class="string">&quot;pthread_mutex_unlock()&quot;</span>);</span><br><span class="line">pthread_exit(<span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">n = count;</span><br><span class="line">count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (pthread_cond_broadcast(&amp;cond) != <span class="number">0</span>) &#123;</span><br><span class="line">perror(<span class="string">&quot;pthread_cond_broadcast()&quot;</span>);</span><br><span class="line">pthread_exit(<span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (pthread_mutex_unlock(&amp;mutex) != <span class="number">0</span>) &#123;</span><br><span class="line">perror(<span class="string">&quot;pthread_mutex_unlock()&quot;</span>);</span><br><span class="line">pthread_exit(<span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line">flag = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">2</span>;i&lt;n/<span class="number">2</span>;i++) &#123;</span><br><span class="line">ret = read(fd, buf, BUFSIZ);</span><br><span class="line"><span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">perror(<span class="string">&quot;read()&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (n%i == <span class="number">0</span>) &#123;</span><br><span class="line">flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (flag == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d is a prime form %d!\n&quot;</span>, n, pthread_self());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">close(fd);</span><br><span class="line">pthread_exit(<span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">pthread_t</span> tid[NUM];</span><br><span class="line"><span class="type">int</span> ret, i, num;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;NUM;i++) &#123;</span><br><span class="line">ret = pthread_create(&amp;tid[i], <span class="literal">NULL</span>, prime, (<span class="type">void</span> *)i);</span><br><span class="line"><span class="keyword">if</span> (ret != <span class="number">0</span>) &#123;</span><br><span class="line">perror(<span class="string">&quot;pthread_create()&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i=START;i&lt;END;i+=<span class="number">2</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (pthread_mutex_lock(&amp;mutex) != <span class="number">0</span>) &#123;</span><br><span class="line">perror(<span class="string">&quot;pthread_mutex_lock()&quot;</span>);</span><br><span class="line">pthread_exit(<span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (count != <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (pthread_cond_wait(&amp;cond, &amp;mutex) != <span class="number">0</span>) &#123;</span><br><span class="line">perror(<span class="string">&quot;pthread_cond_wait()&quot;</span>);</span><br><span class="line">pthread_exit(<span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">count = i;</span><br><span class="line"><span class="keyword">if</span> (pthread_cond_broadcast(&amp;cond) != <span class="number">0</span>) &#123;</span><br><span class="line">perror(<span class="string">&quot;pthread_cond_broadcast()&quot;</span>);</span><br><span class="line">pthread_exit(<span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (pthread_mutex_unlock(&amp;mutex) != <span class="number">0</span>) &#123;</span><br><span class="line">perror(<span class="string">&quot;pthread_mutex_unlock()&quot;</span>);</span><br><span class="line">pthread_exit(<span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (pthread_mutex_lock(&amp;mutex) != <span class="number">0</span>) &#123;</span><br><span class="line">perror(<span class="string">&quot;pthread_mutex_lock()&quot;</span>);</span><br><span class="line">pthread_exit(<span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (count != <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (pthread_cond_wait(&amp;cond, &amp;mutex) != <span class="number">0</span>) &#123;</span><br><span class="line">perror(<span class="string">&quot;pthread_cond_wait()&quot;</span>);</span><br><span class="line">pthread_exit(<span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">count = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">if</span> (pthread_cond_broadcast(&amp;cond) != <span class="number">0</span>) &#123;</span><br><span class="line">perror(<span class="string">&quot;pthread_cond_broadcast()&quot;</span>);</span><br><span class="line">pthread_exit(<span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (pthread_mutex_unlock(&amp;mutex) != <span class="number">0</span>) &#123;</span><br><span class="line">perror(<span class="string">&quot;pthread_mutex_unlock()&quot;</span>);</span><br><span class="line">pthread_exit(<span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;NUM;i++) &#123;</span><br><span class="line">ret = pthread_join(tid[i], <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">if</span> (ret != <span class="number">0</span>) &#123;</span><br><span class="line">perror(<span class="string">&quot;pthread_join()&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们将筛质数的范围缩小了两个数量级，并且每个线程都打开一个文件，每次计算的循环中都read一遍。此时这个进程执行的时候的cpu使用状态是这样的：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">17</span>:<span class="number">20</span>:<span class="number">46</span>     CPU    %usr   %nice    %sys %iowait    %irq   %soft  %steal  %guest  %gnice   %idle</span><br><span class="line"><span class="number">17</span>:<span class="number">20</span>:<span class="number">47</span>     all   <span class="number">53.04</span>    <span class="number">0.00</span>   <span class="number">46.96</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span></span><br><span class="line"><span class="number">17</span>:<span class="number">20</span>:<span class="number">47</span>       <span class="number">0</span>   <span class="number">53.00</span>    <span class="number">0.00</span>   <span class="number">47.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span></span><br><span class="line"><span class="number">17</span>:<span class="number">20</span>:<span class="number">47</span>       <span class="number">1</span>   <span class="number">53.00</span>    <span class="number">0.00</span>   <span class="number">47.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span></span><br><span class="line"><span class="number">17</span>:<span class="number">20</span>:<span class="number">47</span>       <span class="number">2</span>   <span class="number">53.00</span>    <span class="number">0.00</span>   <span class="number">47.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span></span><br><span class="line"><span class="number">17</span>:<span class="number">20</span>:<span class="number">47</span>       <span class="number">3</span>   <span class="number">53.00</span>    <span class="number">0.00</span>   <span class="number">47.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span></span><br><span class="line"><span class="number">17</span>:<span class="number">20</span>:<span class="number">47</span>       <span class="number">4</span>   <span class="number">53.00</span>    <span class="number">0.00</span>   <span class="number">47.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span></span><br><span class="line"><span class="number">17</span>:<span class="number">20</span>:<span class="number">47</span>       <span class="number">5</span>   <span class="number">53.00</span>    <span class="number">0.00</span>   <span class="number">47.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span></span><br><span class="line"><span class="number">17</span>:<span class="number">20</span>:<span class="number">47</span>       <span class="number">6</span>   <span class="number">53.00</span>    <span class="number">0.00</span>   <span class="number">47.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span></span><br><span class="line"><span class="number">17</span>:<span class="number">20</span>:<span class="number">47</span>       <span class="number">7</span>   <span class="number">53.00</span>    <span class="number">0.00</span>   <span class="number">47.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span></span><br><span class="line"><span class="number">17</span>:<span class="number">20</span>:<span class="number">47</span>       <span class="number">8</span>   <span class="number">53.00</span>    <span class="number">0.00</span>   <span class="number">47.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span></span><br><span class="line"><span class="number">17</span>:<span class="number">20</span>:<span class="number">47</span>       <span class="number">9</span>   <span class="number">53.00</span>    <span class="number">0.00</span>   <span class="number">47.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span></span><br><span class="line"><span class="number">17</span>:<span class="number">20</span>:<span class="number">47</span>      <span class="number">10</span>   <span class="number">53.00</span>    <span class="number">0.00</span>   <span class="number">47.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span></span><br><span class="line"><span class="number">17</span>:<span class="number">20</span>:<span class="number">47</span>      <span class="number">11</span>   <span class="number">53.47</span>    <span class="number">0.00</span>   <span class="number">46.53</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span></span><br><span class="line"><span class="number">17</span>:<span class="number">20</span>:<span class="number">47</span>      <span class="number">12</span>   <span class="number">52.00</span>    <span class="number">0.00</span>   <span class="number">48.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span></span><br><span class="line"><span class="number">17</span>:<span class="number">20</span>:<span class="number">47</span>      <span class="number">13</span>   <span class="number">53.00</span>    <span class="number">0.00</span>   <span class="number">47.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span></span><br><span class="line"><span class="number">17</span>:<span class="number">20</span>:<span class="number">47</span>      <span class="number">14</span>   <span class="number">53.47</span>    <span class="number">0.00</span>   <span class="number">46.53</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span></span><br><span class="line"><span class="number">17</span>:<span class="number">20</span>:<span class="number">47</span>      <span class="number">15</span>   <span class="number">53.00</span>    <span class="number">0.00</span>   <span class="number">47.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span></span><br><span class="line"><span class="number">17</span>:<span class="number">20</span>:<span class="number">47</span>      <span class="number">16</span>   <span class="number">53.00</span>    <span class="number">0.00</span>   <span class="number">47.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span></span><br><span class="line"><span class="number">17</span>:<span class="number">20</span>:<span class="number">47</span>      <span class="number">17</span>   <span class="number">53.00</span>    <span class="number">0.00</span>   <span class="number">47.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span></span><br><span class="line"><span class="number">17</span>:<span class="number">20</span>:<span class="number">47</span>      <span class="number">18</span>   <span class="number">53.00</span>    <span class="number">0.00</span>   <span class="number">47.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span></span><br><span class="line"><span class="number">17</span>:<span class="number">20</span>:<span class="number">47</span>      <span class="number">19</span>   <span class="number">53.00</span>    <span class="number">0.00</span>   <span class="number">47.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span></span><br><span class="line"><span class="number">17</span>:<span class="number">20</span>:<span class="number">47</span>      <span class="number">20</span>   <span class="number">53.00</span>    <span class="number">0.00</span>   <span class="number">47.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span></span><br><span class="line"><span class="number">17</span>:<span class="number">20</span>:<span class="number">47</span>      <span class="number">21</span>   <span class="number">53.00</span>    <span class="number">0.00</span>   <span class="number">47.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span></span><br><span class="line"><span class="number">17</span>:<span class="number">20</span>:<span class="number">47</span>      <span class="number">22</span>   <span class="number">53.00</span>    <span class="number">0.00</span>   <span class="number">47.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span></span><br><span class="line"><span class="number">17</span>:<span class="number">20</span>:<span class="number">47</span>      <span class="number">23</span>   <span class="number">53.00</span>    <span class="number">0.00</span>   <span class="number">47.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span>    <span class="number">0.00</span></span><br><span class="line"></span><br><span class="line">[<span class="type">zorro</span>@<span class="type">zorrozou</span>-<span class="type">pc</span> ~/<span class="type">test</span>]<span class="variable">$</span> time ./prime_sys &amp;&gt; /dev/null</span><br><span class="line"></span><br><span class="line">real<span class="number">0</span>m12.<span class="number">227</span>s</span><br><span class="line">user<span class="number">2</span>m34.<span class="number">869</span>s</span><br><span class="line">sys<span class="number">2</span>m17.<span class="number">239</span>s</span><br></pre></td></tr></table></figure><p>测试用例已经基本符合我们的测试条件，可以达到近50%的sys占用，下面开始进行对比测试。测试方法根上一轮一样，仍然用jerry账户运行一个相同的程序在另一个cgroup不断的循环，然后分别看在不同资源分配比率下的zorro用户筛质数程序运行的时间。以下是测试结果：</p><table><thead><tr><th>shares zorro&#x2F;shares jerry（核心数）</th><th>cpuset realtime</th><th>cpushare realtime</th><th>cpuquota realtime</th></tr></thead><tbody><tr><td>2000&#x2F;22000(2)</td><td>2m27.666s</td><td>2m27.599s</td><td>2m27.918s</td></tr><tr><td>4000&#x2F;20000(4)</td><td>1m12.621s</td><td>1m14.345s</td><td>1m13.581s</td></tr><tr><td>6000&#x2F;18000(6)</td><td>0m48.612s</td><td>0m49.474s</td><td>0m48.730s</td></tr><tr><td>8000&#x2F;16000(8)</td><td>0m36.412s</td><td>0m37.269s</td><td>0m36.784s</td></tr><tr><td>12000&#x2F;12000(12)</td><td>0m24.611s</td><td>0m24.624s</td><td>0m24.628s</td></tr><tr><td>16000&#x2F;8000(16)</td><td>0m18.401s</td><td>0m18.688s</td><td>0m18.480s</td></tr><tr><td>24000&#x2F;0(24)</td><td>0m12.188s</td><td>0m12.487s</td><td>0m12.147s</td></tr></tbody></table><table><thead><tr><th>shares zorro&#x2F;shares jerry（核心数）</th><th>cpuset systime</th><th>cpushare systime</th><th>cpuquota systime</th></tr></thead><tbody><tr><td>2000&#x2F;22000(2)</td><td>2m20.115s</td><td>2m21.024s</td><td>2m21.854s</td></tr><tr><td>4000&#x2F;20000(4)</td><td>2m16.450s</td><td>2m21.103s</td><td>2m20.352s</td></tr><tr><td>6000&#x2F;18000(6)</td><td>2m18.273s</td><td>2m20.455s</td><td>2m20.039s</td></tr><tr><td>8000&#x2F;16000(8)</td><td>2m18.054s</td><td>2m20.611s</td><td>2m19.891s</td></tr><tr><td>12000&#x2F;12000(12)</td><td>2m20.358s</td><td>2m18.331s</td><td>2m20.363s</td></tr><tr><td>16000&#x2F;8000(16)</td><td>2m17.724s</td><td>2m18.958s</td><td>2m18.637s</td></tr><tr><td>24000&#x2F;0(24)</td><td>2m16.723s</td><td>2m17.707s</td><td>2m16.176s</td></tr></tbody></table><p>这次我们多了一个表格专门记录systime时间占用。根据数据结果我们会发现，在这次测试循环中，三种隔离方式都呈现出随着资源的增加进程是执行的总时间线性下降，并且隔离效果区别不大。由于调用read的次数一样，systime的使用基本都稳定在一个固定的时间范围内。这说明，在sys占用较高的情况下，各种cpu资源隔离手段都表现出比较理想的效果。</p><h4 id="内核资源冲突的情况"><a href="#内核资源冲突的情况" class="headerlink" title="内核资源冲突的情况"></a>内核资源冲突的情况</h4><p>但是现实的生产环境往往并不是这么理想的，有没有可能在某种情况下，各种CPU资源隔离的手段并不会表现出这么理想的效果呢？有没有可能不同的隔离方式会导致进程的执行会有影响呢？其实这是很可能发生的。我们上一轮测试中，每个cgroup中的线程打开的文件都不是同一个文件，内核在处理这种场景的时候，并不需要使用内核中的一些互斥资源(比如自旋锁或者屏障)进行竞争条件的处理。如果环境变成大家read的是同一个文件，那么情况就可能有很大不同了。下面我们来测试一下每个zorro组中的所有线程都open同一个文件并且read时的执行效果，我们照例把测试用例代码贴出来：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;strings.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NUM 48</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> START 1010001</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> END 1020000</span></span><br><span class="line"></span><br><span class="line"><span class="type">pthread_mutex_t</span> mutex = PTHREAD_MUTEX_INITIALIZER;</span><br><span class="line"><span class="type">pthread_cond_t</span> cond = PTHREAD_COND_INITIALIZER;</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PATH <span class="string">&quot;/etc/passwd&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> *<span class="title">prime</span><span class="params">(<span class="type">void</span> *p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> n, i, flag;</span><br><span class="line"><span class="type">int</span> num, fd, ret;</span><br><span class="line"><span class="type">char</span> name[BUFSIZ];</span><br><span class="line"><span class="type">char</span> buf[BUFSIZ];</span><br><span class="line"></span><br><span class="line">fd = <span class="built_in">open</span>(PATH, O_RDONLY|O_NONBLOCK);</span><br><span class="line"><span class="keyword">if</span> (fd &lt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">perror</span>(<span class="string">&quot;open()&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">pthread_mutex_lock</span>(&amp;mutex) != <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">perror</span>(<span class="string">&quot;pthread_mutex_lock()&quot;</span>);</span><br><span class="line"><span class="built_in">pthread_exit</span>(<span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (count == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">pthread_cond_wait</span>(&amp;cond, &amp;mutex) != <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">perror</span>(<span class="string">&quot;pthread_cond_wait()&quot;</span>);</span><br><span class="line"><span class="built_in">pthread_exit</span>(<span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (count == <span class="number">-1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">pthread_mutex_unlock</span>(&amp;mutex) != <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">perror</span>(<span class="string">&quot;pthread_mutex_unlock()&quot;</span>);</span><br><span class="line"><span class="built_in">pthread_exit</span>(<span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">n = count;</span><br><span class="line">count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">pthread_cond_broadcast</span>(&amp;cond) != <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">perror</span>(<span class="string">&quot;pthread_cond_broadcast()&quot;</span>);</span><br><span class="line"><span class="built_in">pthread_exit</span>(<span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">pthread_mutex_unlock</span>(&amp;mutex) != <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">perror</span>(<span class="string">&quot;pthread_mutex_unlock()&quot;</span>);</span><br><span class="line"><span class="built_in">pthread_exit</span>(<span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line">flag = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">2</span>;i&lt;n/<span class="number">2</span>;i++) &#123;</span><br><span class="line">ret = <span class="built_in">read</span>(fd, buf, BUFSIZ);</span><br><span class="line"><span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">perror</span>(<span class="string">&quot;read()&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (n%i == <span class="number">0</span>) &#123;</span><br><span class="line">flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (flag == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d is a prime form %d!\n&quot;</span>, n, <span class="built_in">pthread_self</span>());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">close</span>(fd);</span><br><span class="line"><span class="built_in">pthread_exit</span>(<span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">pthread_t</span> tid[NUM];</span><br><span class="line"><span class="type">int</span> ret, i, num;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;NUM;i++) &#123;</span><br><span class="line">ret = <span class="built_in">pthread_create</span>(&amp;tid[i], <span class="literal">NULL</span>, prime, (<span class="type">void</span> *)i);</span><br><span class="line"><span class="keyword">if</span> (ret != <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">perror</span>(<span class="string">&quot;pthread_create()&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i=START;i&lt;END;i+=<span class="number">2</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">pthread_mutex_lock</span>(&amp;mutex) != <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">perror</span>(<span class="string">&quot;pthread_mutex_lock()&quot;</span>);</span><br><span class="line"><span class="built_in">pthread_exit</span>(<span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (count != <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">pthread_cond_wait</span>(&amp;cond, &amp;mutex) != <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">perror</span>(<span class="string">&quot;pthread_cond_wait()&quot;</span>);</span><br><span class="line"><span class="built_in">pthread_exit</span>(<span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">count = i;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">pthread_cond_broadcast</span>(&amp;cond) != <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">perror</span>(<span class="string">&quot;pthread_cond_broadcast()&quot;</span>);</span><br><span class="line"><span class="built_in">pthread_exit</span>(<span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">pthread_mutex_unlock</span>(&amp;mutex) != <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">perror</span>(<span class="string">&quot;pthread_mutex_unlock()&quot;</span>);</span><br><span class="line"><span class="built_in">pthread_exit</span>(<span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">pthread_mutex_lock</span>(&amp;mutex) != <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">perror</span>(<span class="string">&quot;pthread_mutex_lock()&quot;</span>);</span><br><span class="line"><span class="built_in">pthread_exit</span>(<span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (count != <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">pthread_cond_wait</span>(&amp;cond, &amp;mutex) != <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">perror</span>(<span class="string">&quot;pthread_cond_wait()&quot;</span>);</span><br><span class="line"><span class="built_in">pthread_exit</span>(<span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">count = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">pthread_cond_broadcast</span>(&amp;cond) != <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">perror</span>(<span class="string">&quot;pthread_cond_broadcast()&quot;</span>);</span><br><span class="line"><span class="built_in">pthread_exit</span>(<span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">pthread_mutex_unlock</span>(&amp;mutex) != <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">perror</span>(<span class="string">&quot;pthread_mutex_unlock()&quot;</span>);</span><br><span class="line"><span class="built_in">pthread_exit</span>(<span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;NUM;i++) &#123;</span><br><span class="line">ret = <span class="built_in">pthread_join</span>(tid[i], <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">if</span> (ret != <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">perror</span>(<span class="string">&quot;pthread_join()&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时jerry组中的所有线程仍然是每个线程一个文件，与上一轮测试一样。测试结果如下：</p><table><thead><tr><th>shares zorro&#x2F;shares jerry（核心数）</th><th>cpuset realtime</th><th>cpushare realtime</th><th>cpuquota realtime</th></tr></thead><tbody><tr><td>2000&#x2F;22000(2)</td><td>2m27.402s</td><td>2m41.015s</td><td>4m37.149s</td></tr><tr><td>4000&#x2F;20000(4)</td><td>1m18.178s</td><td>1m25.214s</td><td>2m42.455s</td></tr><tr><td>6000&#x2F;18000(6)</td><td>0m52.592s</td><td>1m2.691s</td><td>1m48.492s</td></tr><tr><td>8000&#x2F;16000(8)</td><td>0m43.598s</td><td>0m57.000s</td><td>1m21.044s</td></tr><tr><td>12000&#x2F;12000(12)</td><td>0m52.182s</td><td>0m59.613s</td><td>0m58.004s</td></tr><tr><td>16000&#x2F;8000(16)</td><td>0m50.712s</td><td>0m54.371s</td><td>0m56.911s</td></tr><tr><td>24000&#x2F;0(24)</td><td>0m50.599s</td><td>0m50.550s</td><td>0m50.496s</td></tr></tbody></table><table><thead><tr><th>shares zorro&#x2F;shares jerry（核心数）</th><th>cpuset systime</th><th>cpushare systime</th><th>cpuquota systime</th></tr></thead><tbody><tr><td>2000&#x2F;22000(2)</td><td>2m19.829s</td><td>2m47.706s</td><td>6m39.800s</td></tr><tr><td>4000&#x2F;20000(4)</td><td>2m41.928s</td><td>3m6.575s</td><td>8m14.087s</td></tr><tr><td>6000&#x2F;18000(6)</td><td>2m45.671s</td><td>3m38.722s</td><td>8m13.668s</td></tr><tr><td>8000&#x2F;16000(8)</td><td>3m14.434s</td><td>4m54.451s</td><td>8m12.904s</td></tr><tr><td>12000&#x2F;12000(12)</td><td>7m39.542s</td><td>9m7.751s</td><td>8m57.332s</td></tr><tr><td>16000&#x2F;8000(16)</td><td>10m47.425s</td><td>11m41.443s</td><td>12m21.056s</td></tr><tr><td>24000&#x2F;0(24)</td><td>17m17.661s</td><td>17m7.311s</td><td>17m14.788s</td></tr></tbody></table><p>观察这轮测试的结果我们会发现，当线程同时read同一个文件时，时间的消耗并不在呈现线性下降的趋势了，而且，随着分配的资源越来越多，sys占用时间也越来越高，这种现象如何解释呢？本质上来讲，使用cgroup进行资源隔离时，内核资源仍然是共享的。如果业务使用内核资源如果没有产生冲突，那么隔离效果应该会比较理想，但是业务一旦使用了会导致内核资源冲突的逻辑时，那么业务的执行效率就会下降，此时可能所有进程在内核中处理的时候都可能会在竞争的资源上忙等（如果使用了spinlock）。自然的，如果多个cgroup的进程之间也正好使用了可能会导致内核触发竞争条件的资源时，自然也会发生所谓的cgroup之间的相互影响。可能的现象就是，当某一个业务A的cgroup正在运行着，突然B业务的cgroup有请求要处理，会导致A业务的响应速度和处理能力下降。而这种相互干扰，正是资源隔离手段想要尽量避免的。我们认为，如果出现了上述效果，那么资源隔离手段就是打了折扣的。</p><p>根据我们的实验结果可以推论，在内核资源有竞争条件的情况下，cpuset的资源隔离方式表现出了相对其他方式的优势，cpushare方式的性能折损尚可接受，而cpuquota表现出了最差的性能，或者说在cpuquota的隔离条件下，cgroup之间进程相互影响的可能性最大。</p><p>那么在内核资源存在竞争的时候，cgroup的cpu资源隔离会有相互干扰。结论就是这样了么？这个推断靠谱么？我们再来做一轮实验，这次只对比cpuset和cpuquota。这次我们不用jerry来运行干扰程序测试隔离性，我们让zorro只在单纯的隔离状态下，再有内核资源竞争的条件下进行运算效率测试，就是说这个环境没有多个cgroup可能造成的相互影响。先来看数据：</p><table><thead><tr><th>cpu比率（核心数）</th><th>cpuset realtime</th><th>cpuquota realtime</th></tr></thead><tbody><tr><td>8.3%(2)</td><td>2m26.815s</td><td>9m4.490s</td></tr><tr><td>16.7%(4)</td><td>1m17.894s</td><td>4m49.167s</td></tr><tr><td>25%(6)</td><td>0m52.356s</td><td>3m13.144s</td></tr><tr><td>33.3%(8)</td><td>0m42.946s</td><td>2m23.010s</td></tr><tr><td>50%(12)</td><td>0m52.014s</td><td>1m33.571s</td></tr><tr><td>66.7%(16)</td><td>0m50.903s</td><td>1m10.553s</td></tr><tr><td>100%(24)</td><td>0m50.331s</td><td>0m50.304s</td></tr></tbody></table><table><thead><tr><th>cpu比率（核心数）</th><th>cpuset systime</th><th>cpuquota systime</th></tr></thead><tbody><tr><td>8.3%(2)</td><td>2m18.713s</td><td>15m27.738s</td></tr><tr><td>16.7%(4)</td><td>2m41.172s</td><td>16m30.741s</td></tr><tr><td>25%(6)</td><td>2m44.618s</td><td>16m30.964s</td></tr><tr><td>33.3%(8)</td><td>3m12.587s</td><td>16m18.366s</td></tr><tr><td>50%(12)</td><td>7m36.929s</td><td>15m55.407s</td></tr><tr><td>66.7%(16)</td><td>10m49.327s</td><td>16m1.463s</td></tr><tr><td>100%(24)</td><td>17m9.482s</td><td>17m9.533s</td></tr></tbody></table><p>不知道看完这组数据之后，大家会不会困惑？cpuset的测试结果根上一轮基本一样，这可以理解。但是为什么cpuquota这轮测试反倒比刚才有jerry用户进程占用cpu进行干扰的时候的性能更差了？</p><p>如果了解了内核在这种资源竞争条件的原理的话，这个现象并不难解释。可以这样想，如果某一个资源存在竞争的话，那么是不是同时竞争的人越多，那么对于每个人来说，单次得到资源的可能性更低？比如说，老师给学生发苹果，每次只发一个，但是同时有10个人一起抢，每个人每次抢到苹果的几率是10%，如果20个人一起抢，那么每次每人强到苹果的几率就只有5％了。在内核竞争条件下，也是一样的道理，资源只有一个，当抢的进程少的时候，每个进程抢到资源的概率大，于是浪费在忙等上的时间就少。本轮测试的cpuset就可以说明这个现象，可以观察到，cpuset systime随着分配的核心数的增多而上升，就是同时跑的进程越多，sys消耗在忙等资源上的时间就越大。而cpuquota systime消耗从头到尾都基本变化不大，意味着再以quota方式分配cpu的时候，所有核心都是用得上的，所以一直都有24个进程在抢资源，大家消耗在忙等上的时间是一样的。<br>为什么有jerry进程同时占用cpu的情况下，cpuquota反倒效率要快些呢？这个其实也好理解。在jerry进程执行的时候，这个cgroup的相关线程打开的是不同的文件，所以从内核竞争上没有冲突。另外，jerry消耗了部分cpu，导致内核会在zorro的进程和jerry的进程之间发生调度，这意味着，同一时刻核心数只有24个，可能有18个在给jerry的线程使用，另外6个在给zorro的进程使用，这导致zorro同时争抢资源的进程个数不能始终保持24个，所以内核资源冲突反倒减小了。<code>这导致，使用cpuquota的情况下，有其他cgroup执行的时候，还可能会使某些业务的执行效率提升，而不是下降。</code>这种相互影响实在太让人意外了！但这确实是事实！</p><p>那么什么情况下会导致cgroup之间的相互影响使性能下降呢？也好理解，当多个cgroup的应用之间使用了相同的内核资源的时候。请大家思考一个问题：现实情况是同一种业务使用冲突资源的可能性更大还是不同业务使用冲突资源的可能性更大呢？从概率上说应该是同一种业务。从这个角度出发来看，如果我们有两台多核服务器，有两个跟我们测试逻辑类似的业务A、B，让你选择一种部署方案，你是选择让A、B两个业务分别独占一个服务器？还是让A、B业务使用资源隔离分别在两个服务器上占用50%的资源？通过这轮分析我想答案很明确了：</p><ol><li>从容灾的角度说，让某一个业务使用多台服务器肯定会增加容灾能力。</li><li>从资源利用率的角度说，如果让一个业务放在一个服务器上，那么他在某些资源冲突的情况下并不能发挥会最大效率。然而如果使用group分布在两个不同的服务器上，无论你用cpuset，还是cpushare，又或是cpuquota，它的cpu性能表现都应该强于在一个独立的服务器上部署。况且cgroup的cpu隔离是在cfs中实现的，这种隔离几乎是不会浪费额外的计算能力的，就是说，做隔离相比不做隔离，系统本身的性能损耗都可以忽略不计。</li></ol><p>那么，究竟还有什么会妨碍我们使用cgoup的cpu资源隔离呢?</p><hr><blockquote><p>文章转载于：<a class="link"   href="https://github.com/zorrozou" >https://github.com/zorrozou<i class="fas fa-external-link-alt"></i></a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;什么是Cgroup？&quot;&gt;&lt;a href=&quot;#什么是Cgroup？&quot; class=&quot;headerlink&quot; title=&quot;什么是Cgroup？&quot;&gt;&lt;/a&gt;什么是Cgroup？&lt;/h3&gt;&lt;p&gt;【引自&lt;a class=&quot;link&quot;   href=&quot;https://zh.</summary>
      
    
    
    
    <category term="Linux" scheme="https://wuchu.site/categories/Linux/"/>
    
    
    <category term="资源隔离" scheme="https://wuchu.site/tags/%E8%B5%84%E6%BA%90%E9%9A%94%E7%A6%BB/"/>
    
  </entry>
  
  <entry>
    <title>Cgroup - Linux内存资源管理</title>
    <link href="https://wuchu.site/2024/10/29/cgroup_linux_memory_control_group/"/>
    <id>https://wuchu.site/2024/10/29/cgroup_linux_memory_control_group/</id>
    <published>2024-10-29T12:38:00.000Z</published>
    <updated>2024-11-19T11:41:38.727Z</updated>
    
    <content type="html"><![CDATA[<p>在聊cgroup的内存限制之前，我们有必要先来讲解一下：</p><h3 id="Linux内存管理基础知识"><a href="#Linux内存管理基础知识" class="headerlink" title="Linux内存管理基础知识"></a>Linux内存管理基础知识</h3><h4 id="free命令"><a href="#free命令" class="headerlink" title="free命令"></a>free命令</h4><p>无论从任何角度看，Linux的内存管理都是一坨麻烦的事情，当然我们也可以用一堆、一片、一块、一筐来形容这个事情，但是毫无疑问，用一坨来形容它简直恰当无比。在理解它之前，我甚至不会相信精妙的和恶心可以同时形容同一件事情，是的，在我看来它就是这样的。其实我只是做个铺垫，让大家明白，我们下面要讲的内容，绝不是一个成体系的知识，所以，学习起来也确实很麻烦。甚至，我写这个技术文章之前一度考虑了很久该怎么写？从哪里开始写？思考了半天，还是不能免俗，我们无奈，仍然先从free命令说起：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">zorrozou</span>-<span class="type">pc</span> ~]<span class="comment"># free</span></span><br><span class="line">             total       used       free     shared    buffers     cached</span><br><span class="line">Mem:     <span class="number">131904480</span>    <span class="number">6681612</span>  <span class="number">125222868</span>          <span class="number">0</span>     <span class="number">478428</span>    <span class="number">4965180</span></span><br><span class="line">-/+ buffers/cache:    <span class="number">1238004</span>  <span class="number">130666476</span></span><br><span class="line">Swap:      <span class="number">2088956</span>          <span class="number">0</span>    <span class="number">2088956</span></span><br></pre></td></tr></table></figure><p>这个命令几乎是每一个使用过Linux的人必会的命令，但越是这样的命令，似乎真正明白的人越少（我是说比例越少）。一般情况下，对此命令的理解可以分这几个阶段：</p><ol><li>我擦，内存用了好多，6个多G，可是我什么都没有运行啊？为什么会这样？Linux好占内存。</li><li>嗯，根据我专业的眼光看出来，内存才用了1G多点，还有很多剩余内存可用。buffers&#x2F;cache占用的较多，说明系统中有进程曾经读写过文件，但是不要紧，这部分内存是当空闲来用的。</li><li>free显示的是这样，好吧我知道了。神马？你问我这些内存够不够，我当然不知道啦！我特么怎么知道你程序怎么写的？</li></ol><p>如果你的认识在第一种阶段，那么请你继续补充关于Linux的buffers／cache的知识。如果你处在第二阶段，好吧，你已经是个老手了，但是需要提醒的是，上帝给你关上一扇门的同时，肯定都会给你放一条狗的。是的，Linux的策略是：内存是用来用的，而不是用来看的。但是，只要是用了，就不是没有成本的。有什么成本，凭你对buffer&#x2F;cache的理解，应该可以想的出来。一般我比较认同第三种情况，一般光凭一个free命令的显示，是无法判断出任何有价值的信息的，我们需要结合业务的场景以及其他输出综合判断目前遇到的问题。当然也可能这种人给人的第一感觉是他很外行，或者他真的是外行。</p><p>无论如何，free命令确实给我门透露了一些有用的信息，比如内存总量，剩余多少，多少用在了buffers／cache上，Swap用了多少，如果你用了其它参数还能看到一些其它内容，这里不做一一列举。那么这里又引申出另一些概念，什么是buffer？什么是cache？什么是swap？由此我们就直接引出另一个命令：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">zorrozou</span>-<span class="type">pc</span> ~]<span class="comment"># cat /proc/meminfo</span></span><br><span class="line">MemTotal:       <span class="number">131904480</span> kB</span><br><span class="line">MemFree:        <span class="number">125226660</span> kB</span><br><span class="line">Buffers:          <span class="number">478504</span> kB</span><br><span class="line">Cached:          <span class="number">4966796</span> kB</span><br><span class="line">SwapCached:            <span class="number">0</span> kB</span><br><span class="line">Active:          <span class="number">1774428</span> kB</span><br><span class="line">Inactive:        <span class="number">3770380</span> kB</span><br><span class="line">Active(anon):     <span class="number">116500</span> kB</span><br><span class="line">Inactive(anon):     <span class="number">3404</span> kB</span><br><span class="line">Active(file):    <span class="number">1657928</span> kB</span><br><span class="line">Inactive(file):  <span class="number">3766976</span> kB</span><br><span class="line">Unevictable:           <span class="number">0</span> kB</span><br><span class="line">Mlocked:               <span class="number">0</span> kB</span><br><span class="line">SwapTotal:       <span class="number">2088956</span> kB</span><br><span class="line">SwapFree:        <span class="number">2088956</span> kB</span><br><span class="line">Dirty:               <span class="number">336</span> kB</span><br><span class="line">Writeback:             <span class="number">0</span> kB</span><br><span class="line">AnonPages:         <span class="number">99504</span> kB</span><br><span class="line">Mapped:            <span class="number">20760</span> kB</span><br><span class="line">Shmem:             <span class="number">20604</span> kB</span><br><span class="line">Slab:             <span class="number">301292</span> kB</span><br><span class="line">SReclaimable:     <span class="number">229852</span> kB</span><br><span class="line">SUnreclaim:        <span class="number">71440</span> kB</span><br><span class="line">KernelStack:        <span class="number">3272</span> kB</span><br><span class="line">PageTables:         <span class="number">3320</span> kB</span><br><span class="line">NFS_Unstable:          <span class="number">0</span> kB</span><br><span class="line">Bounce:                <span class="number">0</span> kB</span><br><span class="line">WritebackTmp:          <span class="number">0</span> kB</span><br><span class="line">CommitLimit:    <span class="number">68041196</span> kB</span><br><span class="line">Committed_AS:     <span class="number">352412</span> kB</span><br><span class="line">VmallocTotal:   <span class="number">34359738367</span> kB</span><br><span class="line">VmallocUsed:      <span class="number">493196</span> kB</span><br><span class="line">VmallocChunk:   <span class="number">34291062284</span> kB</span><br><span class="line">HardwareCorrupted:     <span class="number">0</span> kB</span><br><span class="line">AnonHugePages:     <span class="number">49152</span> kB</span><br><span class="line">HugePages_Total:       <span class="number">0</span></span><br><span class="line">HugePages_Free:        <span class="number">0</span></span><br><span class="line">HugePages_Rsvd:        <span class="number">0</span></span><br><span class="line">HugePages_Surp:        <span class="number">0</span></span><br><span class="line">Hugepagesize:       <span class="number">2048</span> kB</span><br><span class="line">DirectMap4k:      <span class="number">194816</span> kB</span><br><span class="line">DirectMap2M:     <span class="number">3872768</span> kB</span><br><span class="line">DirectMap1G:    <span class="number">132120576</span> kB</span><br></pre></td></tr></table></figure><p>以上显示的内容都是些什么鬼？</p><p>其实这个问题的答案也是另一个问题的答案，即：Linux是如何使用内存的？了解清楚这个问题是很有必要的，因为只有先知道了Linux如何使用内存，我们在能知道内存可以如何限制，以及，做了限制之后会有什么问题？我们在此先例举出几个常用概念的意义：</p><p>内存，作为一种相对比较有限的资源，内核在考虑其管理时，无非应该主要从以下出发点考虑：</p><ol><li>内存够用时怎么办？</li><li>内存不够用时怎么办？</li></ol><p>在内存够用时，内核的思路是，如何尽量提高资源的利用效率，以加快系统整体响应速度和吞吐量？于是内存作为一个CPU和I／O之间的大buffer的功能就呼之欲出了。为此，内核设计了以下系统来做这个功能：</p><h4 id="Buffers／Cached"><a href="#Buffers／Cached" class="headerlink" title="Buffers／Cached"></a>Buffers／Cached</h4><p>buffer和cache是两个在计算机技术中被用滥的名词，放在不通语境下会有不同的意义。在内存管理中，我们需要特别澄清一下，这里的buffer指Linux内存的：Buffer cache。这里的cache指Linux内存中的：Page cache。翻译成中文可以叫做缓冲区缓存和页面缓存。在历史上，它们一个（buffer）被用来当成对io设备写的缓存，而另一个（cache）被用来当作对io设备的读缓存，这里的io设备，主要指的是块设备文件和文件系统上的普通文件。但是现在，它们的意义已经不一样了。在当前的内核中，page cache顾名思义就是针对内存页的缓存，说白了就是，如果有内存是以page进行分配管理的，都可以使用page cache作为其缓存来使用。当然，不是所有的内存都是以页（page）进行管理的，也有很多是针对块（block）进行管理的，这部分内存使用如果要用到cache功能，则都集中到buffer cache中来使用。（从这个角度出发，是不是buffer cache改名叫做block cache更好？）然而，也不是所有块（block）都有固定长度，系统上块的长度主要是根据所使用的块设备决定的，而页长度在X86上无论是32位还是64位都是4k。</p><p>而明白了这两套缓存系统的区别，也就基本可以理解它们究竟都可以用来做什么了。</p><p><strong>什么是page cache</strong></p><p>Page cache主要用来作为文件系统上的文件数据的缓存来用，尤其是针对当进程对文件有read／write操作的时候。如果你仔细想想的话，作为可以映射文件到内存的系统调用：mmap是不是很自然的也应该用到page cache？如果你再仔细想想的话，malloc会不会用到page cache？</p><p>以上提出的问题都请自己思考，本文档不会给出标准答案。</p><p>在当前的实现里，page cache也被作为其它文件类型的缓存设备来用，所以事实上page cache也负责了大部分的块设备文件的缓存工作。</p><p><strong>什么是buffer cache</strong></p><p>Buffer cache则主要是设计用来在系统对块设备进行读写的时候，对块进行数据缓存的系统来使用。但是由于page cache也负责块设备文件读写的缓存工作，于是，当前的buffer cache实际上要负责的工作比较少。这意味着某些对块的操作会使用buffer cache进行缓存，比如我们在格式化文件系统的时候。</p><p>一般情况下两个缓存系统是一起配合使用的，比如当我们对一个文件进行写操作的时候，page cache的内容会被改变，而buffer cache则可以用来将page标记为不同的缓冲区，并记录是哪一个缓冲区被修改了。这样，内核在后续执行脏数据的回写（writeback）时，就不用将整个page写回，而只需要写回修改的部分即可。</p><p>有搞大型系统经验的人都知道，缓存就像万金油，只要哪里有速度差异产生的瓶颈，就可以在哪里抹。但是其成本之一就是，需要维护数据的一致性。内存缓存也不例外，内核需要维持其一致性，在脏数据产生较快或数据量较大的时候，缓存系统整体的效率一样会下降，因为毕竟脏数据写回也是要消耗IO的。这个现象也会表现在这样一种情况下，就是当你发现free的时候，内存使用量较大，但是去掉了buffer／cache的使用之后剩余确很多。以一般的理解，都会认为此时进程如果申请内存，内核会将buffer／cache占用的内存当成空闲的内存分给进程，这是没错的。但是其成本是，在分配这部分已经被buffer／cache占用的内存的时候，内核会先对其上面的脏数据进行写回操作，保证数据一致后才会清空并分给进程使用。如果此时你的进程是突然申请大量内存，而且你的业务是一直在产生很多脏数据（比如日志），并且系统没有及时写回的时候，此时系统给进程分配内存的效率会很慢，系统IO也会很高。那么此时你还以为buffer／cache可以当空闲内存使用么？</p><blockquote><p>思考题：Linux什么时候会将脏数据写回到外部设备上？这个过程如何进行人为干预？</p></blockquote><p>这足可以证明一点，以内存管理的复杂度，我们必须结合系统上的应用状态来评估系统监控命令所给出的数据，才是做评估的正确途径。如果你不这样做，那么你就可以轻而易举的得出“Linux系统好烂啊！“这样的结论。也许此时，其实是你在这个系统上跑的应用很烂的缘故导致的问题。</p><p>接下来，当内存不够用的时候怎么办？</p><p>我们好像已经分析了一种内存不够用的状态，就是上述的大量buffer／cache把内存几乎占满的情况。但是基于Linux对内存的使用原则，这不算是不够用，但是这种状态导致IO变高了。我们进一步思考，假设系统已经清理了足够多的buffer／cache分给了内存，而进程还在嚷嚷着要内存咋办？</p><p>此时内核就要启动一系列手段来让进程<strong>尽量</strong>在此时能够正常的运行下去。</p><p><code>请注意我在这说的是一种异常状态！我之所以要这样强调是因为，很多人把内存用满了当称一种正常状态。他们认为，当我的业务进程在内存使用到压力边界的情况下，系统仍然需要保证让业务进程有正常的状态！这种想法显然是缘木求鱼了。另外我还要强调一点，系统提供的是内存管理的机制和手段，而内存用的好不好，主要是业务进程的事情，责任不能本末倒置。</code></p><h4 id="谁该SWAP？"><a href="#谁该SWAP？" class="headerlink" title="谁该SWAP？"></a>谁该SWAP？</h4><p>首先是Swap机制。Swap是交换技术，这种技术是指，当内存不够用的时候，我们可以选择性的将一块磁盘、分区或者一个文件当成交换空间，将内存上一些临时用不到的数据放到交换空间上，以释放内存资源给急用的进程。</p><p>哪些数据可能会被交换出去呢？从概念上判断，如果一段内存中的数据被经常访问，那么就不应该被交换到外部设备上，因为这样的数据如果交换出去的话会导致系统响应速度严重下降。内存管理需要将内存区分为活跃的（Active）和不活跃的（Inactive），再加上一个进程使用的用户空间内存映射包括文件影射（file）和匿名影射（anon），所以就包括了Active（anon）、Inactive（anon）、Active（file）和Inactive（file）。你说神马？啥是文件影射（file）和匿名影射（anon）？好吧，我们可以这样简单的理解，匿名影射主要是诸如进程使用malloc和mmap的MAP_ANONYMOUS的方式申请的内存，而文件影射就是使用mmap影射的文件系统上的文件，这种文件系统上的文件既包括普通的文件，也包括临时文件系统（tmpfs）。这意味着，Sys V的IPC和POSIX的IPC（IPC是进程间通信机制，在这里主要指共享内存，信号量数组和消息队列）都是通过文件影射方式体现在用户空间内存中的。这两种影射的内存都会被算成进程的RSS，但是也一样会被显示在cache的内存计数中，在相关cgroup的另一项统计中，共享内存的使用和文件缓存（file cache）也都会被算成是cgroup中的cache使用的总量。这个统计显示的方法是：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">zorrozou</span>-<span class="type">pc</span> ~]<span class="comment"># cat /cgroup/memory/memory.stat</span></span><br><span class="line">cache <span class="number">94429184</span></span><br><span class="line">rss <span class="number">102973440</span></span><br><span class="line">rss_huge <span class="number">50331648</span></span><br><span class="line">mapped_file <span class="number">21512192</span></span><br><span class="line">swap <span class="number">0</span></span><br><span class="line">pgpgin <span class="number">656572990</span></span><br><span class="line">pgpgout <span class="number">663474908</span></span><br><span class="line">pgfault <span class="number">2871515381</span></span><br><span class="line">pgmajfault <span class="number">1187</span></span><br><span class="line">inactive_anon <span class="number">3497984</span></span><br><span class="line">active_anon <span class="number">120524800</span></span><br><span class="line">inactive_file <span class="number">39059456</span></span><br><span class="line">active_file <span class="number">34484224</span></span><br><span class="line">unevictable <span class="number">0</span></span><br><span class="line">hierarchical_memory_limit <span class="number">9223372036854775807</span></span><br><span class="line">hierarchical_memsw_limit <span class="number">9223372036854775807</span></span><br><span class="line">total_cache <span class="number">94429184</span></span><br><span class="line">total_rss <span class="number">102969344</span></span><br><span class="line">total_rss_huge <span class="number">50331648</span></span><br><span class="line">total_mapped_file <span class="number">21520384</span></span><br><span class="line">total_swap <span class="number">0</span></span><br><span class="line">total_pgpgin <span class="number">656572990</span></span><br><span class="line">total_pgpgout <span class="number">663474908</span></span><br><span class="line">total_pgfault <span class="number">2871515388</span></span><br><span class="line">total_pgmajfault <span class="number">1187</span></span><br><span class="line">total_inactive_anon <span class="number">3497984</span></span><br><span class="line">total_active_anon <span class="number">120524800</span></span><br><span class="line">total_inactive_file <span class="number">39059456</span></span><br><span class="line">total_active_file <span class="number">34484224</span></span><br><span class="line">total_unevictable <span class="number">0</span></span><br></pre></td></tr></table></figure><p>好吧，说了这么半天终于联系到一个cgroup的内存限制相关的文件了。在这需要说明的是，你之所以看见我废话这么多，是因为我们必须先基本理清楚Linux系统的内存管理方式，才能进一步对cgroup中的内存限制做规划使用，否则同样的名词会有很多的歧义。就比如我们在观察某一个cgroup中的cache占用数据的时候，我们究竟该怎么理解它？真的把它当成空闲空间来看么？</p><p>我们撤的有点远，回过头来说说这些跟Swap有什么关系？还是刚才的问题，什么内容该被从内存中交换出去呢？文件cache是一定不需要的，因为既然是cache，就意味着它本身就是硬盘上的文件（当然你现在应该知道了，它也不仅仅只有文件），那么如果是硬盘上的文件，就不用swap交换出去，只要写回脏数据，保持数据一致之后清除就可以了，这就是刚才说过的缓存清楚机制。但是我们同时也要知道，并不是所有被标记为cache的空间都能被写回硬盘的(是的，比如共享内存)。那么能交换出去内存应该主要包括有Inactive（anon）这部分内存。主要注意的是，内核也将共享内存作为计数统计近了Inactive（anon）中去了（是的，共享内存也可以被Swap）。还要补充一点，如果内存被mlock标记加锁了，则也不会交换，这是对内存加mlock锁的唯一作用。刚才我们讨论的这些计数，很可能会随着Linux内核的版本改变而产生变化，但是在比较长的一段时间内，我们可以这样理解。</p><p>我们基本搞清了swap这个机制的作用效果，那么既然swap是内部设备和外部设备的数据拷贝，那么加一个缓存就显得很有必要，这个缓存就是swapcache，在memory.stat文件中，swapcache是跟anon page被一起记录到rss中的，但是并不包含共享内存。另外再说明一下，HugePages也是不会交换的。显然，当前的swap空间用了多少，总共多少，这些我们也可以在相关的数据中找到答案。</p><blockquote><p>以上概念中还有一些名词大家可能并不清楚其含义，比如RSS或HugePages。请自行查资料补上这些知识。为了让大家真的理解什么是RSS，请思考ps aux命令中显示的VSZ，RSS和cat &#x2F;proc&#x2F;<strong>pid</strong>&#x2F;smaps中显示的：PSS这三个进程占用内存指标的差别？</p></blockquote><h4 id="何时SWAP？"><a href="#何时SWAP？" class="headerlink" title="何时SWAP？"></a>何时SWAP？</h4><p>搞清楚了谁该swap，那么还要知道什么时候该swap。这看起来比较简单，内存耗尽而且cache也没什么可以回收的时候就应该触发swap。其实现实情况也没这么简单，实际上系统在内存压力可能不大的情况下也会swap，这种情况并不是我们今天要讨论的范围。</p><blockquote><p>思考题：除了内存被耗尽的时候要swap，还有什么时候会swap？如何调整内核swap的行为？如何查看当前系统的swap空间有哪些？都是什么类型？什么是swap权重？swap权重有什么意义？</p></blockquote><p>其实绝大多数场景下，什么时候swap并不重要，而swap之后的事情相对却更重要。大多数的内存不够用，只是临时不够用，比如并发突增等突发情况，这种情况的特点是时间持续短，此时swap机制作为一种临时的中转措施，可以起到对业务进程的保护作用。因为如果没有swap，内存耗尽的结果一般都是触发oom killer，会杀掉此时积分比较高的进程。如果更严重的话，内存不够用还会触发进程D状态死锁，这一般发生在多个进程同时要申请内存的时候，此时oom killer机制也可能会失效，因为需要被干掉的积分比较高的进程很可能就是需要申请内存的进程，而这个进程本身因为正在争抢内存而导致陷入D状态，那么此时kill就可能是对它无效的。</p><p>但是swap也不是任何时候都有很好的保护效果。如果内存申请是长期并大量的，那么交换出去的数据就会因为长时间驻留在外部设备上，导致进程调用这段内存的几率大大增加，当进程很频繁的使用它已经被交换出去的内存时，就会让整个系统处在io繁忙的状态，此时进程的响应速度会严重下降，导致整个系统夯死。对于系统管理员来说，这种情况是完全不能接受的，因为故障之后的第一要务是赶紧恢复服务，但是swap频繁使用的IO繁忙状态会导致系统除了断电重启之外，没有其它可靠手段可以让系统从这种状态中恢复回来，所以这种情况是要尽力避免的。此时，如果有必要，我们甚至可以考虑不用swap，哪怕内存过量使用被oom，或者进程D状态都是比swap导致系统卡死的情况更好处理的状态。如果你的环境需求是这样的，那么可以考虑关闭swap。</p><h4 id="进程申请内存的时候究竟会发生什么？"><a href="#进程申请内存的时候究竟会发生什么？" class="headerlink" title="进程申请内存的时候究竟会发生什么？"></a>进程申请内存的时候究竟会发生什么？</h4><p>刚才我们从系统宏观的角度简要说明了一下什么是buffer／cache以及swap。下面我们从一个更加微观的角度来把一个内存申请的过程以及相关机制什么时候触发给串联起来。本文描述的过程是基于Linux 3.10内核版本的，Linux 4.1基本过程变化不大。如果你想确认在你的系统上究竟是什么样子，请自行翻阅相关内核代码。</p><p>进程申请内存可能用到很多种方法，最常见的就是malloc和mmap。但是这对于我们并不重要，因为无论是malloc还是mmap，或是其他的申请内存的方法，都不会真正的让内核去给进程分配一个实际的物理内存空间。真正会触发分配物理内存的行为是<strong>缺页异常</strong>。</p><p>缺页异常就是我们可以在memory.stat中看到的total_pgfault，这种异常一般分两种，一种叫major fault，另一种叫minor fault。这两种异常的主要区别是，进程所请求的内存数据是否会引发磁盘io？如果会引发，就是一个majfault，如果不引发，那就是minfault。就是说如果产生了major fault，这个数据基本上就意味着已经被交换到了swap空间上。</p><p>缺页异常的处理过程大概可以整理为以下几个路径：</p><p>首先检查要访问的虚拟地址是否合法，如果合法则继续查找和分配一个物理页，步骤如下：</p><ol><li>检查发生异常的虚拟地址是不是在物理页表中不存在？如果是，并且是匿名影射，则申请置0的匿名影射内存，此时也有可能是影射了某种虚拟文件系统，比如共享内存，那么就去影射相关的内存区，或者发生COW写时复制申请新内存。如果是文件影射，则有两种可能，一种是这个影射区是一个page cache，直接将相关page cache区影射过来即可，或者COW新内存存放需要影射的文件内容。如果page cache中不存在，则说明这个区域已经被交换到swap空间上，应该去处理swap。</li><li>如果页表中已经存在需要影射的内存，则检查是否要对内存进行写操作，如果不写，那就直接复用，如果要写，就发生COW写时复制，此时的COW跟上面的处理过程不完全相同，在内核中，这里主要是通过do_wp_page方法实现的。</li></ol><p>如果需要申请新内存，则都会通过alloc_page_vma申请新内存，而这个函数的核心方法是__alloc_pages_nodemask，也就是Linux内核著名的内存管理系统<strong>伙伴系统</strong>的实现。</p><p>分配过程先会检查空闲页表中有没有页可以申请，实现方法是：get_page_from_freelist，我们并不关心正常情况，分到了当然一切ok。更重要的是异常处理，如果空闲中没有，则会进入__alloc_pages_slowpath方法进行处理。这个处理过程的主逻辑大概这样：</p><ol><li>唤醒kswapd进程，把能换出的内存换出，让系统有内存可用。</li><li>继续检查看看空闲中是否有内存。有了就ok，没有继续下一步：</li><li>尝试清理page cache，清理的时候会将进程置为D状态。如果还申请不到内存则：</li><li>启动oom killer干掉一些进程释放内存，如果这样还不行则：</li><li>回到步骤1再来一次！</li></ol><p>当然以上逻辑要符合一些条件，但是这一般都是系统默认的状态，比如，你必须启用oom killer机制等。另外这个逻辑中有很多其它状态与本文无关，比如检查内存水印、检查是否是高优先级内存申请等等，当然还有关于numa节点状态的判断处理，我没有一一列出。另外，以上逻辑中，不仅仅只有清理cache的时候会使进程进入D状态，还有其它逻辑也会这样做。这就是为什么在内存不够用的情况下，oom killer有时也不生效，因为可能要干掉的进程正好陷入这个逻辑中的D状态了。</p><p>以上就是内存申请中，大概会发生什么的过程。当然，我们这次主要是真对本文的重点cgroup内存限制进行说明，当我们处理限制的时候，更多需要关心的是当内存超限了会发生什么？对边界条件的处理才是我们这次的主题，所以我并没有对正常申请到的情况做细节说明，也没有对用户态使用malloc什么时候使用sbrk还是mmap来申请内存做出细节说明，毕竟那是程序正常状态的时候的事情，后续可以另写一个内存优化的文章主要讲解那部分。</p><p>下面我们该进入正题了：</p><h3 id="Cgroup内存限制的配置"><a href="#Cgroup内存限制的配置" class="headerlink" title="Cgroup内存限制的配置"></a>Cgroup内存限制的配置</h3><p>当限制内存时，我们最好先想清楚如果内存超限了会发生什么？该怎么处理？业务是否可以接受这样的状态？这就是为什么我们在讲如何限制之前说了这么多基础知识的“废话”。其实最简单的莫过于如何进行限制了，我们的系统环境还是沿用上一次讲解CPU内存隔离的环境，使用cgconfig和cgred服务进行cgroup的配置管理。还是创建一个zorro用户，对这个用户产生的进程进行内存限制。基础配置方法不再多说，如果不知道的请参考<a class="link"   href="http://pan.baidu.com/s/1pKzBnz9#0-tsina-1-58608-397232819ff9a47a7b7e80a40613cfe1" >这个文档<i class="fas fa-external-link-alt"></i></a>。</p><p>环境配置好之后，我们就可以来检查相关文件了。内存限制的相关目录根据cgconfig.config的配置放在了&#x2F;cgroup&#x2F;memory目录中，如果你跟我做了一样的配置，那么这个目录下的内容应该是这样的：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">zorrozou</span>-<span class="type">pc</span> ~]<span class="comment"># ls /cgroup/memory/</span></span><br><span class="line">cgroup.clone_children  memory.failcnt                  memory.kmem.slabinfo                memory.kmem.usage_in_bytes  memory.memsw.limit_in_bytes      memory.oom_control          memory.usage_in_bytes  shrek</span><br><span class="line">cgroup.event_control   memory.force_empty              memory.kmem.tcp.failcnt             memory.limit_in_bytes       memory.memsw.max_usage_in_bytes  memory.pressure_level       memory.use_hierarchy   tasks</span><br><span class="line">cgroup.procs           memory.kmem.failcnt             memory.kmem.tcp.limit_in_bytes      memory.max_usage_in_bytes   memory.memsw.usage_in_bytes      memory.soft_limit_in_bytes           zorro</span><br><span class="line">cgroup.sane_behavior   memory.kmem.limit_in_bytes      memory.kmem.tcp.max_usage_in_bytes  memory.meminfo              memory.move_charge_at_immigrate  memory.stat                 notify_on_release</span><br><span class="line">jerry                  memory.kmem.max_usage_in_bytes  memory.kmem.tcp.usage_in_bytes      memory.memsw.failcnt        memory.numa_stat                 memory.swappiness           release_agent</span><br></pre></td></tr></table></figure><p>其中，zorro、jerry、shrek都是目录概念跟cpu隔离的目录树结构类似。相关配置文件内容：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">zorrozou</span>-<span class="type">pc</span> ~]<span class="comment"># cat /etc/cgconfig.confmount &#123;</span></span><br><span class="line">cpu = /cgroup/cpu;</span><br><span class="line">cpuset= /cgroup/cpuset;</span><br><span class="line">cpuacct= /cgroup/cpuacct;</span><br><span class="line">memory= /cgroup/memory;</span><br><span class="line">devices= /cgroup/devices;</span><br><span class="line">freezer= /cgroup/freezer;</span><br><span class="line">net_cls= /cgroup/net_cls;</span><br><span class="line">blkio= /cgroup/blkio;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">group</span> zorro &#123;</span><br><span class="line">cpu &#123;</span><br><span class="line">cpu.shares = <span class="number">6000</span>;</span><br><span class="line"><span class="comment">#cpu.cfs_quota_us = &quot;600000&quot;;</span></span><br><span class="line">&#125;</span><br><span class="line">cpuset &#123;</span><br><span class="line"><span class="comment">#cpuset.cpus = &quot;0-7,12-19&quot;;</span></span><br><span class="line"><span class="comment">#cpuset.mems = &quot;0-1&quot;;</span></span><br><span class="line">&#125;</span><br><span class="line">memory &#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置中添加了一个真对memory的空配置项，我们稍等下再给里面添加配置。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">zorrozou</span>-<span class="type">pc</span> ~]<span class="comment"># cat /etc/cgrules.conf </span></span><br><span class="line">zorrocpu,cpuset,cpuacct,memoryzorro</span><br><span class="line">jerrycpu,cpuset,cpuacct,memoryjerry</span><br><span class="line">shrekcpu,cpuset,cpuacct,memoryshrek</span><br></pre></td></tr></table></figure><p>文件修改完之后记得重启相关服务：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">zorrozou</span>-<span class="type">pc</span> ~]<span class="comment"># service cgconfig restart</span></span><br><span class="line">[<span class="type">root</span>@<span class="type">zorrozou</span>-<span class="type">pc</span> ~]<span class="comment"># service cgred restart</span></span><br></pre></td></tr></table></figure><p>让我们继续来看看真对内存都有哪些配置参数：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">root</span>@<span class="type">zorrozou</span>-<span class="type">pc</span> ~]<span class="comment"># ls /cgroup/memory/zorro/</span></span><br><span class="line">cgroup.clone_children  memory.kmem.failcnt             memory.kmem.tcp.limit_in_bytes      memory.max_usage_in_bytes        memory.memsw.usage_in_bytes      memory.soft_limit_in_bytes  </span><br><span class="line">cgroup.event_control   memory.kmem.limit_in_bytes      memory.kmem.tcp.max_usage_in_bytes  memory.meminfo                   memory.move_charge_at_immigrate  memory.stat                 notify_on_release</span><br><span class="line">cgroup.procs           memory.kmem.max_usage_in_bytes  memory.kmem.tcp.usage_in_bytes      memory.memsw.failcnt             memory.numa_stat                 memory.swappiness           tasks</span><br><span class="line">memory.failcnt         memory.kmem.slabinfo            memory.kmem.usage_in_bytes          memory.memsw.limit_in_bytes      memory.oom_control               memory.usage_in_bytes</span><br><span class="line">memory.force_empty     memory.kmem.tcp.failcnt         memory.limit_in_bytes               memory.memsw.max_usage_in_bytes  memory.pressure_level            memory.use_hierarchy</span><br></pre></td></tr></table></figure><p>首先我们已经认识了memory.stat文件了，这个文件内容不能修改，它实际上是输出当前cgroup相关内存使用信息的。常见的数据及其含义我们刚才也已经说过了，在此不再复述。</p><h4 id="cgroup内存限制"><a href="#cgroup内存限制" class="headerlink" title="cgroup内存限制"></a>cgroup内存限制</h4><p><strong>memory.memsw.limit_in_bytes</strong>:内存＋swap空间使用的总量限制。</p><p><strong>memory.limit_in_bytes</strong>：内存使用量限制。</p><p>这两项的意义很清楚了，如果你决定在你的cgroup中关闭swap功能，可以把两个文件的内容设置为同样的值即可。至于为什么相信大家都能想清楚。</p><h4 id="OOM控制"><a href="#OOM控制" class="headerlink" title="OOM控制"></a>OOM控制</h4><p><strong>memory.oom_control</strong>:内存超限之后的oom行为控制。<br>这个文件中有两个值：</p><p>oom_kill_disable 0</p><p>默认为0表示打开oom killer，就是说当内存超限时会触发干掉进程。如果设置为1表示关闭oom killer，此时内存超限不会触发内核杀掉进程。而是将进程夯住（hang／sleep），实际上内核中就是将进程设置为D状态，并且将相关进程放到一个叫做OOM-waitqueue的队列中。这时的进程可以kill杀掉。如果你想继续让这些进程执行，可以选择这样几个方法：</p><ol><li>增加内存，让进程有内存可以继续申请。</li><li>杀掉一些进程，让本组内有内存可用。</li><li>把一些进程移到别的cgroup中，让本cgroup内有内存可用。</li><li>删除一些tmpfs的文件，就是占用内存的文件，比如共享内存或者其它会占用内存的文件。</li></ol><p>说白了就是，此时只有当cgroup中有更多内存可以用了，在OOM-waitqueue队列中被挂起的进程就可以继续运行了。</p><p>under_oom 0</p><p>这个值只是用来看的，它表示当前的cgroup的状态是不是已经oom了，如果是，这个值将显示为1。我们就是通过设置和监测这个文件中的这两个值来管理cgroup内存超限之后的行为的。在默认场景下，如果你使用了swap，那么你的cgroup限制内存之后最常见的异常效果是IO变高，如果业务不能接受，我们一般的做法是关闭swap，那么cgroup内存oom之后都会触发kill掉进程，如果我们用的是LXC或者Docker这样的容器，那么还可能干掉整个容器。当然也经常会因为kill进程的时候因为进程处在D状态，而导致整个Docker或者LXC容器根本无法被杀掉。至于原因，在前面已经说的很清楚了。当我们遇到这样的困境时该怎么办？一个好的办法是，关闭oom killer，让内存超限之后，进程挂起，毕竟这样的方式相对可控。此时我们可以检查under_oom的值，去看容器是否处在超限状态，然后根据业务的特点决定如何处理业务。我推荐的方法是关闭部分进程或者重启掉整个容器，因为可以想像，容器技术所承载的服务应该是在整体软件架构上有容错的业务，典型的场景是web服务。容器技术的特点就是生存周期短，在这样的场景下，杀掉几个进程或者几个容器，都应该对整体服务的稳定性影响不大，而且容器的启动速度是很快的，实际上我们应该认为，容器的启动速度应该是跟进程启动速度可以相媲美的。你的业务会因为死掉几个进程而表现不稳定么？如果不会，请放心的干掉它们吧，大不了很快再启动起来就是了。但是如果你的业务不是这样，那么请根据自己的情况来制定后续处理的策略。</p><p>当我们进行了内存限制之后，内存超限的发生频率要比使用实体机更多了，因为限制的内存量一般都是小于实际物理内存的。所以，使用基于内存限制的容器技术的服务应该多考虑自己内存使用的情况，尤其是内存超限之后的业务异常处理应该如何让服务受影响的程度降到更低。在系统层次和应用层次一起努力，才能使内存隔离的效果达到最好。</p><h4 id="内存资源审计"><a href="#内存资源审计" class="headerlink" title="内存资源审计"></a>内存资源审计</h4><p><strong>memory.memsw.usage_in_bytes</strong>:当前cgroup的内存＋swap的使用量。</p><p><strong>memory.usage_in_bytes</strong>:当前cgroup的内存使用量。</p><p><strong>memory.max_usage_in_bytes</strong>:cgroup的最大内存使用量。</p><p><strong>memory.memsw.max_usage_in_bytes</strong>:cgroup最大的内存＋swap的使用量。</p><p>这些文件都是只读的，用来查看相关状态信息，只能看不能改。</p><p>如果你的内核配置打开了CONFIG_MEMCG_KMEM选项的话，那么可以看到当前cgroup的内核内存使用的限制和状态统计信息，他们都是以memory.kmem开头的文件。你可以通过memory.kmem.limit_in_bytes来限制内核使用的内存大小，通过memory.kmem.slabinfo来查看内核slab分配器的状态。现在还能通过memory.kmem.tcp开头的文件来限制cgroup中使用tcp协议的内存资源使用和状态查看。</p><p>所有名字中有failcnt的文件里面的值都是相关资源超限的次数的计数，可以通过echo 0将这些计数重置。如果你的服务器是NUMA架构的话，可以通过memory.numa_stat这个文件来查看cgroup中的NUMA相关状态。memory.swappiness跟&#x2F;proc&#x2F;sys&#x2F;vm&#x2F;swappiness的概念一致，用来调整cgroup使用swap的状态，如果大家认真做了本文前面的思考题的话，应该知道这个文件是干嘛的，本文不会详细解释关于swappiness的细节算法，以后将在性能调整系列文章中详细解释相关参数。</p><h4 id="内存软限制以及内存超卖"><a href="#内存软限制以及内存超卖" class="headerlink" title="内存软限制以及内存超卖"></a>内存软限制以及内存超卖</h4><p><strong>memory.soft_limit_in_bytes</strong>:内存软限制。</p><p>如果超过了memory.limit_in_bytes所定义的限制，那么进程会被oom killer干掉或者被暂停，这相当于硬限制，因为进程无法申请超过自身cgroup限制的内存，但是软限制确是可以突破的。我们假定一个场景，如果你的实体机上有四个cgroup，实体机的内存总量是64G，那么一般情况我们会考虑给每个cgroup限制到16G内存。但是现实情况并不会这么理想，首先实体机上其他进程和内核会占用部分内存，这将导致实际上每个cgroup都不会真的有16G内存可用，如果四个cgroup都尽量占用内存的话，他们可能谁都不会到达内存的上限触发超限的行为，这可能将导致进程都抢不到内存而被饿死。类似的情况还可能发上在内存超卖的环境中，比如，我们仍然只有64G内存，但是确开了8个cgroup，每个都限制了16G内存。这样每个cgroup分配的内存之和达到了128G，但是实际内存量只有64G。这种情况是出于绝大多数应用可能不会占用满所有的内存来考虑的，这样就可以把本来属于它的那份内存“借用”给其它cgroup。以上这样的情况都会出现类似的问题，就是，如果全局内存已经耗尽了，但是某些cgroup还没达到他的内存使用上限，而它们此时如果要申请内存的话，此时该从哪里回收内存？如果我们配置了memory.soft_limit_in_bytes，那么内核将去回收那些内存超过了这个软限制的cgroup的内存，尽量缩减它们的内存占用达到软限制的量以下，以便让没有达到软限制的cgroup有内存可以用。当然，在没有这样的内存竞争以及没有达到硬限制的情况下，软限制是不会生效的。还有就是，软限制的起作用时间可能会比较长，毕竟内核要平衡多个cgroup的内存使用。</p><p>根据软限制的这些特点，我们应该明白如果想要软限制生效，应该把它的值设置成小于硬限制。</p><h4 id="进程迁移时的内存charge"><a href="#进程迁移时的内存charge" class="headerlink" title="进程迁移时的内存charge"></a>进程迁移时的内存charge</h4><p><strong>memory.move_charge_at_immigrate</strong>:打开或者关闭进程迁移时的内存记账信息。</p><p>进程可以在多个cgroup之间切换，所以内存限制必须考虑当发生这样的切换时，进程进入的新cgroup中记录的内存使用量是重新从0累计还是把原来cgroup中的信息迁移过来？当这个开关设置为0的时候是关闭这个功能，相当于不累计之前的信息，默认是1，迁移的时候要在新的cgroup中累积（charge）原来信息，并把旧group中的信息给uncharge掉。如果新cgroup中没有足够的空间容纳新来的进程，首先内核会在cgroup内部回收内存，如果还是不够，就会迁移失败。</p><h4 id="内存压力通知机制"><a href="#内存压力通知机制" class="headerlink" title="内存压力通知机制"></a>内存压力通知机制</h4><p>最后，内存的资源隔离还提供了一种压力通知机制。当cgoup内的内存使用量达到某种压力状态的时候，内核可以通过eventfd的机制来通知用户程序，这个通知是通过<strong>cgroup.event_control</strong>和<strong>memory.pressure_level</strong>来实现的。使用方法是：</p><p>使用eventfd()创建一个eventfd，假设叫做efd，然后open()打开memory.pressure_level的文件路径，产生一个另一个fd，我们暂且叫它cfd，然后将这两个fd和我们要关注的内存压力级别告诉内核，让内核帮我们关注条件是否成立，通知方式就是把以上信息按这样的格式:”&lt;event_fd：efd&gt; &lt;fd of memory.pressure_level：cfd&gt; <level>“写入cgroup.event_control。然后就可以去等着efd是否可读了，如果能读出信息，则代表内存使用已经触发相关压力条件。</p><p>压力级别的level有三个：</p><p>“low”：表示内存使用已经达到触发内存回收的压力级别。</p><p>“medium”：表示内存使用压力更大了，已经开始触发swap以及将活跃的cache写回文件等操作了。</p><p>“critical”：到这个级别，就意味着内存已经达到上限，内核已经触发oom killer了。</p><p>程序从efd读出的消息内容就是这三个级别的关键字。我们可以通过这个机制，建立一个内存压力管理系统，在内存达到相应级别的时候，触发响应的管理策略，来达到各种自动化管理的目的。</p><p>下面给出一个监控程序的例子：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;err.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;libgen.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;limits.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/eventfd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> USAGE_STR <span class="string">&quot;Usage: cgroup_event_listener &lt;path-to-control-file&gt; &lt;args&gt;&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> efd = <span class="number">-1</span>;</span><br><span class="line"><span class="type">int</span> cfd = <span class="number">-1</span>;</span><br><span class="line"><span class="type">int</span> event_control = <span class="number">-1</span>;</span><br><span class="line"><span class="type">char</span> event_control_path[PATH_MAX];</span><br><span class="line"><span class="type">char</span> line[LINE_MAX];</span><br><span class="line"><span class="type">int</span> ret;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (argc != <span class="number">3</span>)</span><br><span class="line"><span class="built_in">errx</span>(<span class="number">1</span>, <span class="string">&quot;%s&quot;</span>, USAGE_STR);</span><br><span class="line"></span><br><span class="line">cfd = <span class="built_in">open</span>(argv[<span class="number">1</span>], O_RDONLY);</span><br><span class="line"><span class="keyword">if</span> (cfd == <span class="number">-1</span>)</span><br><span class="line"><span class="built_in">err</span>(<span class="number">1</span>, <span class="string">&quot;Cannot open %s&quot;</span>, argv[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">ret = <span class="built_in">snprintf</span>(event_control_path, PATH_MAX, <span class="string">&quot;%s/cgroup.event_control&quot;</span>,</span><br><span class="line"><span class="built_in">dirname</span>(argv[<span class="number">1</span>]));</span><br><span class="line"><span class="keyword">if</span> (ret &gt;= PATH_MAX)</span><br><span class="line"><span class="built_in">errx</span>(<span class="number">1</span>, <span class="string">&quot;Path to cgroup.event_control is too long&quot;</span>);</span><br><span class="line"></span><br><span class="line">event_control = <span class="built_in">open</span>(event_control_path, O_WRONLY);</span><br><span class="line"><span class="keyword">if</span> (event_control == <span class="number">-1</span>)</span><br><span class="line"><span class="built_in">err</span>(<span class="number">1</span>, <span class="string">&quot;Cannot open %s&quot;</span>, event_control_path);</span><br><span class="line"></span><br><span class="line">efd = <span class="built_in">eventfd</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (efd == <span class="number">-1</span>)</span><br><span class="line"><span class="built_in">err</span>(<span class="number">1</span>, <span class="string">&quot;eventfd() failed&quot;</span>);</span><br><span class="line"></span><br><span class="line">ret = <span class="built_in">snprintf</span>(line, LINE_MAX, <span class="string">&quot;%d %d %s&quot;</span>, efd, cfd, argv[<span class="number">2</span>]);</span><br><span class="line"><span class="keyword">if</span> (ret &gt;= LINE_MAX)</span><br><span class="line"><span class="built_in">errx</span>(<span class="number">1</span>, <span class="string">&quot;Arguments string is too long&quot;</span>);</span><br><span class="line"></span><br><span class="line">ret = <span class="built_in">write</span>(event_control, line, <span class="built_in">strlen</span>(line) + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> (ret == <span class="number">-1</span>)</span><br><span class="line"><span class="built_in">err</span>(<span class="number">1</span>, <span class="string">&quot;Cannot write to cgroup.event_control&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line"><span class="type">uint64_t</span> result;</span><br><span class="line"></span><br><span class="line">ret = <span class="built_in">read</span>(efd, &amp;result, <span class="built_in">sizeof</span>(result));</span><br><span class="line"><span class="keyword">if</span> (ret == <span class="number">-1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (errno == EINTR)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">err</span>(<span class="number">1</span>, <span class="string">&quot;Cannot read from eventfd&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">assert</span>(ret == <span class="built_in">sizeof</span>(result));</span><br><span class="line"></span><br><span class="line">ret = <span class="built_in">access</span>(event_control_path, W_OK);</span><br><span class="line"><span class="keyword">if</span> ((ret == <span class="number">-1</span>) &amp;&amp; (errno == ENOENT)) &#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;The cgroup seems to have removed.&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (ret == <span class="number">-1</span>)</span><br><span class="line"><span class="built_in">err</span>(<span class="number">1</span>, <span class="string">&quot;cgroup.event_control is not accessible any more&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s %s: crossed\n&quot;</span>, argv[<span class="number">1</span>], argv[<span class="number">2</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">｝</span><br></pre></td></tr></table></figure><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>Linux的内存限制要说的就是这么多了，当我们限制了内存之后，相对于使用实体机，实际上对于应用来说可用内存更少了，所以业务会相对更经常地暴露在内存资源紧张的状态下。相对于虚拟机（kvm，xen），多个cgroup之间是共享内核的，我们可以从内存限制的角度思考一些关于“容器”技术相对于虚拟机和实体机的很多特点：</p><ol><li>内存更紧张，应用的内存泄漏会导致相对更严重的问题。</li><li>容器的生存周期时间更短，如果实体机的开机运行时间是以年计算的，那么虚拟机则是以月计算的，而容器应该跟进程的生存周期差不多，顶多以天为单位。所以，容器里面要跑的应用应该可以被经常重启。</li><li>当有多个cgroup（容器）同时运行时，我们不能再以实体机或者虚拟机对资源的使用的理解来规划整体运营方式，我们需要更细节的理解什么是cache，什么是swap，什么是共享内存，它们会被统计到哪些资源计数中？在内核并不冲突的环境，这些资源都是独立给某一个业务使用的，在理解上即使不是很清晰，也不会造成歧义。但是在cgroup中，我们需要彻底理解这些细节，才能对遇到的情况进行预判，并规划不同的处理策略。</li></ol><p>也许我们还可以从中得到更多的理解，大家一起来想喽？</p><hr><blockquote><p>文章来源于：<a class="link"   href="https://github.com/zorrozou" >https://github.com/zorrozou<i class="fas fa-external-link-alt"></i></a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在聊cgroup的内存限制之前，我们有必要先来讲解一下：&lt;/p&gt;
&lt;h3 id=&quot;Linux内存管理基础知识&quot;&gt;&lt;a href=&quot;#Linux内存管理基础知识&quot; class=&quot;headerlink&quot; title=&quot;Linux内存管理基础知识&quot;&gt;&lt;/a&gt;Linux内存管理基础</summary>
      
    
    
    
    <category term="Linux" scheme="https://wuchu.site/categories/Linux/"/>
    
    
    <category term="资源隔离" scheme="https://wuchu.site/tags/%E8%B5%84%E6%BA%90%E9%9A%94%E7%A6%BB/"/>
    
  </entry>
  
  <entry>
    <title>checkpoint是什么东西？一个点吗？一个位置？还是一个操作？</title>
    <link href="https://wuchu.site/2024/10/29/checkpoint/"/>
    <id>https://wuchu.site/2024/10/29/checkpoint/</id>
    <published>2024-10-29T11:05:11.000Z</published>
    <updated>2024-11-19T11:41:38.728Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、背景"><a href="#1、背景" class="headerlink" title="1、背景"></a>1、背景</h3><ul><li>WAL 日志就这么一直写下去，子子孙孙无穷匮也，磁盘不炸了吗</li><li>我怎么知道数据库什么时候崩的？恢复的时候，WAL 日志应该从哪开始重放呢？</li><li>checkpoint是什么东西？一个点吗？一个位置？还是一个操作？</li></ul><h3 id="2、checkpoint"><a href="#2、checkpoint" class="headerlink" title="2、checkpoint"></a>2、checkpoint</h3><p>checkpoint是一个<strong>操作</strong>，执行这个操作的开始时刻，会记录当前开始时刻的 WAL 位置作为<strong>重做点</strong>，这个位置会被保存在文件中。 然后将该<strong>重做点之前</strong>所有 shared buffer 中的脏页均被刷入到存储。checkpoint又名检查点，<strong>一般checkpoint会将某个时间点之前的脏数据全部刷新到磁盘，以实现数据的一致性与完整性。</strong><br>目前各个流行的关系型数据库都具备checkpoint功能，其主要目的是为了缩短崩溃恢复时间，以Oracle为例，在进行数据恢复时，会以最近的checkpoint为参考点执行事务前滚。PostgreSQL在崩溃恢复时会以最近的checkpoint为基础，不断应用这之后的WAL日志。<br>简单来说：</p><ul><li><strong>确保数据一致性：</strong>定期将内存中的脏页写入磁盘，确保数据库的一致性。</li><li><strong>加速崩溃恢复：</strong>减少需要重放的 WAL 日志量，从而加速系统崩溃后的恢复过程。</li><li><strong>控制 WAL 日志大小：</strong>通过记录检查点，限制 WAL 日志的增长，优化存储使用。</li></ul><h3 id="3、怎么触发checkpoint？"><a href="#3、怎么触发checkpoint？" class="headerlink" title="3、怎么触发checkpoint？"></a>3、怎么触发checkpoint？</h3><p>分析源码，发现在<code>src/include/access/xlog.h</code>定义了几类触发的场景：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> CHECKPOINT_IS_SHUTDOWN0x0001<span class="comment">/* 数据库关闭 */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CHECKPOINT_END_OF_RECOVERY0x0002<span class="comment">/* 数据库恢复结束时触发 */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CHECKPOINT_IMMEDIATE0x0004<span class="comment">/* 立即执行检查点操作，不进行延迟 */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CHECKPOINT_FORCE0x0008<span class="comment">/* 强制执行检查点 */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CHECKPOINT_FLUSH_ALL0x0010<span class="comment">/* 刷新所有页面，包括未记录表的页面 */</span></span></span><br><span class="line"><span class="comment">/* 以下标志对 RequestCheckpoint 函数非常重要 */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CHECKPOINT_WAIT0x0020<span class="comment">/* 等待检查点操作完成 */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CHECKPOINT_REQUESTED0x0040<span class="comment">/* 已发出检查点请求 */</span></span></span><br><span class="line"><span class="comment">/* 以下标志指示检查点请求的原因 */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CHECKPOINT_CAUSE_XLOG0x0080<span class="comment">/* XLOG日志量达到一定程度触发 */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CHECKPOINT_CAUSE_TIME0x0100<span class="comment">/* 周期性触发 */</span></span></span><br></pre></td></tr></table></figure><p>根据上述定义，也就是说，以下几种情况会触发PG数据库操作系统做检查点操作：</p><ol><li>超级用户（其他用户不可）执行CHECKPOINT命令</li><li>数据库shutdown</li><li>数据库recovery完成</li><li>XLOG日志量达到了触发checkpoint阈值</li><li>周期性地进行checkpoint</li><li>需要刷新所有脏页</li></ol><p>为了能够周期性的创建检查点，减少崩溃恢复时间，同时合并I&#x2F;O，PostgreSQL提供了<em>辅助进程checkpointer</em>。它会对不断检测周期时间以及上面的XLOG日志量阈值是否达到，而周期时间以及XLOG日志量阈值可以通过参数来设置大小，接下来介绍下与checkpoints相关的参数。</p><p><code>checkpoint_segments</code>：WAL log的最大数量，系统默认值是3。超过该数量的WAL日志，会自动触发checkpoint。<br><code>checkpoint_timeout</code>：系统自动执行checkpoint之间的最大时间间隔。系统默认值是5分钟。<br><code>checkpoint_completion_target</code>：该参数表示checkpoint的完成时间占两次checkpoint时间间隔的比例，系统默认值是0.5,也就是说每个checkpoint需要在checkpoints间隔时间的50%内完成。<br><code>checkpoint_warning</code>：系统默认值是30秒，如果checkpoints的实际发生间隔小于该参数，将会在server log中写入写入一条相关信息。可以通过设置为0禁用。</p><h3 id="4、checkpoint-操作的过程"><a href="#4、checkpoint-操作的过程" class="headerlink" title="4、checkpoint 操作的过程"></a>4、checkpoint 操作的过程</h3><img                         lazyload                       alt="image"                       data-src="/2024/10/29/checkpoint/image.png"                        class="" title="图1"                 ><p><strong>checkpoint操作执行的过程</strong>：</p><p>假设要执行三条insert语句</p><ul><li>checkpoint 操作首先记录下 checkpoint 的开始位置，记录为 <strong>redo point</strong>（重做位点）</li><li>checkpoint 将 shared buffer 中的数据刷到磁盘里面去</li><li>这时候数据库又来了一条 SQL insert 3</li><li>checkpoint 刷脏结束，redo point 之前的数据均已被刷到磁盘存储（数据1和2）</li><li>每个检查点后，第一次数据页的变化会导致整个页面会被记录在XLOG日志中</li></ul><blockquote><p>这时候假如开始数据库恢复，那么数据库会从<code>pg_control</code> 文件中找到最新的 checkpoint 位置，再从 checkpoint 找到 redo point 的位置，开始重放日志。不难看出，1 和 2 这两个数据在 checkpoint 中已经持久化到磁盘存储，WAL 日志中也只有 INSERT 3 操作需要重放。<br><code>ControlFileData</code> 结构定义了<code>pg_control</code>文件中存储的数据格式。这个结构位于 <code>src/include/catalog/pg_control.h </code>文件中。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">ControlFileData</span></span><br><span class="line">&#123;</span><br><span class="line">    uint32      system_identifier; <span class="comment">/* 唯一的系统标识符，用于区分不同的数据库实例 */</span></span><br><span class="line">    uint32      pg_control_version; <span class="comment">/* pg_control 文件的版本号 */</span></span><br><span class="line">    uint32      catalog_version_no; <span class="comment">/* 数据库的目录版本号 */</span></span><br><span class="line">    DBState     state;              <span class="comment">/* 数据库的当前状态 */</span></span><br><span class="line">    <span class="type">pg_time_t</span>   time;               <span class="comment">/* 最后一次更新的时间戳 */</span></span><br><span class="line">    XLogRecPtr  checkPoint;         <span class="comment">/* 最后一个检查点的 WAL（Write-Ahead Logging）记录指针 */</span></span><br><span class="line">    XLogRecPtr  prevCheckPoint;     <span class="comment">/* 上一个检查点的 WAL 记录指针 */</span></span><br><span class="line">    CheckPoint  checkPointCopy;     <span class="comment">/* 最后一个检查点记录的副本 */</span></span><br><span class="line">    XLogRecPtr  unloggedLSN;        <span class="comment">/* 当前未记录的 LSN（日志序列号） */</span></span><br><span class="line">    <span class="comment">// 其他字段省略</span></span><br><span class="line">&#125; ControlFileData;</span><br></pre></td></tr></table></figure><p>读取和写入 <code>pg_control</code> 文件的主要函数<code>ReadControlFile</code>、<code>UpdateControlFile</code>位于<code>src/backend/access/transam/xlog.c</code> 文件中。</p><p>查看源码，发现<strong>检查点机制的主要实现</strong>位于 <code>src/backend/postmaster/checkpointer.c</code> 文件中。以下是一些关键函数和它们的作用：<br><code>CheckpointerMain</code>：检查点进程的主函数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CheckpointerMain</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 初始化和设置信号处理</span></span><br><span class="line">    <span class="built_in">pqsignal</span>(SIGHUP, SignalHandlerForConfigReload);</span><br><span class="line">    <span class="built_in">pqsignal</span>(SIGINT, SignalHandlerForShutdownRequest);</span><br><span class="line">    <span class="built_in">pqsignal</span>(SIGTERM, SignalHandlerForShutdownRequest);</span><br><span class="line">    <span class="built_in">pqsignal</span>(SIGQUIT, SignalHandlerForCrashRequest);</span><br><span class="line">    <span class="built_in">pqsignal</span>(SIGUSR1, SignalHandlerForCheckpointRequest);</span><br><span class="line">    <span class="built_in">pqsignal</span>(SIGUSR2, SignalHandlerForCheckpointRequest);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 主循环</span></span><br><span class="line">    <span class="keyword">for</span> (;;)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 等待检查点请求或超时</span></span><br><span class="line">        <span class="built_in">WaitLatchOrSocket</span>(MyLatch, WL_LATCH_SET | WL_TIMEOUT | WL_POSTMASTER_DEATH, <span class="number">-1</span>, WAIT_EVENT_CHECKPOINTER_MAIN);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 处理检查点请求</span></span><br><span class="line">        <span class="keyword">if</span> (got_SIGHUP)</span><br><span class="line">        &#123;</span><br><span class="line">            got_SIGHUP = <span class="literal">false</span>;</span><br><span class="line">            <span class="built_in">ProcessConfigFile</span>(PGC_SIGHUP);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (shutdown_requested)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">CreateCheckPoint</span>(CHECKPOINT_IS_SHUTDOWN | CHECKPOINT_IMMEDIATE);</span><br><span class="line">            <span class="built_in">proc_exit</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (checkpoint_requested)</span><br><span class="line">        &#123;</span><br><span class="line">            checkpoint_requested = <span class="literal">false</span>;</span><br><span class="line">            <span class="built_in">CreateCheckPoint</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>CreateCheckPoint</code>：执行检查点操作的核心函数，负责将脏页写入磁盘并记录检查点信息。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CreateCheckPoint</span><span class="params">(<span class="type">int</span> flags)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    CheckPoint  checkpoint;</span><br><span class="line">    XLogRecPtr  recptr;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化检查点结构</span></span><br><span class="line">    <span class="built_in">MemSet</span>(&amp;checkpoint, <span class="number">0</span>, <span class="built_in">sizeof</span>(CheckPoint));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取当前 WAL 位置</span></span><br><span class="line">    recptr = <span class="built_in">GetInsertRecPtr</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将脏页写入磁盘</span></span><br><span class="line">    <span class="built_in">CheckPointBuffers</span>(flags);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 记录检查点信息到 WAL 日志</span></span><br><span class="line">    recptr = <span class="built_in">XLogInsert</span>(RM_XLOG_ID, XLOG_CHECKPOINT_SHUTDOWN, &amp;checkpoint);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 更新控制文件</span></span><br><span class="line">    <span class="built_in">UpdateControlFile</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>CheckPointBuffers</code>：将脏页写入磁盘。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CheckPointBuffers</span><span class="params">(<span class="type">int</span> flags)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> num_to_write;</span><br><span class="line">    <span class="type">int</span> num_written;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算需要写入的脏页数量</span></span><br><span class="line">    num_to_write = <span class="built_in">GetNumDirtyBuffers</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 写入脏页</span></span><br><span class="line">    num_written = <span class="built_in">WriteDirtyBuffers</span>(num_to_write);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 同步磁盘</span></span><br><span class="line">    <span class="keyword">if</span> (num_written &gt; <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">SyncDataDirectory</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>CheckPointWriteDelay</code>：控制写入速率，避免 I&#x2F;O 峰值。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">CheckPointWriteDelay</span><span class="params">(<span class="type">int</span> flags)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> checkpoint_write_delay = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算写入延迟</span></span><br><span class="line">    <span class="keyword">if</span> (checkpoint_write_delay &gt; <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">pg_usleep</span>(checkpoint_write_delay);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5、总结"><a href="#5、总结" class="headerlink" title="5、总结"></a>5、总结</h3><ul><li>checkpoint中记录了 redo point，标记 redo point 之前的数据均已刷脏，完成持久化存储</li><li>标记 redo point 之前的 WAL 日志可以被清理回收</li><li>每个检查点后，第一次数据页的变化会导致整个页面会被记录在XLOG日志中。</li><li>检查点的开销比较高，可以用checkpoint_warning自检，相应调大checkpoint_segments</li><li>检查点的位置保存在文件 pg_control，pg_control文件被损坏可能会导致数据库不可用</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1、背景&quot;&gt;&lt;a href=&quot;#1、背景&quot; class=&quot;headerlink&quot; title=&quot;1、背景&quot;&gt;&lt;/a&gt;1、背景&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;WAL 日志就这么一直写下去，子子孙孙无穷匮也，磁盘不炸了吗&lt;/li&gt;
&lt;li&gt;我怎么知道数据库什么时候崩的？恢</summary>
      
    
    
    
    <category term="PostgreSQL" scheme="https://wuchu.site/categories/PostgreSQL/"/>
    
    
    <category term="checkpoint" scheme="https://wuchu.site/tags/checkpoint/"/>
    
  </entry>
  
  <entry>
    <title>使用CTE 实现递归搜索</title>
    <link href="https://wuchu.site/2024/10/29/cte/"/>
    <id>https://wuchu.site/2024/10/29/cte/</id>
    <published>2024-10-29T11:05:11.000Z</published>
    <updated>2024-11-19T11:41:38.731Z</updated>
    
    <content type="html"><![CDATA[<p><strong>1、假设我们有一个表示中国城市层次结构的表 <code>cities</code>，其结构如下：</strong></p><ul><li><code>id</code>：城市的唯一标识符</li><li><code>name</code>：城市的名称</li><li><code>parent_id</code>：父城市的唯一标识符（省级城市的 <code>parent_id</code> 为 <code>NULL</code>）</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> cities (</span><br><span class="line">  id SERIAL <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">  name <span class="type">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  parent_id <span class="type">INT</span> <span class="keyword">REFERENCES</span> cities(id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>2、假设我们有以下数据：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> cities (name, parent_id) <span class="keyword">VALUES</span> (<span class="string">&#x27;中国&#x27;</span>, <span class="keyword">NULL</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> cities (name, parent_id) <span class="keyword">VALUES</span> (<span class="string">&#x27;北京&#x27;</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> cities (name, parent_id) <span class="keyword">VALUES</span> (<span class="string">&#x27;上海&#x27;</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> cities (name, parent_id) <span class="keyword">VALUES</span> (<span class="string">&#x27;广东省&#x27;</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> cities (name, parent_id) <span class="keyword">VALUES</span> (<span class="string">&#x27;广州市&#x27;</span>, <span class="number">4</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> cities (name, parent_id) <span class="keyword">VALUES</span> (<span class="string">&#x27;深圳市&#x27;</span>, <span class="number">4</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> cities (name, parent_id) <span class="keyword">VALUES</span> (<span class="string">&#x27;天河区&#x27;</span>, <span class="number">5</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> cities (name, parent_id) <span class="keyword">VALUES</span> (<span class="string">&#x27;南山区&#x27;</span>, <span class="number">6</span>);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> id <span class="operator">|</span>  name  <span class="operator">|</span> parent_id </span><br><span class="line"><span class="comment">----+--------+-----------</span></span><br><span class="line">  <span class="number">1</span> <span class="operator">|</span> 中国    <span class="operator">|</span>          </span><br><span class="line">  <span class="number">2</span> <span class="operator">|</span> 北京    <span class="operator">|</span>         <span class="number">1</span></span><br><span class="line">  <span class="number">3</span> <span class="operator">|</span> 上海    <span class="operator">|</span>         <span class="number">1</span></span><br><span class="line">  <span class="number">4</span> <span class="operator">|</span> 广东省  <span class="operator">|</span>         <span class="number">1</span></span><br><span class="line">  <span class="number">5</span> <span class="operator">|</span> 广州市  <span class="operator">|</span>         <span class="number">4</span></span><br><span class="line">  <span class="number">6</span> <span class="operator">|</span> 深圳市  <span class="operator">|</span>         <span class="number">4</span></span><br><span class="line">  <span class="number">7</span> <span class="operator">|</span> 天河区  <span class="operator">|</span>         <span class="number">5</span></span><br><span class="line">  <span class="number">8</span> <span class="operator">|</span> 南山区  <span class="operator">|</span>         <span class="number">6</span></span><br><span class="line">(<span class="number">8</span> <span class="keyword">rows</span>)</span><br></pre></td></tr></table></figure><p><strong>3、假设我们希望查询 <code>广东省</code> 及其所有子城市的层次结构。并得到以下结果：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> id <span class="operator">|</span>  name  <span class="operator">|</span> parent_id <span class="operator">|</span>            full_path            </span><br><span class="line"><span class="comment">----+--------+-----------+---------------------------------</span></span><br><span class="line">  <span class="number">1</span> <span class="operator">|</span> 中国    <span class="operator">|</span>           <span class="operator">|</span> 中国</span><br><span class="line">  <span class="number">2</span> <span class="operator">|</span> 北京    <span class="operator">|</span>         <span class="number">1</span> <span class="operator">|</span> 中国 <span class="operator">&gt;</span> 北京</span><br><span class="line">  <span class="number">3</span> <span class="operator">|</span> 上海    <span class="operator">|</span>         <span class="number">1</span> <span class="operator">|</span> 中国 <span class="operator">&gt;</span> 上海</span><br><span class="line">  <span class="number">4</span> <span class="operator">|</span> 广东省  <span class="operator">|</span>         <span class="number">1</span> <span class="operator">|</span> 中国 <span class="operator">&gt;</span> 广东省</span><br><span class="line">  <span class="number">5</span> <span class="operator">|</span> 广州市  <span class="operator">|</span>         <span class="number">4</span> <span class="operator">|</span> 中国 <span class="operator">&gt;</span> 广东省 <span class="operator">&gt;</span> 广州市</span><br><span class="line">  <span class="number">6</span> <span class="operator">|</span> 深圳市  <span class="operator">|</span>         <span class="number">4</span> <span class="operator">|</span> 中国 <span class="operator">&gt;</span> 广东省 <span class="operator">&gt;</span> 深圳市</span><br><span class="line">  <span class="number">7</span> <span class="operator">|</span> 天河区  <span class="operator">|</span>         <span class="number">5</span> <span class="operator">|</span> 中国 <span class="operator">&gt;</span> 广东省 <span class="operator">&gt;</span> 广州市 <span class="operator">&gt;</span> 天河区</span><br><span class="line">  <span class="number">8</span> <span class="operator">|</span> 南山区  <span class="operator">|</span>         <span class="number">6</span> <span class="operator">|</span> 中国 <span class="operator">&gt;</span> 广东省 <span class="operator">&gt;</span> 深圳市 <span class="operator">&gt;</span> 南山区</span><br><span class="line">(<span class="number">8</span> <span class="keyword">rows</span>)</span><br></pre></td></tr></table></figure><p><strong>4、我们可以使用递归 CTE 来实现这一点。</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">WITH</span> <span class="keyword">RECURSIVE</span> city_hierarchy <span class="keyword">AS</span> (</span><br><span class="line">  <span class="comment">-- 基础查询：选择根节点，并初始化路径</span></span><br><span class="line">  <span class="keyword">SELECT</span> id, name, parent_id, name::<span class="type">VARCHAR</span> <span class="keyword">AS</span> full_path</span><br><span class="line">  <span class="keyword">FROM</span> cities</span><br><span class="line">  <span class="keyword">WHERE</span> name <span class="operator">=</span> <span class="string">&#x27;中国&#x27;</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">-- 递归查询：选择子节点，并构建路径</span></span><br><span class="line">  <span class="keyword">SELECT</span> c.id, c.name, c.parent_id, (ch.full_path <span class="operator">||</span> <span class="string">&#x27; &gt; &#x27;</span> <span class="operator">||</span> c.name)::<span class="type">VARCHAR</span> <span class="keyword">AS</span> full_path</span><br><span class="line">  <span class="keyword">FROM</span> cities c</span><br><span class="line">  <span class="keyword">INNER</span> <span class="keyword">JOIN</span> city_hierarchy ch <span class="keyword">ON</span> c.parent_id <span class="operator">=</span> ch.id</span><br><span class="line">)</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> city_hierarchy;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;1、假设我们有一个表示中国城市层次结构的表 &lt;code&gt;cities&lt;/code&gt;，其结构如下：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;id&lt;/code&gt;：城市的唯一标识符&lt;/li&gt;
&lt;li&gt;&lt;code&gt;name&lt;/code&gt;：城市的名称&lt;</summary>
      
    
    
    
    <category term="PostgreSQL" scheme="https://wuchu.site/categories/PostgreSQL/"/>
    
    
    <category term="CTE" scheme="https://wuchu.site/tags/CTE/"/>
    
    <category term="SQL" scheme="https://wuchu.site/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>使用CVM搭建PostgreSQL主从架构</title>
    <link href="https://wuchu.site/2024/10/29/cvm_create_m_s/"/>
    <id>https://wuchu.site/2024/10/29/cvm_create_m_s/</id>
    <published>2024-10-29T11:05:11.000Z</published>
    <updated>2024-11-19T11:41:38.731Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用CVM搭建-PostgreSQL-主从架构"><a href="#使用CVM搭建-PostgreSQL-主从架构" class="headerlink" title="使用CVM搭建 PostgreSQL 主从架构"></a>使用CVM搭建 PostgreSQL 主从架构</h2><blockquote><p>PostgreSQL 是一个开源对象关系型数据库管理系统，并侧重于可扩展性和标准的符合性。PostgreSQL 面向企业复杂 SQL 处理的 OLTP 在线事务处理场景，支持 NoSQL 数据类型（JSON&#x2F;XML&#x2F;hstore），支持 GIS（Geographic Information System 或 Geo－Information system）地理信息处理，在可靠性、数据完整性方面有良好声誉，适用于互联网网站、位置应用系统、复杂数据对象处理等应用场景。</p></blockquote><h2 id="软件版本"><a href="#软件版本" class="headerlink" title="软件版本"></a>软件版本</h2><p>本文搭建的 PostgreSQL 组成及版本使用说明如下：</p><ul><li><p>Linux：Linux 操作系统，本文以 CentOS 7.6 为例。</p></li><li><p>PostgreSQL：关系型数据库管理系统，本文以 PostgreSQL 12 为例。</p></li></ul><h2 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h2><ul><li><p>已创建两台云服务器实例（一台云服务器实例作为主节点，另一台云服务器实例作为从节点）。</p></li><li><p>新建的两台云服务器实例已配置安全组规则：放通5432端口。</p></li></ul><h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><h3 id="1、配置主节点"><a href="#1、配置主节点" class="headerlink" title="1、配置主节点"></a>1、配置主节点</h3><p>登录主节点实例，执行以下命令，升级所有包、系统版本和内核。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum update <span class="literal">-y</span></span><br></pre></td></tr></table></figure><p>依次执行以下命令，安装 PostgreSQL。（本文以使用 PostgreSQL 12 版本为例）</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">wget</span> <span class="literal">--no-check-certificate</span> https://download.postgresql.org/pub/repos/yum/reporpms/EL<span class="literal">-7-x86_64</span>/pgdg<span class="literal">-redhat-repo-latest</span>.noarch.rpm</span><br><span class="line">rpm <span class="literal">-ivh</span> pgdg<span class="literal">-redhat-repo-latest</span>.noarch.rpm</span><br><span class="line">yum install postgresql12<span class="literal">-server</span> postgresql12<span class="literal">-contrib</span> <span class="literal">-y</span></span><br><span class="line">/usr/pgsql<span class="literal">-12</span>/bin/postgresql12<span class="literal">-setup</span> initdb</span><br></pre></td></tr></table></figure><p>执行以下命令，启动服务。﻿</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">start</span> postgresql<span class="literal">-12</span>.service</span><br></pre></td></tr></table></figure><p>执行以下命令，设置服务开机自启动。﻿</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable postgresql<span class="literal">-12</span>.service </span><br></pre></td></tr></table></figure><p>执行以下命令，登录 postgres 用户。﻿</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su - postgres</span><br></pre></td></tr></table></figure><p>执行以下命令，进入 PostgreSQL 交互终端。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">psql</span><br></pre></td></tr></table></figure><p>执行以下命令，为用户 postgres 设置密码，增强安全性。﻿</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> postgres <span class="keyword">WITH</span> <span class="keyword">PASSWORD</span> <span class="string">&#x27;*******&#x27;</span>;</span><br></pre></td></tr></table></figure><p>执行以下命令，创建数据库账号，并设置密码及登录权限和备份权限。﻿</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">role</span> 账户名 <span class="keyword">login</span> <span class="keyword">replication</span> <span class="keyword">encrypted</span> <span class="keyword">password</span> <span class="string">&#x27;自定义密码&#x27;</span>;</span><br></pre></td></tr></table></figure><p>本文以创建数据库账号 replica，密码 ****** 为例，则执行以下命令。</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">role</span> <span class="keyword">replica</span> <span class="keyword">login</span> <span class="keyword">replication</span> <span class="keyword">encrypted</span> <span class="keyword">password</span> <span class="string">&#x27;******&#x27;</span>;</span><br></pre></td></tr></table></figure><p>执行以下命令，查询账号是否创建成功。﻿</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> usename <span class="keyword">from</span> pg_user;</span><br></pre></td></tr></table></figure><p>返回如下结果，表示已创建成功。</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">usename  </span><br><span class="line"><span class="comment">----------</span></span><br><span class="line">postgres</span><br><span class="line"><span class="keyword">replica</span></span><br><span class="line">(<span class="number">2</span> <span class="keyword">rows</span>)</span><br></pre></td></tr></table></figure><p>执行以下命令，查询权限是否创建成功。﻿</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> rolname <span class="keyword">from</span> pg_roles;</span><br></pre></td></tr></table></figure><p>返回如下结果，表示已创建成功。﻿</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">rolname      </span><br><span class="line"><span class="comment">-------------------</span></span><br><span class="line">pg_signal_backend</span><br><span class="line">postgres</span><br><span class="line"><span class="keyword">replica</span></span><br><span class="line">(<span class="number">3</span> <span class="keyword">rows</span>)</span><br></pre></td></tr></table></figure><p>输入 <strong>\q</strong>，按 <strong>Enter</strong>，退出 SQL 终端。</p><p>输入 <strong>exit</strong>，按 <strong>Enter</strong>，退出 PostgreSQL。</p><p>执行以下命令，打开 pg_hba.conf 配置文件，设置 replica 用户白名单。﻿</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /var/lib/pgsql/<span class="number">12</span>/data/pg_hba.conf</span><br></pre></td></tr></table></figure><p>按 i 切换至编辑模式，在 IPv4 local connections 段添加如下两行内容：</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">host    <span class="keyword">all</span>             <span class="keyword">all</span>         &lt;从节点的VPC IPv4网段&gt;          md5     #允许 VPC 网段中 md5 密码认证连接</span><br><span class="line">host    <span class="keyword">replication</span>     <span class="keyword">replica</span>     &lt;从节点的VPC IPv4网段&gt;          md5     #允许用户从 <span class="keyword">replication</span> 数据库进行数据同步</span><br></pre></td></tr></table></figure><p>例如，数据库账号为 replica，从节点的 VPC IPv4 网段为 xx.xx.xx.xx&#x2F;16，则在 IPv4 local connections 段添加如下内容：</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">host    <span class="keyword">all</span>             <span class="keyword">all</span>             xx.xx.xx.xx/<span class="number">16</span>         md5</span><br><span class="line">host    <span class="keyword">replication</span>     <span class="keyword">replica</span>         xx.xx.xx.xx/<span class="number">16</span>         md5</span><br></pre></td></tr></table></figure><p>按 <strong>Esc</strong>，输入 <strong>:wq</strong>，保存文件返回。</p><p>执行以下命令，打开 postgresql.conf 文件。﻿</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /var/lib/pgsql/<span class="number">12</span>/data/postgresql.conf</span><br></pre></td></tr></table></figure><p>按 <strong>i</strong> 进入编辑模式，分别找到以下参数，并将参数修改为以下内容：</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">listen_addresses = <span class="string">&#x27;*&#x27;</span>   #监听的内网 IP 地址</span><br><span class="line">max_connections = <span class="number">100</span>    #最大连接数，从库的 max_connections 必须要大于主库的</span><br><span class="line">wal_level = hot_standby  #启用热备模式</span><br><span class="line">synchronous_commit = <span class="keyword">on</span>  #开启同步复制</span><br><span class="line">max_wal_senders = <span class="number">32</span>     #同步最大的进程数量</span><br><span class="line">wal_sender_timeout = <span class="number">60</span>s #流复制主机发送数据的超时时间</span><br></pre></td></tr></table></figure><p>按 <strong>Esc</strong>，输入 <strong>:wq</strong>，保存文件返回。</p><p>执行以下命令，重启服务。﻿</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="keyword">restart</span> postgresql<span class="number">-12.</span>service</span><br></pre></td></tr></table></figure><h3 id="2、配置从节点"><a href="#2、配置从节点" class="headerlink" title="2、配置从节点"></a>2、配置从节点</h3><p>登录从节点实例。</p><p>执行以下命令，升级所有包、系统版本和内核。﻿</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum <span class="keyword">update</span> -y</span><br></pre></td></tr></table></figure><p>依次执行以下命令，安装 PostgreSQL。﻿</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget <span class="comment">--no-check-certificate https://download.postgresql.org/pub/repos/yum/reporpms/EL-7-x86_64/pgdg-redhat-repo-latest.noarch.rpm﻿</span></span><br><span class="line">rpm -ivh pgdg-redhat-repo-latest.noarch.rpm</span><br><span class="line">yum install postgresql12-<span class="keyword">server</span> postgresql12-contrib -y</span><br></pre></td></tr></table></figure><p>执行以下命令，使用 pg_basebackup 基础备份工具制定备份目录。﻿</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pg_basebackup -D /var/lib/pgsql/<span class="number">12</span>/data -h &lt;主节点公网 IP&gt; -p <span class="number">5432</span> -U <span class="keyword">replica</span> -X stream -P</span><br></pre></td></tr></table></figure><p>根据提示，输入数据库账号对应的密码，按 Enter。返回如下结果，表示备份成功。﻿</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Password</span>: </span><br><span class="line"><span class="number">24526</span>/<span class="number">24526</span> kB (<span class="number">100</span>%), <span class="number">1</span>/<span class="number">1</span> <span class="keyword">tablespace</span></span><br></pre></td></tr></table></figure><p>执行以下命令，拷贝 master 配置相关文件。﻿</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp /usr/pgsql<span class="number">-12</span>/<span class="keyword">share</span>/recovery.conf.sample /var/lib/pgsql/<span class="number">12</span>/data/recovery.conf</span><br></pre></td></tr></table></figure><p>执行以下命令，打开 recovery.conf 文件。</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /var/lib/pgsql/<span class="number">12</span>/data/recovery.conf</span><br></pre></td></tr></table></figure><p>按 <strong>i</strong> 切换至编辑模式，分别找到如下参数，并修改为如下内容：</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">standby_mode = <span class="keyword">on</span>     #声明此节点为从库</span><br><span class="line">primary_conninfo = <span class="string">&#x27;host=&lt;主节点公网 IP&gt; port=5432 user=数据库账号 password=数据库密码&#x27;</span> #对应主库的连接信息</span><br><span class="line">recovery_target_timeline = <span class="string">&#x27;latest&#x27;</span> #流复制同步到最新的数据</span><br></pre></td></tr></table></figure><p>按 <strong>Esc</strong>，输入 <strong>:wq</strong>，保存文件返回。</p><p>执行以下命令，打开 postgresql.conf 文件。</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /var/lib/pgsql/<span class="number">12</span>/data/postgresql.conf</span><br></pre></td></tr></table></figure><p>按 <strong>i</strong> 切换至编辑模式，分别找到如下参数，并修改为如下内容：﻿</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">max_connections = <span class="number">1000</span>             # 最大连接数，从库的 max_connections 必须要大于主库的</span><br><span class="line">hot_standby = <span class="keyword">on</span>                   # 开启热备</span><br><span class="line">max_standby_streaming_delay = <span class="number">30</span>s  # 数据流备份的最大延迟时间</span><br><span class="line">wal_receiver_status_interval = <span class="number">1</span>s  # 从节点向主节点报告自身状态的最长间隔时间</span><br><span class="line">hot_standby_feedback = <span class="keyword">on</span>          # 如果有错误的数据复制向主进行反馈</span><br></pre></td></tr></table></figure><p>按 <strong>Esc</strong>，输入 <strong>:wq</strong>，保存文件返回。</p><p>执行以下命令，修改数据目录的属组和属主。﻿</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown -R postgres.postgres /var/lib/pgsql/<span class="number">12</span>/data</span><br></pre></td></tr></table></figure><p>执行以下命令，启动服务。﻿</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="keyword">start</span> postgresql<span class="number">-12.</span>service</span><br></pre></td></tr></table></figure><p>执行以下命令，设置服务开机自启动。</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="keyword">enable</span> postgresql<span class="number">-12.</span>service</span><br></pre></td></tr></table></figure><h3 id="3、验证部署"><a href="#3、验证部署" class="headerlink" title="3、验证部署"></a>3、验证部署</h3><p>执行以下命令，从节点备份目录。﻿</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pg_basebackup -D /var/lib/pgsql/<span class="number">12</span>/data -h &lt;主节点公网 IP&gt; -p <span class="number">5432</span> -U <span class="keyword">replica</span> -X stream -P</span><br></pre></td></tr></table></figure><p>﻿输入数据库密码并按 <strong>Enter</strong>，返回如下结果，则表示已备份成功。﻿</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Password</span>: <span class="number">24526</span>/<span class="number">24526</span> kB (<span class="number">100</span>%), <span class="number">1</span>/<span class="number">1</span> <span class="keyword">tablespace</span></span><br></pre></td></tr></table></figure><p>在主节点中，执行以下命令，查看 sender 进程。﻿</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps aux |grep sender</span><br></pre></td></tr></table></figure><p>﻿在从节点中，执行以下命令，查看 receiver 进程。﻿</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps aux |grep receiver</span><br></pre></td></tr></table></figure><p>返回如下结果，即表示可成功查看到 receiver 进程。</p><p>在主节点中，依次执行以下命令，进入 PostgreSQL 交互终端，在主库中查看从库状态。</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">su - postgres</span><br><span class="line">psql</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> pg_stat_replication;</span><br></pre></td></tr></table></figure><p>﻿返回如下结果，即表示可成功查看到从库状态。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;使用CVM搭建-PostgreSQL-主从架构&quot;&gt;&lt;a href=&quot;#使用CVM搭建-PostgreSQL-主从架构&quot; class=&quot;headerlink&quot; title=&quot;使用CVM搭建 PostgreSQL 主从架构&quot;&gt;&lt;/a&gt;使用CVM搭建 PostgreSQ</summary>
      
    
    
    
    <category term="PostgreSQL" scheme="https://wuchu.site/categories/PostgreSQL/"/>
    
    
    <category term="主从架构" scheme="https://wuchu.site/tags/%E4%B8%BB%E4%BB%8E%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>PostgreSQL系统表</title>
    <link href="https://wuchu.site/2024/10/29/pg-admin-tables/"/>
    <id>https://wuchu.site/2024/10/29/pg-admin-tables/</id>
    <published>2024-10-29T11:05:11.000Z</published>
    <updated>2024-11-19T11:41:38.740Z</updated>
    
    <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><blockquote><p>系统表（System Tables）是 PostgreSQL 中的一组特殊表，用于存储和管理数据库的元数据和系统信息。这些系统表位于 “pg_catalog” 模式下，包含了关于数据库对象（如表、列、索引、约束等）以及其他系统级别信息的元数据。系统表存储了数据库的结构、统计信息、权限、查询计划等重要数据，支持数据库的正常运行和管理。通过查询系统表，您可以获取关于数据库的详细信息，进行数据库管理、性能优化和监控等操作。系统表提供了对数据库对象和系统状态的访问和查询接口，使用户能够了解和操作数据库的内部结构和属性。一些常见的 PostgreSQL 系统表包括 pg_class、pg_attribute、pg_namespace、pg_index、pg_constraint、pg_stat_user_tables 等。这些系统表存储了数据库的表、列、命名空间、索引、约束和统计信息等。</p></blockquote><p>需要注意的是，系统表通常由数据库管理员或具有足够权限的用户访问。对系统表的修改和查询需要谨慎操作，以避免对数据库的破坏或不可逆的更改。</p><h3 id="1、连接postgresql"><a href="#1、连接postgresql" class="headerlink" title="1、连接postgresql"></a>1、连接postgresql</h3><p>打开终端或命令提示符：打开终端（Linux&#x2F;macOS）或命令提示符（Windows）来执行命令。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su - postgres</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">psql</span></span><br></pre></td></tr></table></figure><h3 id="2、列出系统表"><a href="#2、列出系统表" class="headerlink" title="2、列出系统表"></a>2、列出系统表</h3><p>连接到数据库后，执行以下 SQL 查询来列出可用的系统</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> table_name <span class="keyword">FROM</span> information_schema.tables <span class="keyword">WHERE</span> table_schema <span class="operator">=</span> <span class="string">&#x27;pg_catalog&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="3、核心系统表的功能"><a href="#3、核心系统表的功能" class="headerlink" title="3、核心系统表的功能"></a>3、核心系统表的功能</h3><ol><li>pg_class：<br> 功能：存储数据库中的所有表和视图的元数据信息。<br> 字段：relname（表名）、relnamespace（所属命名空间）、reltype（关联类型）等。</li><li>pg_attribute：<br> 功能：包含表和视图的列信息，如列名、数据类型、约束等。<br> 字段：attname（列名）、attrelid（所属表ID）、atttypid（数据类型ID）等。</li><li>pg_namespace：<br> 功能：用于存储数据库中的命名空间（schemas）信息。<br> 字段：nspname（命名空间名称）、nspowner（所有者ID）等。</li><li>pg_index：<br>功能：存储表的索引信息，包括索引名称、索引类型、索引所属的表等。<br>字段：indexrelname（索引名称）、indrelid（所属表ID）、indkey（索引列的顺序）等。</li><li>pg_constraint：<br>功能：用于存储表的约束信息，如主键约束、外键约束等。<br>字段：conname（约束名称）、conrelid（所属表ID）、contype（约束类型）等。</li><li>pg_statistic：<br>功能：存储表的统计信息，用于查询优化。<br>字段：starelid（表ID）、stanumbers（列的统计信息）等。</li><li>pg_type：<br>功能：记录数据库中定义的数据类型信息。<br>字段：typname（类型名称）、typlen（类型长度）、typarray（数组类型ID）等。</li><li>pg_roles：<br>功能：存储数据库角色（用户、组）的信息。<br>字段：rolname（角色名称）、rolsuper（超级用户标志）、rolmembership（成员关系）等。</li><li>pg_database：<br>功能：包含数据库的元数据信息。<br>字段：datname（数据库名称）、datowner（所有者ID）、datcollate（默认排序规则）等。</li><li>pg_views：<br>功能：存储数据库中定义的视图的信息。<br>字段：viewname（视图名称）、viewdefinition（视图定义）等。</li><li>pg_trigger：<br>功能：存储触发器的信息。<br>字段：tgname（触发器名称）、tgrelid（所属表ID）、tgtype（触发事件类型）等。</li><li>pg_language：<br>功能：记录数据库中支持的编程语言的信息。<br>字段：lanname（语言名称）、lanowner（所有者ID）、lanpltrusted（可信标志）等。</li><li>pg_operator：<br>功能：存储数据库中定义的操作符的信息。<br>字段：oprname（操作符名称）、oprleft（左操作数类型ID）、oprright（右操作数类型ID）等。</li><li>pg_enum：<br>功能：用于存储枚举类型的信息。<br>字段：enumtypid（枚举类型ID）、enumlabel（枚举标签值）等。</li><li>pg_conversion：<br>功能：记录字符集转换的规则。<br>字段：conname（转换名称）、connamespace（所属命名空间）、conproc（转换函数ID）等。</li><li>pg_stat_user_tables：<br>功能：包含用户表的统计信息，如行数、更新次数、删除次数等。<br>字段：relid（表ID）、schemaname（模式名称）、relname（表名）等。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;系统表（System Tables）是 PostgreSQL 中的一组特殊表，用于存储和管理数据库的元数据和系统信</summary>
      
    
    
    
    <category term="PostgreSQL" scheme="https://wuchu.site/categories/PostgreSQL/"/>
    
    
    <category term="PG系统表" scheme="https://wuchu.site/tags/PG%E7%B3%BB%E7%BB%9F%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>PostgreSQL参数</title>
    <link href="https://wuchu.site/2024/10/29/pg_params/"/>
    <id>https://wuchu.site/2024/10/29/pg_params/</id>
    <published>2024-10-29T11:05:11.000Z</published>
    <updated>2024-11-19T11:41:38.742Z</updated>
    
    <content type="html"><![CDATA[<ol><li>timescaledb.max_open_chunks_per_insert: 控制每个插入操作中允许打开的最大块数。</li><li>timescaledb.passfile: 指定用于连接到数据库的密码文件的路径。</li><li>timescaledb.remote_data_fetcher: 控制是否启用远程数据获取功能。</li><li>timescaledb.restoring: 控制是否处于恢复状态。</li><li>timescaledb.ssl_dir: 指定SSL证书和密钥文件的目录。</li><li>timescaledb_telemetry.cloud: 控制是否将遥测数据发送到云端。</li><li>timescaledb.telemetry_level: 控制遥测数据的详细程度。</li><li>cos_fdw.enable_https: 控制是否启用HTTPS协议。</li><li>pgaudit.log_mode: 控制审计日志记录的模式。</li><li>enable_async_append: 控制是否启用异步追加功能。</li><li>archive_timeout: 控制归档命令超时时间。</li><li>array_nulls: 控制数组中的空值处理方式。</li><li>audit_file_buffer_size: 指定审计日志文件缓冲区大小。</li><li>audit_file_flush_timeout: 指定审计日志文件刷新超时时间。</li><li>audit_log_directory: 指定审计日志文件存储目录。</li><li>audit_log_filename: 指定审计日志文件名。</li><li>audit_log_rotation_age: 控制审计日志按时间轮转的周期。</li><li>audit_log_rotation_size: 控制审计日志按大小轮转的阈值。</li><li>audit_log_truncate_on_rotation: 控制审计日志轮转时是否截断文件。</li><li>authentication_timeout: 控制认证超时时间。</li><li>auto_explain.log_analyze: 控制是否记录自动解释的分析结果。</li><li>auto_explain.log_buffers: 控制是否记录自动解释的缓冲区信息。</li><li>auto_explain.log_format: 控制自动解释日志的格式。</li><li>auto_explain.log_level: 控制自动解释日志的详细程度。</li><li>auto_explain.log_min_duration: 控制记录自动解释的最小执行时间。</li><li>auto_explain.log_nested_statements: 控制是否记录自动解释的嵌套语句。</li><li>auto_explain.log_settings: 控制是否记录自动解释的配置信息。</li><li>auto_explain.log_timing: 控制是否记录自动解释的时间信息。</li><li>auto_explain.log_triggers: 控制是否记录自动解释的触发器信息。</li><li>auto_explain.log_verbose: 控制是否记录自动解释的详细信息。</li><li>auto_explain.log_wal: 控制是否记录自动解释的WAL信息。</li><li>auto_explain.sample_rate: 控制自动解释的采样率。</li><li>bytea_output: 控制bytea数据类型的输出格式。</li><li>autovacuum_analyze_scale_factor: 控制自动分析的比例因子。</li><li>autovacuum_analyze_threshold: 控制自动分析的阈值。</li><li>autovacuum_freeze_max_age: 控制自动冻结的最大年龄。</li><li>autovacuum_max_workers: 控制自动清理的最大工作进程数。</li><li>autovacuum_multixact_freeze_max_age: 控制自动多事务冻结的最大年龄。</li><li>autovacuum_naptime: 控制自动清理的休眠时间。</li><li>autovacuum_vacuum_cost_delay: 控制自动清理的成本延迟。</li><li>autovacuum_vacuum_cost_limit: 控制自动清理的成本限制。</li><li>autovacuum_vacuum_insert_scale_factor: 控制自动清理插入比例因子。</li><li>autovacuum_vacuum_insert_threshold: 控制自动清理插入阈值。</li><li>autovacuum_vacuum_scale_factor: 控制自动清理比例因子。</li><li>autovacuum_vacuum_threshold: 控制自动清理阈值。</li><li>autovacuum_work_mem: 控制自动清理的工作内存。</li><li>backend_flush_after: 控制后端进程刷新数据的延迟时间。</li><li>backslash_quote: 控制反斜杠引用的处理方式。</li><li>backtrace_functions: 控制是否记录函数调用堆栈信息。</li><li>basebackup_exclude_paths: 指定基本备份时要排除的路径。</li><li>bgwriter_delay: 控制后台写入进程的延迟时间。</li><li>bgwriter_flush_after: 控制后台写入进程刷新数据的延迟时间。</li><li>bgwriter_lru_maxpages: 控制后台写入进程LRU缓存的最大页数。</li><li>bgwriter_lru_multiplier: 控制后台写入进程LRU缓存的乘数。</li><li>check_function_bodies: 控制是否检查函数体。</li><li>checkpoint_completion_target: 控制检查点完成目标。</li><li>checkpoint_flush_after: 控制检查点刷新数据的延迟时间。</li><li>checkpoint_timeout: 控制检查点超时时间。</li><li>checkpoint_warning: 控制检查点警告阈值。</li><li>client_connection_check_interval: 控制客户端连接检查间隔。</li><li>client_encoding: 控制客户端编码。</li><li>client_min_messages: 控制客户端最小消息级别。</li><li>commit_delay: 控制提交延迟时间。</li><li>commit_siblings: 控制提交同级数。</li><li>compute_query_id: 控制是否计算查询ID。</li><li>constraint_exclusion: 控制约束排除策略。</li><li>cpu_index_tuple_cost: 控制CPU索引元组成本。</li><li>cpu_operator_cost: 控制CPU操作成本。</li><li>cpu_tuple_cost: 控制CPU元组成本。</li><li>createrole_self_grant: 控制是否允许自我授予角色。</li><li>cron.database_name: 指定Cron作业的数据库名称。</li><li>cron.enable_superuser_jobs: 控制是否允许超级用户运行Cron作业。</li><li>cron.log_min_messages: 控制Cron作业的最小消息级别。</li><li>cron.log_run: 控制是否记录Cron作业运行信息。</li><li>cron.log_statement: 控制是否记录Cron作业语句信息。</li><li>cron.max_running_jobs: 控制最大运行Cron作业数。</li><li>cron.use_background_workers: 控制是否使用后台工作进程运行Cron作业。</li><li>cursor_tuple_fraction: 控制游标元组分数。</li><li>datestyle: 控制日期样式。</li><li>db_user_namespace: 控制数据库用户命名空间。</li><li>deadlock_timeout: 控制死锁超时时间。</li><li>debug_io_direct: 控制是否启用IO直接调试。</li><li>debug_logical_replication_streaming: 控制逻辑复制流调试。</li><li>debug_parallel_query: 控制并行查询调试。</li><li>debug_pretty_print: 控制是否启用漂亮打印调试。</li><li>debug_print_parse: 控制是否打印解析调试。</li><li>debug_print_plan: 控制是否打印计划调试。</li><li>debug_print_rewritten: 控制是否打印重写调试。</li><li>default_statistics_target: 控制默认统计目标。</li><li>default_table_access_method: 控制默认表访问方法。</li><li>default_toast_compression: 控制默认TOAST压缩。</li><li>default_transaction_deferrable: 控制默认事务是否可延迟。</li><li>enable_sort: 控制是否启用排序。</li><li>default_transaction_isolation: 控制默认事务隔离级别。</li><li>disable_dblink_connect_to_other: 控制是否禁用DBLink连接到其他数据库。</li><li>effective_cache_size: 控制有效缓存大小。</li><li>effective_io_concurrency: 控制有效IO并发性。</li><li>enable_bitmapscan: 控制是否启用位图扫描。</li><li>enable_gathermerge: 控制是否启用聚合合并。</li><li>enable_hashagg: 控制是否启用哈希聚合。</li><li>enable_hashjoin: 控制是否启用哈希连接。</li><li>enable_incremental_sort: 控制是否启用增量排序。</li><li>enable_indexonlyscan: 控制是否启用仅索引扫描。</li><li>enable_indexscan: 控制是否启用索引扫描。</li><li>enable_material: 控制是否启用材料化。</li><li>enable_memoize: 控制是否启用记忆化。</li><li>enable_mergejoin: 控制是否启用合并连接。</li><li>enable_nestloop: 控制是否启用嵌套循环。</li><li>enable_parallel_append: 控制是否启用并行追加。</li><li>enable_parallel_hash: 控制是否启用并行哈希。</li><li>enable_partition_pruning: 控制是否启用分区修剪。</li><li>enable_partitionwise_aggregate: 控制是否启用分区聚合。</li><li>enable_partitionwise_join: 控制是否启用分区连接。</li><li>enable_presorted_aggregate: 控制是否启用预排序聚合。</li><li>enable_seqscan: 控制是否启用顺序扫描。</li><li>enable_superuser_call_all_event_triggers: 控制超级用户是否调用所有事件触发器。</li><li>enable_superuser_call_all_functions: 控制超级用户是否调用所有函数。</li><li>enable_tidscan: 控制是否启用TID扫描。</li><li>escape_string_warning: 控制是否警告转义字符串。</li><li>exit_on_error: 控制是否在错误时退出。</li><li>extension_blacklist: 控制扩展黑名单。</li><li>extra_float_digits: 控制额外浮点数位数。</li><li>failover_slot_timeline_diverged_option: 控制故障转移时时间线分歧选项。</li><li>from_collapse_limit: 控制FROM合并限制。</li><li>geqo: 控制是否启用遗传查询优化。</li><li>geqo_effort: 控制遗传查询优化的努力程度。</li><li>geqo_generations: 控制遗传查询优化的代数。</li><li>geqo_pool_size: 控制遗传查询优化的池大小。</li><li>geqo_seed: 控制遗传查询优化的种子。</li><li>geqo_selection_bias: 控制遗传查询优化的选择偏差。</li><li>geqo_threshold: 控制遗传查询优化的阈值。</li><li>gin_fuzzy_search_limit: 控制GIN模糊搜索限制。</li><li>jit_expressions: 控制JIT表达式。</li><li>gin_pending_list_limit: 控制GIN挂起列表限制。</li><li>gss_accept_delegation: 控制GSS接受委托。</li><li>hash_mem_multiplier: 控制哈希内存乘数。</li><li>hot_standby_feedback: 控制热备份反馈。</li><li>huge_pages: 控制是否使用大页。</li><li>huge_page_size: 控制大页大小。</li><li>tencentdb_pwdcheck.min_digit_number: 控制密码检查的最小数字数。</li><li>icu_validation_level: 控制ICU验证级别。</li><li>idle_in_transaction_session_timeout: 控制事务空闲超时时间。</li><li>idle_session_timeout: 控制空闲会话超时时间。</li><li>ignore_invalid_pages: 控制是否忽略无效页面。</li><li>ignore_system_indexes: 控制是否忽略系统索引。</li><li>IntervalStyle: 控制间隔样式。</li><li>jit: 控制是否启用JIT编译。</li><li>jit_above_cost: 控制JIT编译的成本阈值。</li><li>jit_debugging_support: 控制JIT调试支持。</li><li>jit_dump_bitcode: 控制是否转储JIT位码。</li><li>jit_inline_above_cost: 控制JIT内联成本阈值。</li><li>jit_optimize_above_cost: 控制JIT优化成本阈值。</li><li>jit_profiling_support: 控制JIT性能分析支持。</li><li>jit_provider: 控制JIT提供者。</li><li>jit_tuple_deforming: 控制JIT元组解析。</li><li>join_collapse_limit: 控制连接合并限制。</li><li>tencentdb_pwdcheck.min_length: 控制密码检查的最小长度。</li><li>lc_monetary: 控制货币本地化。</li><li>lc_numeric: 控制数字本地化。</li><li>lc_time: 控制时间本地化。</li><li>lock_timeout: 控制锁超时时间。</li><li>log_autovacuum_min_duration: 控制自动清理最小日志记录时间。</li><li>log_checkpoints: 控制检查点日志记录。</li><li>log_connections: 控制连接日志记录。</li><li>log_disconnections: 控制断开连接日志记录。</li><li>log_duration: 控制持续时间日志记录。</li><li>log_error_verbosity: 控制错误详细程度。</li><li>log_executor_stats: 控制执行器统计日志记录。</li><li>log_filename: 指定日志文件名。</li><li>tencentdb_pwdcheck.min_lowercase_number: 控制密码检查的最小小写字母数。</li><li>logical_decoding_work_mem: 控制逻辑解码工作内存。</li><li>log_line_prefix: 控制日志行前缀。</li><li>log_lock_waits: 控制锁等待日志记录。</li><li>log_min_duration_sample: 控制最小持续时间采样。</li><li>log_min_duration_statement: 控制最小持续时间语句。</li><li>log_min_error_statement: 控制最小错误语句级别。</li><li>log_min_messages: 控制最小消息级别。</li><li>log_parameter_max_length: 控制参数最大长度。</li><li>log_parameter_max_length_on_error: 控制错误时参数最大长度。</li><li>log_parser_stats: 控制解析器统计日志记录。</li><li>log_planner_stats: 控制计划统计日志记录。</li><li>log_recovery_conflict_waits: 控制恢复冲突等待日志记录。</li><li>log_replication_commands: 控制复制命令日志记录。</li><li>log_rotation_age: 控制日志轮转周期。</li><li>log_rotation_size: 控制日志轮转大小。</li><li>log_startup_progress_interval: 控制启动进度日志记录间隔。</li><li>log_statement: 控制语句日志记录。</li><li>log_statement_sample_rate: 控制语句采样率。</li><li>log_statement_stats: 控制语句统计日志记录。</li><li>log_temp_files: 控制临时文件日志记录。</li><li>log_timezone: 控制日志时区。</li><li>log_transaction_sample_rate: 控制事务采样率。</li><li>log_truncate_on_rotation: 控制轮转时是否截断日志。</li><li>maintenance_io_concurrency: 控制维护IO并发性。</li><li>maintenance_work_mem: 控制维护工作内存。</li><li>max_connections: 控制最大连接数。</li><li>max_locks_per_transaction: 控制每个事务的最大锁数。</li><li>max_logical_replication_workers: 控制最大逻辑复制工作进程数。</li><li>max_parallel_apply_workers_per_subscription: 控制每个订阅的最大并行应用工作进程数。</li><li>max_parallel_maintenance_workers: 控制最大并行维护工作进程数。</li><li>max_parallel_workers: 控制最大并行工作进程数。</li><li>search_path: 控制搜索路径。</li><li>max_parallel_workers_per_gather: 控制每个聚集操作的最大并行工作进程数。</li><li>max_pred_locks_per_page: 控制每页的最大预测锁数。</li><li>max_pred_locks_per_relation: 控制每个关系的最大预测锁数。</li><li>max_pred_locks_per_transaction: 控制每个事务的最大预测锁数。</li><li>max_prepared_transactions: 控制最大准备事务数。</li><li>max_replication_slots: 控制最大复制槽数。</li><li>pgaudit.log_level: 控制审计日志级别。</li><li>max_slot_wal_keep_size: 控制最大槽保留WAL大小。</li><li>max_stack_depth: 控制最大堆栈深度。</li><li>max_standby_archive_delay: 控制最大备用归档延迟。</li><li>max_standby_streaming_delay: 控制最大备用流延迟。</li><li>max_sync_workers_per_subscription: 控制每个订阅的最大同步工作进程数。</li><li>max_wal_senders: 控制最大WAL发送者数。</li><li>max_wal_size: 控制最大WAL大小。</li><li>max_worker_processes: 控制最大工作进程数。</li><li>min_dynamic_shared_memory: 控制最小动态共享内存。</li><li>min_parallel_index_scan_size: 控制最小并行索引扫描大小。</li><li>min_parallel_table_scan_size: 控制最小并行表扫描大小。</li><li>min_wal_size: 控制最小WAL大小。</li><li>old_snapshot_threshold: 控制旧快照阈值。</li><li>parallel_leader_participation: 控制并行领导者参与。</li><li>parallel_setup_cost: 设置并行查询的启动成本，即启动并行查询所需的额外成本。</li><li>parallel_tuple_cost: 设置并行查询的元组成本，即并行查询每处理一个元组所需的额外成本。</li><li>password_encryption: 控制密码的加密方式。</li><li>pgaudit.hide_password: 控制是否隐藏密码信息。</li><li>pgaudit.log: 控制是否记录审计日志。</li><li>pgaudit.log_catalog: 控制是否记录审计日志中的目录操作。</li><li>pgaudit.log_client: 控制是否记录审计日志中的客户端信息。</li><li>pgaudit.log_error_statement: 控制是否记录审计日志中的错误语句。</li><li>pgaudit.log_parameter: 控制是否记录审计日志中的参数信息。</li><li>pgaudit.log_relation: 控制是否记录审计日志中的关系信息。</li><li>pgaudit.log_rows: 控制是否记录审计日志中的行信息。</li><li>pgaudit.log_statement: 控制是否记录审计日志中的语句信息。</li><li>pgaudit.log_statement_once: 控制是否只记录一次相同的语句信息。</li><li>pgaudit.role: 设置审计日志的角色。</li><li>pg_stat_statements.max: 设置pg_stat_statements插件中最多保存的查询数量。</li><li>pg_stat_statements.save: 设置pg_stat_statements插件是否保存查询计划。</li><li>pg_stat_statements.track: 设置pg_stat_statements插件是否跟踪查询。</li><li>pg_stat_statements.track_planning: 设置pg_stat_statements插件是否跟踪查询计划。</li><li>pg_stat_statements.track_utility: 设置pg_stat_statements插件是否跟踪utility命令。</li><li>plan_cache_mode: 设置计划缓存模式。</li><li>post_auth_delay: 设置认证后延迟时间。</li><li>send_abort_for_crash: 控制是否在崩溃时发送中止信号。</li><li>pre_auth_delay: 设置认证前延迟时间。</li><li>quote_all_identifiers: 控制是否引用所有标识符。</li><li>random_page_cost: 设置随机访问磁盘页的成本。</li><li>rds_server_handler.fdw_whitelist: 设置RDS服务器处理程序的FDW白名单。</li><li>rds_server_handler.shark_api_url: 设置RDS服务器处理程序的shark API URL。</li><li>recovery_init_sync_method: 设置恢复初始同步方法。</li><li>recovery_prefetch: 设置恢复预取大小。</li><li>recursive_worktable_factor: 设置递归工作表因子。</li><li>remove_temp_files_after_crash: 控制是否在崩溃后删除临时文件。</li><li>reserved_connections: 设置保留连接数。</li><li>row_security: 控制行级安全。</li><li>scram_iterations: 设置SCRAM迭代次数。</li><li>send_abort_for_kill: 控制是否在kill时发送中止信号。</li><li>seq_page_cost: 设置顺序访问磁盘页的成本。</li><li>session_replication_role: 设置会话复制角色。</li><li>soft_limit_connections: 设置软连接限制。</li><li>squeeze.max_xlock_time: 设置最大X锁时间。</li><li>squeeze.worker_autostart: 控制是否自动启动压缩工作线程。</li><li>squeeze.worker_role: 设置压缩工作线程角色。</li><li>tencentdb_az_five: 设置腾讯云数据库的五个可用区。</li><li>standard_conforming_strings: 控制是否符合标准的字符串处理。</li><li>statement_timeout: 设置语句超时时间。</li><li>stats_fetch_consistency: 设置统计数据获取一致性。</li><li>synchronize_seqscans: 控制是否同步顺序扫描。</li><li>synchronous_commit: 设置同步提交方式。</li><li>tcp_keepalives_count: 设置TCP保活计数。</li><li>tcp_keepalives_idle: 设置TCP保活空闲时间。</li><li>tcp_keepalives_interval: 设置TCP保活间隔时间。</li><li>tcp_user_timeout: 设置TCP用户超时时间。</li><li>temp_buffers: 设置临时缓冲区大小。</li><li>tencentdb_audit_message_truncate_length: 设置腾讯云数据库审计消息截断长度。</li><li>timescaledb.max_cached_chunks_per_hypertable: 设置每个超表的最大缓存块数。</li><li>tencentdb_creating_extension_as_superuser: 控制是否以超级用户身份创建扩展。</li><li>tencentdb_enable_copy_program: 控制是否启用复制程序。</li><li>tencentdb_enable_creating_extension_do_copy: 控制是否启用创建扩展时进行复制。</li><li>tencentdb_enable_do_copy: 控制是否启用DO COPY。</li><li>tencentdb_enable_superuser_unsafe_behaviour: 控制是否启用超级用户不安全行为。</li><li>tencentdb_enable_trusted_extension: 控制是否启用受信任的扩展。</li><li>tencentdb_pwdcheck.delay_milliseconds: 设置密码检查延迟时间。</li><li>tencentdb_pwdcheck.enable_tencentdb_pwdcheck: 控制是否启用腾讯云数据库密码检查。</li><li>tencentdb_pwdcheck.max_length: 设置密码检查的最大长度。</li><li>tencentdb_pwdcheck.min_special_character_number: 设置密码检查的最小特殊字符数。</li><li>tencentdb_pwdcheck.min_uppercase_number: 设置密码检查的最小大写字母数。</li><li>tencentdb_system_stat.sampling_interval: 设置腾讯云数据库系统统计采样间隔。</li><li>timescaledb.disable_load: 控制是否禁用加载。</li><li>timescaledb.enable_2pc: 控制是否启用两阶段提交。</li><li>timescaledb.enable_async_append: 控制是否启用异步追加。</li><li>timescaledb.enable_cagg_reorder_groupby: 控制是否启用Cagg重新排序groupby。</li><li>timescaledb.enable_chunk_append: 控制是否启用块追加。</li><li>timescaledb.enable_client_ddl_on_data_nodes: 控制是否在数据节点上启用客户端DDL。</li><li>timescaledb.enable_connection_binary_data: 控制是否启用连接二进制数据。</li><li>timescaledb.enable_constraint_aware_append: 控制是否启用约束感知追加。</li><li>timescaledb.enable_constraint_exclusion: 控制是否启用约束排除。</li><li>timescaledb.enable_optimizations: 控制是否启用优化。</li><li>timescaledb.enable_ordered_append: 控制是否启用有序追加。</li><li>timescaledb.enable_parallel_chunk_append: 控制是否启用并行块追加。</li><li>timescaledb.enable_per_data_node_queries: 控制是否启用每个数据节点的查询。</li><li>timescaledb.enable_qual_propagation: 控制是否启用质量传播。</li><li>timescaledb.enable_remote_explain: 控制是否启用远程解释。</li><li>timescaledb.enable_runtime_exclusion: 控制是否启用运行时排除。</li><li>timescaledb.enable_skipscan: 控制是否启用跳过扫描。</li><li>timescaledb.enable_transparent_decompression: 控制是否启用透明解压缩。</li><li>timescaledb.last_tuned: 最后调整的时间。</li><li>timescaledb.last_tuned_version: 最后调整的版本。</li><li>timescaledb.license: TimescaleDB的许可证。</li><li>timescaledb.max_background_workers: 设置最大后台工作线程数。</li><li>timezone: 设置时区。</li><li>timezone_abbreviations: 设置时区缩写。</li><li>topn.number_of_counters: 设置TopN计数器数量。</li><li>trace_notify: 控制是否跟踪通知。</li><li>trace_sort: 控制是否跟踪排序。</li><li>track_activities: 控制是否跟踪活动。</li><li>track_activity_query_size: 设置跟踪活动查询大小。</li><li>track_commit_timestamp: 控制是否跟踪提交时间戳。</li><li>track_functions: 控制是否跟踪函数。</li><li>track_io_timing: 控制是否跟踪IO时间。</li><li>track_wal_io_timing: 控制是否跟踪WAL IO时间。</li><li>transaction_deferrable: 设置事务是否可延迟。</li><li>transaction_read_only: 设置事务是否只读。</li><li>transform_null_equals: 控制是否将NULL转换为等号。</li><li>vacuum_buffer_usage_limit: 设置VACUUM缓冲区使用限制。</li><li>vacuum_cost_delay: 设置VACUUM成本延迟。</li><li>vacuum_cost_limit: 设置VACUUM成本限制。</li><li>vacuum_cost_page_dirty: 设置VACUUM脏页成本。</li><li>vacuum_cost_page_hit: 设置VACUUM命中页成本。</li><li>vacuum_cost_page_miss: 设置VACUUM未命中页成本。</li><li>vacuum_failsafe_age: 设置VACUUM失败安全年龄。</li><li>vacuum_freeze_min_age: 设置VACUUM冻结最小年龄。</li><li>vacuum_freeze_table_age: 设置VACUUM冻结表年龄。</li><li>vacuum_multixact_failsafe_age: 设置VACUUM多事务失败安全年龄。</li><li>vacuum_multixact_freeze_min_age: 设置VACUUM多事务冻结最小年龄。</li><li>vacuum_multixact_freeze_table_age: 设置VACUUM多事务冻结表年龄。</li><li>wal_buffers: 设置WAL缓冲区大小。</li><li>wal_decode_buffer_size: 设置WAL解码缓冲区大小。</li><li>wal_keep_size: 设置WAL保留大小。</li><li>wal_level: 设置WAL级别。</li><li>wal_log_hints: 控制是否记录WAL日志提示。</li><li>wal_receiver_create_temp_slot: 控制是否创建临时插槽。</li><li>wal_receiver_timeout: 设置WAL接收超时。</li><li>wal_sender_timeout: 设置WAL发送超时。</li><li>wal_skip_threshold: 设置WAL跳过阈值。</li><li>wal_writer_delay: 设置WAL写入延迟。</li><li>wal_writer_flush_after: 设置WAL写入后刷新。</li><li>work_mem: 设置工作内存大小。</li><li>xmlbinary: 设置XML二进制格式。</li><li>xmloption: 设置XML选项。</li><li>cos_fdw.internal_middle_url: 设置COS FDW内部中间URL。</li><li>cos_fdw.internal_domain_url: 设置COS FDW内部域URL。</li><li>shared_preload_libraries: 设置共享预加载库。</li><li>temp_file_limit: 设置临时文件限制。</li><li>cos_fdw.domain_url: 设置COS FDW域URL。</li><li>tencentdb_serverless.min_cpu_cores: 设置腾讯云数据库无服务器最小CPU核心数。</li><li>tencentdb_serverless.max_cpu_cores: 设置腾讯云数据库无服务器最大CPU核心数。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;timescaledb.max_open_chunks_per_insert: 控制每个插入操作中允许打开的最大块数。&lt;/li&gt;
&lt;li&gt;timescaledb.passfile: 指定用于连接到数据库的密码文件的路径。&lt;/li&gt;
&lt;li&gt;timescaledb</summary>
      
    
    
    
    <category term="PostgreSQL" scheme="https://wuchu.site/categories/PostgreSQL/"/>
    
    
    <category term="PG参数" scheme="https://wuchu.site/tags/PG%E5%8F%82%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>XID用的太多怎么办</title>
    <link href="https://wuchu.site/2024/10/28/xid_deal/"/>
    <id>https://wuchu.site/2024/10/28/xid_deal/</id>
    <published>2024-10-28T15:54:40.000Z</published>
    <updated>2024-11-19T11:41:38.747Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-查看哪个库xid最小"><a href="#1-查看哪个库xid最小" class="headerlink" title="1.查看哪个库xid最小"></a>1.查看哪个库xid最小</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> datname,(<span class="number">2147483647</span><span class="operator">-</span>pg_catalog.age(datfrozenxid))::<span class="type">int</span> <span class="keyword">FROM</span> pg_database <span class="keyword">order</span> <span class="keyword">by</span> <span class="number">2</span>; </span><br></pre></td></tr></table></figure><h4 id="2-进入对应的库中，查看表年龄"><a href="#2-进入对应的库中，查看表年龄" class="headerlink" title="2.进入对应的库中，查看表年龄"></a>2.进入对应的库中，查看表年龄</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> c.oid::regclass <span class="keyword">as</span> table_name, pg_size_pretty(pg_relation_size(c.oid)), greatest(age(c.relfrozenxid),age(t.relfrozenxid)) <span class="keyword">as</span> age <span class="keyword">FROM</span> pg_class c <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> pg_class t <span class="keyword">ON</span> c.reltoastrelid <span class="operator">=</span> t.oid <span class="keyword">WHERE</span> c.relkind <span class="keyword">IN</span> (<span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;m&#x27;</span>) <span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure><h4 id="3-对小的表执行vacuum，如果全库都低，直接全库清理；"><a href="#3-对小的表执行vacuum，如果全库都低，直接全库清理；" class="headerlink" title="3.对小的表执行vacuum，如果全库都低，直接全库清理；"></a>3.对小的表执行vacuum，如果全库都低，直接全库清理；</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">单表清理：vacuum verbose 表名;</span><br><span class="line">全库清理：vacuum verbose;</span><br></pre></td></tr></table></figure><h4 id="4-注意执行的时候新起一个会话，看看自己的vacuum有没有被autovacuum阻塞。如果有的话，可以干掉autovacuum"><a href="#4-注意执行的时候新起一个会话，看看自己的vacuum有没有被autovacuum阻塞。如果有的话，可以干掉autovacuum" class="headerlink" title="4.注意执行的时候新起一个会话，看看自己的vacuum有没有被autovacuum阻塞。如果有的话，可以干掉autovacuum"></a>4.注意执行的时候新起一个会话，看看自己的vacuum有没有被autovacuum阻塞。如果有的话，可以干掉autovacuum</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> pid, state,wait_event,wait_event_type,usename, <span class="built_in">EXTRACT</span>(EPOCH <span class="keyword">FROM</span> (now()<span class="operator">-</span>query_start)), substr(query, <span class="number">0</span>, <span class="number">150</span>) <span class="keyword">from</span> pg_stat_activity <span class="keyword">where</span> state <span class="operator">!=</span> <span class="string">&#x27;idle&#x27;</span> <span class="keyword">and</span> <span class="built_in">EXTRACT</span>(EPOCH <span class="keyword">FROM</span> (now()<span class="operator">-</span>xact_start)) <span class="operator">&gt;</span> <span class="number">300</span>;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> pg_terminate_backend(<span class="number">33431</span>);</span><br></pre></td></tr></table></figure><blockquote><p>确保机器内存足够的情况下增大内存参数可以加速清理：set maintenance_work_mem &#x3D; ‘10GB’; </p></blockquote><p>xid降低的原因：</p><ul><li>1.业务xid消耗过快或者autovacuum速度慢，先手动清理。这种情况下通过调整实例autovacuum相关参数，加快实例清理。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">autovacuum_analyze_scale_factor</span><br><span class="line">autovacuum_analyze_threshold</span><br><span class="line">autovacuum_vacuum_scale_factor</span><br><span class="line">autovacuum_vacuum_threshold</span><br><span class="line">autovacuum_vacuum_cost_limit</span><br><span class="line">autovacuum_vacuum_cost_delay</span><br></pre></td></tr></table></figure><ul><li>2.slot残留，联系用户清理，紧急情况下，自行清理。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">处理方法：</span><br><span class="line">查询：<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> pg_replication_slots <span class="keyword">where</span> active<span class="operator">=</span><span class="string">&#x27;f&#x27;</span>;</span><br><span class="line">清理：<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> pg_drop_replication_slot(【slots_name】);</span><br></pre></td></tr></table></figure><ul><li>3.长事务残留，联系用户清理，紧急情况下，自行清理。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> pid, state,wait_event,wait_event_type,usename, <span class="built_in">EXTRACT</span>(EPOCH <span class="keyword">FROM</span> (now()<span class="operator">-</span>query_start)), substr(query, <span class="number">0</span>, <span class="number">150</span>) <span class="keyword">from</span> pg_stat_activity <span class="keyword">where</span> state <span class="operator">!=</span> <span class="string">&#x27;idle&#x27;</span> <span class="keyword">and</span> <span class="built_in">EXTRACT</span>(EPOCH <span class="keyword">FROM</span> (now()<span class="operator">-</span>xact_start)) <span class="operator">&gt;</span> <span class="number">300</span>;</span><br></pre></td></tr></table></figure><ul><li><p>4.autovacuum_freeze_max_age参数设置过大，导致没有触发autovacuum，联系用户处理</p></li><li><p>5.临时表所在的会话未断开，阻塞xid回收，联系用户杀掉长连接，或者重启实例</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">查看剩余的xid：</span><br><span class="line"><span class="keyword">SELECT</span> datname,(<span class="number">2147483647</span><span class="operator">-</span>pg_catalog.age(datfrozenxid))::<span class="type">int</span> <span class="keyword">FROM</span> pg_database <span class="keyword">order</span> <span class="keyword">by</span> <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">每个表的年龄排序：</span><br><span class="line"><span class="keyword">SELECT</span> c.oid::regclass <span class="keyword">as</span> table_name, pg_size_pretty(pg_relation_size(c.oid)), greatest(age(c.relfrozenxid),age(t.relfrozenxid)) <span class="keyword">as</span> age <span class="keyword">FROM</span> pg_class c <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> pg_class t <span class="keyword">ON</span> c.reltoastrelid <span class="operator">=</span> t.oid <span class="keyword">WHERE</span> c.relkind <span class="keyword">IN</span> (<span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;m&#x27;</span>) <span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure><h3 id="报错处理方法："><a href="#报错处理方法：" class="headerlink" title="报错处理方法："></a>报错处理方法：</h3><blockquote><p>ERROR:  found xmin 414915252 from before relfrozenxid 794253244</p></blockquote><p>该报错为PG老版本bug导致，需要清理一下relcache，有两种方法：</p><ul><li>1、重启数据库，重启后会重新读入新数据内容到relcache中，相当于刷新relcache。</li><li>2、移除对应数据目录中的pg_internal.init文件，数据库会自动生成一个新的。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;1-查看哪个库xid最小&quot;&gt;&lt;a href=&quot;#1-查看哪个库xid最小&quot; class=&quot;headerlink&quot; title=&quot;1.查看哪个库xid最小&quot;&gt;&lt;/a&gt;1.查看哪个库xid最小&lt;/h4&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;ta</summary>
      
    
    
    
    <category term="PostgreSQL" scheme="https://wuchu.site/categories/PostgreSQL/"/>
    
    
    <category term="xid" scheme="https://wuchu.site/tags/xid/"/>
    
  </entry>
  
  <entry>
    <title>Redux的基本原理</title>
    <link href="https://wuchu.site/2024/08/13/redux/"/>
    <id>https://wuchu.site/2024/08/13/redux/</id>
    <published>2024-08-13T12:43:52.000Z</published>
    <updated>2024-11-19T11:41:38.742Z</updated>
    
    <content type="html"><![CDATA[<img                         lazyload                       alt="image"                       data-src="/2024/08/13/redux/redux.gif"                        class="" title="图片引用方法一"                 ><h3 id="求和案例-redux精简版"><a href="#求和案例-redux精简版" class="headerlink" title="求和案例_redux精简版"></a>求和案例_redux精简版</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">1</span>).去除<span class="title class_">Count</span>组件自身的状态</span><br><span class="line">(<span class="number">2</span>).<span class="property">src</span>下建立:</span><br><span class="line">    -redux</span><br><span class="line">        -store.<span class="property">js</span></span><br><span class="line">        -count_reducer.<span class="property">js</span></span><br><span class="line"></span><br><span class="line">(<span class="number">3</span>).<span class="property">store</span>.<span class="property">js</span>：</span><br><span class="line">    <span class="number">1</span>).引入redux中的createStore函数，创建一个store</span><br><span class="line">    <span class="number">2</span>).<span class="property">createStore</span>调用时要传入一个为其服务的reducer</span><br><span class="line">    <span class="number">3</span>).记得暴露store对象</span><br><span class="line"></span><br><span class="line">(<span class="number">4</span>).<span class="property">count_reducer</span>.<span class="property">js</span>：</span><br><span class="line">    <span class="number">1</span>).<span class="property">reducer</span>的本质是一个函数，接收：preState,action，返回加工后的状态</span><br><span class="line">    <span class="number">2</span>).<span class="property">reducer</span>有两个作用：初始化状态，加工状态</span><br><span class="line">    <span class="number">3</span>).<span class="property">reducer</span>被第一次调用时，是store自动触发的，</span><br><span class="line">                    传递的preState是<span class="literal">undefined</span>,</span><br><span class="line">                    传递的action是:&#123;<span class="attr">type</span>:<span class="string">&#x27;@@REDUX/INIT_a.2.b.4&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">(<span class="number">5</span>).在index.<span class="property">js</span>中监测store中状态的改变，一旦发生改变重新渲染&lt;<span class="title class_">App</span>/&gt;</span><br><span class="line">    备注：redux只负责管理状态，至于状态的改变驱动着页面的展示，要靠我们自己写。</span><br></pre></td></tr></table></figure><h3 id="求和案例-redux完整版"><a href="#求和案例-redux完整版" class="headerlink" title="求和案例_redux完整版"></a>求和案例_redux完整版</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">新增文件：</span><br><span class="line"><span class="number">1.</span>count_action.<span class="property">js</span> 专门用于创建action对象</span><br><span class="line"><span class="number">2.</span>constant.<span class="property">js</span> 放置容易写错的type值</span><br></pre></td></tr></table></figure><h3 id="求和案例-redux异步action版"><a href="#求和案例-redux异步action版" class="headerlink" title="求和案例_redux异步action版"></a>求和案例_redux异步action版</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">1</span>).明确：延迟的动作不想交给组件自身，想交给<span class="title function_">action</span></span><br><span class="line">(<span class="number">2</span>).何时需要异步action：想要对状态进行操作，但是具体的数据靠异步任务返回。</span><br><span class="line">(<span class="number">3</span>).具体编码：</span><br><span class="line"><span class="number">1</span>).<span class="property">yarn</span> add redux-thunk，并配置在store中</span><br><span class="line"><span class="number">2</span>).创建action的函数不再返回一般对象，而是一个函数，该函数中写异步任务。</span><br><span class="line"><span class="number">3</span>).异步任务有结果后，分发一个同步的action去真正操作数据。</span><br><span class="line">(<span class="number">4</span>).备注：异步action不是必须要写的，完全可以自己等待异步任务的结果了再去分发同步action。</span><br></pre></td></tr></table></figure><h3 id="求和案例-react-redux基本使用"><a href="#求和案例-react-redux基本使用" class="headerlink" title="求和案例_react-redux基本使用"></a>求和案例_react-redux基本使用</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">1</span>).明确两个概念：</span><br><span class="line">        <span class="number">1</span>).<span class="property">UI</span>组件:不能使用任何redux的api，只负责页面的呈现、交互等。</span><br><span class="line">        <span class="number">2</span>).容器组件：负责和redux通信，将结果交给<span class="variable constant_">UI</span>组件。</span><br><span class="line">(<span class="number">2</span>).如何创建一个容器组件————靠react-redux 的 connect函数</span><br><span class="line">        <span class="title function_">connect</span>(mapStateToProps,mapDispatchToProps)(<span class="variable constant_">UI</span>组件)</span><br><span class="line">            -<span class="attr">mapStateToProps</span>:映射状态，返回值是一个对象</span><br><span class="line">            -<span class="attr">mapDispatchToProps</span>:映射操作状态的方法，返回值是一个对象</span><br><span class="line">(<span class="number">3</span>).备注<span class="number">1</span>：容器组件中的store是靠props传进去的，而不是在容器组件中直接引入</span><br><span class="line">(<span class="number">4</span>).备注<span class="number">2</span>：mapDispatchToProps，也可以是一个对象</span><br></pre></td></tr></table></figure><h3 id="求和案例-react-redux优化"><a href="#求和案例-react-redux优化" class="headerlink" title="求和案例_react-redux优化"></a>求和案例_react-redux优化</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">1</span>).容器组件和<span class="variable constant_">UI</span>组件整合一个文件</span><br><span class="line">(<span class="number">2</span>).无需自己给容器组件传递store，给&lt;<span class="title class_">App</span>/&gt;包裹一个&lt;<span class="title class_">Provider</span> store=&#123;store&#125;&gt;即可。</span><br><span class="line">(<span class="number">3</span>).使用了react-redux后也不用再自己检测redux中状态的改变了，容器组件可以自动完成这个工作。</span><br><span class="line">(<span class="number">4</span>).<span class="property">mapDispatchToProps</span>也可以简单的写成一个对象</span><br><span class="line">(<span class="number">5</span>).一个组件要和redux“打交道”要经过哪几步？</span><br><span class="line">    <span class="number">1</span>).定义好<span class="variable constant_">UI</span>组件---不暴露</span><br><span class="line">    <span class="number">2</span>).引入connect生成一个容器组件，并暴露，写法如下：</span><br><span class="line">            <span class="title function_">connect</span>(</span><br><span class="line">                <span class="function"><span class="params">state</span> =&gt;</span> (&#123;<span class="attr">key</span>:value&#125;), <span class="comment">//映射状态</span></span><br><span class="line">                &#123;<span class="attr">key</span>:xxxxxAction&#125; <span class="comment">//映射操作状态的方法</span></span><br><span class="line">            )(<span class="variable constant_">UI</span>组件)</span><br><span class="line">    <span class="number">3</span>).在<span class="variable constant_">UI</span>组件中通过<span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">xxxxxxx</span>读取和操作状态</span><br></pre></td></tr></table></figure><h3 id="求和案例-react-redux数据共享版"><a href="#求和案例-react-redux数据共享版" class="headerlink" title="求和案例_react-redux数据共享版"></a>求和案例_react-redux数据共享版</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">1</span>).定义一个<span class="title class_">Pserson</span>组件，和<span class="title class_">Count</span>组件通过redux共享数据。</span><br><span class="line">(<span class="number">2</span>).为<span class="title class_">Person</span>组件编写：reducer、action，配置constant常量。</span><br><span class="line">(<span class="number">3</span>).重点：<span class="title class_">Person</span>的reducer和<span class="title class_">Count</span>的<span class="title class_">Reducer</span>要使用combineReducers进行合并，合并后的总状态是一个对象！！！</span><br><span class="line">(<span class="number">4</span>).交给store的是总reducer，最后注意在组件中取出状态的时候，记得“取到位”。</span><br></pre></td></tr></table></figure><h3 id="求和案例-react-redux开发者工具的使用"><a href="#求和案例-react-redux开发者工具的使用" class="headerlink" title="求和案例_react-redux开发者工具的使用"></a>求和案例_react-redux开发者工具的使用</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">1</span>).<span class="property">yarn</span> add redux-devtools-<span class="title function_">extension</span></span><br><span class="line">(<span class="number">2</span>).<span class="property">store</span>中进行配置</span><br><span class="line">    <span class="keyword">import</span> &#123;composeWithDevTools&#125; <span class="keyword">from</span> <span class="string">&#x27;redux-devtools-extension&#x27;</span></span><br><span class="line">    <span class="keyword">const</span> store = <span class="title function_">createStore</span>(allReducer,<span class="title function_">composeWithDevTools</span>(<span class="title function_">applyMiddleware</span>(thunk)))</span><br></pre></td></tr></table></figure><h3 id="求和案例-react-redux最终版"><a href="#求和案例-react-redux最终版" class="headerlink" title="求和案例_react-redux最终版"></a>求和案例_react-redux最终版</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">1</span>).所有变量名字要规范，尽量触发对象的简写形式。</span><br><span class="line">(<span class="number">2</span>).<span class="property">reducers</span>文件夹中，编写index.<span class="property">js</span>专门用于汇总并暴露所有的reducer</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;img  
                       lazyload
                       alt=&quot;image&quot;
                       data-src=&quot;/2024/08/13/redux/redux.gif&quot;
    </summary>
      
    
    
    
    <category term="前端" scheme="https://wuchu.site/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="Redux" scheme="https://wuchu.site/tags/Redux/"/>
    
  </entry>
  
  <entry>
    <title>Vue中对axios进行封装</title>
    <link href="https://wuchu.site/2024/08/13/axios/"/>
    <id>https://wuchu.site/2024/08/13/axios/</id>
    <published>2024-08-13T12:38:08.000Z</published>
    <updated>2024-11-19T11:41:38.724Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>Axios：这不是一种新技术，本质上还是对原生XMLHttpRequest的封装，可用于浏览器和nodejs的HTTP客户端，只不过它是基于Promise的，符合最新的ES规范。</strong></p></blockquote><h3 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h3><p>安装axios包</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add axios --save</span><br></pre></td></tr></table></figure><h3 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h3><p>在src目录下新建axios文件夹，在里面新建index.js文件。里面对axios进行一系列封装，包括添加拦截器和封装请求。</p><p><strong>src-&gt;axios-&gt;index.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入安装的axios</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"><span class="comment">// 导入elementUI错误消息提示</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Message</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;element-ui&#x27;</span></span><br><span class="line"><span class="comment">// 导入路由</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;../router/router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建axios请求实例,并暴</span></span><br><span class="line"><span class="keyword">const</span> myaxios = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">    <span class="attr">baseURL</span>: <span class="string">&#x27;http://localhost:8080&#x27;</span>,</span><br><span class="line">    <span class="attr">timeout</span>: <span class="number">1000</span>,</span><br><span class="line">    <span class="attr">headers</span>: &#123; <span class="string">&#x27;X-Custom-Header&#x27;</span>: <span class="string">&#x27;foobar&#x27;</span> &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加请求拦截器</span></span><br><span class="line">myaxios.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params">config</span>) &#123;</span><br><span class="line">    <span class="comment">// 在发送请求之前做些什么</span></span><br><span class="line">    <span class="comment">// 一般是添加token再发送</span></span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">&#125;, <span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="comment">// 对请求错误做些什么</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加响应拦截器</span></span><br><span class="line">myaxios.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params">response</span>) &#123;</span><br><span class="line">    <span class="comment">// 2xx 范围内的状态码都会触发该函数。</span></span><br><span class="line">    <span class="comment">// 对响应数据做点什么</span></span><br><span class="line">    <span class="comment">// 如果业务逻辑错误</span></span><br><span class="line">    <span class="keyword">if</span> (response.<span class="property">status</span> || response.<span class="property">status</span> === <span class="number">200</span>) &#123;</span><br><span class="line">        <span class="comment">// 如果返回数据中code=500,或者是未登录401,权限错误403</span></span><br><span class="line">        <span class="keyword">if</span> (response.<span class="property">data</span>.<span class="property">code</span> === <span class="number">500</span> || response.<span class="property">data</span>.<span class="property">code</span> === <span class="number">401</span> || response.<span class="property">data</span>.<span class="property">code</span> === <span class="number">403</span>) &#123;</span><br><span class="line">            <span class="title class_">Message</span>.<span class="title function_">error</span>(&#123; <span class="attr">message</span>: response.<span class="property">data</span>.<span class="property">message</span> &#125;);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果是其他</span></span><br><span class="line">        <span class="keyword">if</span> (response.<span class="property">data</span>.<span class="property">message</span>) &#123;</span><br><span class="line">            <span class="title class_">Message</span>.<span class="title function_">success</span>(&#123; <span class="attr">message</span>: response.<span class="property">data</span>.<span class="property">message</span> &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> response.<span class="property">data</span>;</span><br><span class="line">&#125;, <span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="comment">// 超出 2xx 范围的状态码都会触发该函数。</span></span><br><span class="line">    <span class="comment">// 对响应错误做点什么</span></span><br><span class="line">    <span class="keyword">if</span> (error.<span class="property">response</span>.<span class="property">data</span>.<span class="property">code</span> === <span class="number">504</span> || error.<span class="property">response</span>.<span class="property">data</span>.<span class="property">code</span> === <span class="number">404</span>) &#123;</span><br><span class="line">        <span class="title class_">Message</span>.<span class="title function_">error</span>(&#123; <span class="attr">message</span>: <span class="string">&#x27;服务器被吃了( •̀ ω •́ )&#x27;</span> &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (error.<span class="property">response</span>.<span class="property">data</span>.<span class="property">code</span> === <span class="number">403</span>) &#123;</span><br><span class="line">        <span class="title class_">Message</span>.<span class="title function_">error</span>(&#123; <span class="attr">message</span>: <span class="string">&#x27;权限不足，请联系管理员&#x27;</span> &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (error.<span class="property">response</span>.<span class="property">data</span>.<span class="property">code</span> === <span class="number">401</span>) &#123;</span><br><span class="line">        <span class="title class_">Message</span>.<span class="title function_">error</span>(&#123; <span class="attr">message</span>: <span class="string">&#x27;尚未登录，请登录！&#x27;</span> &#125;);</span><br><span class="line">        <span class="comment">//跳往登录界面</span></span><br><span class="line">        router.<span class="title function_">push</span>(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (error.<span class="property">response</span>.<span class="property">data</span>.<span class="property">message</span>) &#123;</span><br><span class="line">            <span class="title class_">Message</span>.<span class="title function_">error</span>(&#123; <span class="attr">message</span>: error.<span class="property">response</span>.<span class="property">data</span>.<span class="property">message</span> &#125;);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="title class_">Message</span>.<span class="title function_">error</span>(&#123; <span class="attr">message</span>:<span class="string">&#x27;未知错误去( •̀ ω •́ )✧&#x27;</span>&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//暴露接口</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> myaxios;</span><br></pre></td></tr></table></figure><h3 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h3><p>在main.js文件中全局引入配置好的myaxios。这样你在任何一个组件里都可以使用<code>this.$axios.get()、this.$axiso.post()</code> 等等直接向服务器发送请求。</p><p> <strong>main.js</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> myaxios <span class="keyword">from</span> <span class="string">&#x27;./utils/axios&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭vue的提示</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span><br><span class="line"><span class="comment">// 给全局Vue实例对象添加axios属性</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$axios</span> = myaxios;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>)</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Axios：这不是一种新技术，本质上还是对原生XMLHttpRequest的封装，可用于浏览器和nodejs的HTTP客户端，只不过它是基于Promise的，符合最新的ES规范。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;</summary>
      
    
    
    
    <category term="前端" scheme="https://wuchu.site/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="Axios" scheme="https://wuchu.site/tags/Axios/"/>
    
  </entry>
  
  <entry>
    <title>PG复制槽的原理</title>
    <link href="https://wuchu.site/2024/08/12/replication-slots/"/>
    <id>https://wuchu.site/2024/08/12/replication-slots/</id>
    <published>2024-08-12T08:02:38.000Z</published>
    <updated>2024-11-19T11:41:38.747Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、背景"><a href="#1、背景" class="headerlink" title="1、背景"></a>1、背景</h3><p>在主从复制的过程中，如果连接突然断开，主库中有些WAL日志文件还没有被从库备份就被删除了，导致备份的数据丢失。</p><h3 id="2、复制槽"><a href="#2、复制槽" class="headerlink" title="2、复制槽"></a>2、复制槽</h3><ul><li><p>复制槽提供了一种办法确保主库不会“删除”还未发送到备库的WAL日志，也不会删除备库需要的多版本，即使备库掉线。</p></li><li><p>replication slot能够确保在主备断连后主库的wal仍不被清理，因为replication slot的状态信息是持久化保存的，即便从库断掉或主库重启，这些信息仍然不会丢掉或失效。</p></li><li><p>replication slots 是从postgresql 9.4引入的，主要是提供了一种自动化的方法来确保主库在所有的备库收到wal之前不会移除它们，并且主库也不会移除可能导致恢复冲突的行(需要配合hot_standby_feedback)，即使备库断开也是如此。</p></li><li><p>在没有启用replication slots的环境中，如果碰到 ERROR: requested WAL segment xxxx has already been removed 的错误，解决办法是要么提前开启了归档，要么重做slave，另外还可以在主库上设置wal_keep_segments 为更大的值。当然，如果备库停机时间太长，可能主库的WAL日志目录会被撑满，如果设置了复制槽，建议将WAL日志目录放在大容量硬盘上。</p></li><li><p>PG 复制槽用于记录主备流复制的状态，主要目的是防止 wal 日志被过早的删除，导致备库流复制中断。复制槽是有状态的，能够持久化到磁盘上，允许宕机、重启场景下进行恢复。在有复制槽的场景下，即使备库关闭很长时间，主库也会为其保留足够的 wal 日志，直到备库恢复接收完这些 wal 日志，主库才会将其删除。当然这也带来了新的问题，即如果备库永远不恢复，那么主库的 wal 日志就会永远保留，导致磁盘空间耗尽，这时需要人工介入处理。</p></li></ul><h3 id="3、创建复制槽的方式"><a href="#3、创建复制槽的方式" class="headerlink" title="3、创建复制槽的方式"></a>3、创建复制槽的方式</h3><ul><li>在主库上执行下述SQL语句：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> pg_create_physical_replication_slot(<span class="string">&#x27;slot_s1&#x27;</span>);</span><br></pre></td></tr></table></figure><ul><li>备库使用 pg_basebackup 创建备份时指定参数 -C -S 来创建复制槽</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pg_basebackup <span class="operator">-</span>h <span class="operator">*</span>.<span class="operator">*</span>.<span class="operator">*</span>.<span class="operator">*</span> <span class="operator">-</span>p <span class="number">5432</span> <span class="operator">-</span>R <span class="operator">-</span>C <span class="operator">-</span>S slot_s1 <span class="operator">-</span>D <span class="operator">/</span>data<span class="operator">/</span>pg<span class="operator">/</span></span><br><span class="line"><span class="operator">-</span>R 表示写复制相关的配置文件，指定了 <span class="operator">-</span>R 参数，启动备库自动创建流复制</span><br><span class="line"><span class="operator">-</span>C 表示自动在主库创建复制槽，复制槽名称为 <span class="operator">-</span>S 指定，<span class="operator">-</span>C 必须与 <span class="operator">-</span>S 同时使用</span><br><span class="line"><span class="operator">-</span>S slot_s1 参数指定复制槽名称，备份完成后会自动在 postgresql.auto.conf 文件里加上参数 primary_slot_name <span class="operator">=</span> <span class="string">&#x27;slot_s1&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="4、启动备库并在主库上查看复制槽信息"><a href="#4、启动备库并在主库上查看复制槽信息" class="headerlink" title="4、启动备库并在主库上查看复制槽信息"></a>4、启动备库并在主库上查看复制槽信息</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> pg_replication_slots;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> pg_stat_replication;</span><br></pre></td></tr></table></figure><h3 id="5、为什么复制槽可以阻止wal日志被删除？"><a href="#5、为什么复制槽可以阻止wal日志被删除？" class="headerlink" title="5、为什么复制槽可以阻止wal日志被删除？"></a>5、为什么复制槽可以阻止wal日志被删除？</h3><p>ReplicationSlotsComputeRequiredLSN() 函数遍历所有复制槽，获取最小的 restart_lsn，将该值赋值给 XLogCtl-&gt;replicationSlotMinLSN。wal 日志的清除主要在 checkpoint 操作时进行，在创建 checkpoint 时，会调用 KeepLogSeg() 函数，依赖 XLogCtl-&gt;replicationSlotMinLSN 保留 wal 日志文件。<br>此外，ReplicationSlotsComputeRequiredXmin() 函数遍历所有复制槽，获取最小的 effective_xmin 和 effective_catalog_xmin，然后分别将其赋值给如下两个变量，这两个变量在事务快照等场景下会使用。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">procArray-&gt;replication_slot_xmin</span><br><span class="line">procArray-&gt;replication_slot_catalog_xmin</span><br></pre></td></tr></table></figure><h3 id="6-PG-复制槽相关参数"><a href="#6-PG-复制槽相关参数" class="headerlink" title="6. PG 复制槽相关参数"></a>6. PG 复制槽相关参数</h3><ul><li>max_replication_slots，最大的复制槽数量，取值范围为 0 ~ 0x3FFFF，默认值为 10， 设置为 0 表示禁用复制槽。</li><li>wal_level &gt;&#x3D; replica</li></ul><h3 id="7-复制槽共享内存初始化"><a href="#7-复制槽共享内存初始化" class="headerlink" title="7. 复制槽共享内存初始化"></a>7. 复制槽共享内存初始化</h3><p>复制槽相关的数据结构存储在共享内存中，大小由 max_replication_slots 参数决定，每个复制槽由结构体 ReplicationSlot 表示，其成员变量 in_use 表示该复制槽元素是否正在被使用。</p><ul><li>ReplicationSlotsShmemSize()，计算复制槽共享内存大小</li><li>ReplicationSlotsShmemInit()，初始化共享内存</li></ul><h3 id="8-PG-复制槽的实现逻辑"><a href="#8-PG-复制槽的实现逻辑" class="headerlink" title="8. PG 复制槽的实现逻辑"></a>8. PG 复制槽的实现逻辑</h3><h4 id="8-1-创建复制槽"><a href="#8-1-创建复制槽" class="headerlink" title="8.1 创建复制槽"></a>8.1 创建复制槽</h4><p>创建复制槽的函数调用关系：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">pg_create_physical_replication_slot</span>()</span><br><span class="line">    <span class="built_in">create_physical_replication_slot</span>()</span><br><span class="line">        <span class="built_in">ReplicationSlotCreate</span>()</span><br></pre></td></tr></table></figure><p>ReplicationSlotCreate() 函数实现了创建复制槽的功能，主要入参是复制槽名称，函数内部调用 ReplicationSlotValidateName() 函数对复制槽名称进行合法性检查。遍历共享内存中的 ReplicationSlot 数组，找到一个 in_use 为 0 的元素，对该元素的各成员进行初始化。遍历 ReplicationSlot 数组时，也会对复制槽名称是否出现同名进行检查，如果已有相同名称的复制槽则报错。最后调用 CreateSlotOnDisk() 函数，将复制槽的数据写入数据目录下的文件中，路径为 pg_replslot&#x2F;$slot_name&#x2F;state，文件内容为 ReplicationSlotOnDisk 结构体。</p><h4 id="8-2-启动复制槽"><a href="#8-2-启动复制槽" class="headerlink" title="8.2 启动复制槽"></a>8.2 启动复制槽</h4><p>在主库创建的复制槽需要在主备流复制启动后才能使用，备库发送 start replication 时可以指定复制槽名称来启动复制槽，函数调用</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">PostgresMain</span>()</span><br><span class="line">    <span class="built_in">exec_replication_command</span>()</span><br><span class="line">        <span class="built_in">StartReplication</span>()</span><br><span class="line">            <span class="built_in">WalSndLoop</span>()</span><br></pre></td></tr></table></figure><h3 id="9-导出函数和视图"><a href="#9-导出函数和视图" class="headerlink" title="9. 导出函数和视图"></a>9. 导出函数和视图</h3><p>slotfuncs.c 源文件中定义了一些导出函数和视图给用户调用，用于操作复制槽。<br>函数： pg_create_physical_replication_slot() pg_create_logical_replication_slot() pg_drop_replication_slot() pg_get_replication_slots() pg_replication_slot_advance()<br>视图： pg_replication_slots</p><h3 id="10-复制槽相关问题"><a href="#10-复制槽相关问题" class="headerlink" title="10. 复制槽相关问题"></a>10. 复制槽相关问题</h3><h4 id="10-1-复制槽-dirty-表示什么？"><a href="#10-1-复制槽-dirty-表示什么？" class="headerlink" title="10.1 复制槽 dirty 表示什么？"></a>10.1 复制槽 dirty 表示什么？</h4><p>MyReplicationSlot-&gt;just_dirtied &#x3D; true; MyReplicationSlot-&gt;dirty &#x3D; true;<br>复制槽数据在共享内存与磁盘上都会进行存储，当共享内存中的数据发生变化，则会将 MyReplicationSlot-&gt;dirty 标记为 true，刷盘后标记为 false。相关代码可参见 ReplicationSlotPersist() 函数。</p><h4 id="10-2-为什么复制槽能够阻止-wal-日志被清除？"><a href="#10-2-为什么复制槽能够阻止-wal-日志被清除？" class="headerlink" title="10.2 为什么复制槽能够阻止 wal 日志被清除？"></a>10.2 为什么复制槽能够阻止 wal 日志被清除？</h4><p>ReplicationSlotsComputeRequiredLSN() 函数遍历所有复制槽，获取最小的 restart_lsn，将该值赋值给 XLogCtl-&gt;replicationSlotMinLSN。wal 日志的清除主要在 checkpoint 操作时进行，在创建 checkpoint 时，会调用 KeepLogSeg() 函数，依赖 XLogCtl-&gt;replicationSlotMinLSN 保留 wal 日志文件。<br>此外，ReplicationSlotsComputeRequiredXmin() 函数遍历所有复制槽，获取最小的 effective_xmin 和 effective_catalog_xmin，然后分别将其赋值给如下两个变量，这两个变量在事务快照等场景下会使用。</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">procArray</span>-&gt;</span>replication_slot_xmin</span><br><span class="line"><span class="function"><span class="title">procArray</span>-&gt;</span>replication_slot_catalog_xmin</span><br></pre></td></tr></table></figure><h4 id="10-3-逻辑复制槽与物理复制槽的区别"><a href="#10-3-逻辑复制槽与物理复制槽的区别" class="headerlink" title="10.3 逻辑复制槽与物理复制槽的区别"></a>10.3 逻辑复制槽与物理复制槽的区别</h4><p>逻辑复制槽与物理复制槽在源码上的区别是 slot-&gt;data.database 是不是为 0 。</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#define SlotIsPhysical(<span class="name">slot</span>) ((<span class="name">slot</span>)-&gt;data.database == InvalidOid)</span><br><span class="line">#define SlotIsLogical(<span class="name">slot</span>) ((<span class="name">slot</span>)-&gt;data.database != InvalidOid)</span><br></pre></td></tr></table></figure><h4 id="10-4-复制槽的-xid-和-lsn-如何更新？"><a href="#10-4-复制槽的-xid-和-lsn-如何更新？" class="headerlink" title="10.4 复制槽的 xid 和 lsn 如何更新？"></a>10.4 复制槽的 xid 和 lsn 如何更新？</h4><p>在 wal sender 进程中接收备库发出的回馈信息，包含 feedbackXmin 和 feedbackCatalogXmin，这些信息被存储在 slot 的成员变量中，如下：</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">slot</span>-&gt;</span><span class="keyword">data</span>.xmin = feedbackXmin;</span><br><span class="line"><span class="function"><span class="title">slot</span>-&gt;</span>effective_xmin = feedbackXmin;</span><br><span class="line"><span class="function"><span class="title">slot</span>-&gt;</span><span class="keyword">data</span>.catalog_xmin = feedbackCatalogXmin;</span><br><span class="line"><span class="function"><span class="title">slot</span>-&gt;</span>effective_catalog_xmin = feedbackCatalogXmin;</span><br></pre></td></tr></table></figure><p>函数调用关系如下：</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">WalSndLoop</span>()</span></span><br><span class="line">    <span class="function"><span class="title">ProcessRepliesIfAny</span>()</span></span><br><span class="line">        <span class="function"><span class="title">ProcessStandbyMessage</span>()</span></span><br><span class="line">            <span class="function"><span class="title">ProcessStandbyHSFeedbackMessage</span>()</span></span><br><span class="line">                <span class="function"><span class="title">PhysicalReplicationSlotNewXmin</span>()</span></span><br></pre></td></tr></table></figure><p>lsn 的更新与逻辑复制有关，wal sender 进程在逻辑解码时，更新相关的 lsn，如下：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">slot-&gt;candidate_catalog_xmin <span class="operator">=</span> xmin<span class="comment">;</span></span><br><span class="line">slot-&gt;candidate_xmin_lsn <span class="operator">=</span> current_lsn<span class="comment">;</span></span><br><span class="line">slot-&gt;candidate_restart_valid <span class="operator">=</span> current_lsn<span class="comment">;</span></span><br><span class="line">slot-&gt;candidate_restart_lsn <span class="operator">=</span> restart_lsn<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>函数调用关系如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">WalSndLoop</span>()</span><br><span class="line">    <span class="built_in">XLogSendLogical</span>()</span><br><span class="line">        <span class="built_in">LogicalDecodingProcessRecord</span>()</span><br><span class="line">            <span class="built_in">DecodeStandbyOp</span>()</span><br><span class="line">                <span class="built_in">SnapBuildProcessRunningXacts</span>()</span><br><span class="line">                    <span class="built_in">LogicalIncreaseXminForSlot</span>()</span><br><span class="line">                    <span class="built_in">LogicalIncreaseRestartDecodingForSlot</span>()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1、背景&quot;&gt;&lt;a href=&quot;#1、背景&quot; class=&quot;headerlink&quot; title=&quot;1、背景&quot;&gt;&lt;/a&gt;1、背景&lt;/h3&gt;&lt;p&gt;在主从复制的过程中，如果连接突然断开，主库中有些WAL日志文件还没有被从库备份就被删除了，导致备份的数据丢失。&lt;/p&gt;
&lt;h</summary>
      
    
    
    
    <category term="PostgreSQL" scheme="https://wuchu.site/categories/PostgreSQL/"/>
    
    
    <category term="复制槽" scheme="https://wuchu.site/tags/%E5%A4%8D%E5%88%B6%E6%A7%BD/"/>
    
  </entry>
  
  <entry>
    <title>数据库基础知识</title>
    <link href="https://wuchu.site/2024/08/08/databse/"/>
    <id>https://wuchu.site/2024/08/08/databse/</id>
    <published>2024-08-08T03:26:08.000Z</published>
    <updated>2024-11-19T11:41:38.732Z</updated>
    
    <content type="html"><![CDATA[<p>数据库简答题</p><h3 id="典型数据库模型"><a href="#典型数据库模型" class="headerlink" title="典型数据库模型"></a>典型数据库模型</h3><p>层次数据模型、网状数据模型、关系数据模型、面向对象数据模型等</p><h3 id="mydql-postgres-oracle-mongodb"><a href="#mydql-postgres-oracle-mongodb" class="headerlink" title="mydql postgres oracle  mongodb"></a>mydql postgres oracle  mongodb</h3><h3 id="简述数据库、数据库系统、数据库管理系统"><a href="#简述数据库、数据库系统、数据库管理系统" class="headerlink" title="简述数据库、数据库系统、数据库管理系统"></a>简述数据库、数据库系统、数据库管理系统</h3><p>   数据库是长期存储在计算机内、有组织的、可共享的大量数据的集合。数据库中的数据按照一定的数据模型组织、描述和存储，具有较小的冗余度（redundancy）、较高的数据独立性（data independency）和易扩展性（scalability），可为各种用户共享。<br>    数据库系统是由数据库、数据库管理系统、应用程序和数据库管理员组成的存储、管理、处理和维护数据的系统。<br>    数据库管理系统是位于操作系统和用户之间的一层数据管理软件。</p><h3 id="数据管理技术三个阶段、数据库系统阶段的特点"><a href="#数据管理技术三个阶段、数据库系统阶段的特点" class="headerlink" title="数据管理技术三个阶段、数据库系统阶段的特点"></a>数据管理技术三个阶段、数据库系统阶段的特点</h3><p>（1）人工管理阶段（2）文件系统阶段（3）数据库系统阶段<br>数据库系统阶段的特点：<br>① 数据结构化         ②数据的共享性高、冗余度低、易扩充<br>③ 数据独立性高       ④数据由数据库管理系统统一管理和控制</p><p>文件系统<br>数据库管理系统<br>某一应用现实世界<br>共享性差，冗余度大共享性高，冗余度小<br>记录内有结构，整体无结构整体结构化，用数据模型描述<br>应用程序控制由数据库管理系统提供数据安全性，完整性，并发控制和恢复能力<br>独立性差具有高度的物理独立性和一定的逻辑独立性</p><h3 id="DBMS支持那几种数据模型"><a href="#DBMS支持那几种数据模型" class="headerlink" title="DBMS支持那几种数据模型"></a>DBMS支持那几种数据模型</h3><p>常用的是层次模型、网状模型、关系模型（最重要）。新兴的是面向对象数据模型和对象关系数据模型。<br>（1）层次模型是指用树型结构表示实体及其之间的联系，树中每一个节点代表一个记录类型，树状结构表示实体型之间的联系。在一个层次模型中的限制条件是：有且仅有一个节点，无父节点，此节点为树的根；其他节点有且仅有一个父节点。<br>（2）网状模型：用有向图结构表示实体类型及实体间联系的数据结构模型称为网状模型。网状模型的数据结构主要有以下两个特征: ①允许一个以上的节点无双亲。 ②一个节点可以有多于一个的双亲。<br>（3）关系模型是数据模型中最重要的。关系实际上就是关系模式在某一时刻的状态或内容。关系模式是型，关系是它的值。关系模式是静态的、稳定的，而关系是动态的、随时间不断变化的，因为关系操作在不断地更新着数据库中的数据。但在实际当中，常常把关系模式和关系统称为关系。现实世界的实体以及实体间的各种联系均用关系来表示，从用户角度看，关系模型中数据的逻辑结构是一张二维表。</p><h3 id="数据库应用系统开发阶段"><a href="#数据库应用系统开发阶段" class="headerlink" title="数据库应用系统开发阶段"></a>数据库应用系统开发阶段</h3><p>（1）需求分析（2）系统设计（3）系统实现（4）系统测试（5）系统运行与维护</p><h3 id="典型数据库系统举例："><a href="#典型数据库系统举例：" class="headerlink" title="典型数据库系统举例："></a>典型数据库系统举例：</h3><p>Access、DBase(前两者为桌面型)、SQL Server、Oracle、IBM DB、My SQL、Sybase</p><h3 id="简述两类数据模型"><a href="#简述两类数据模型" class="headerlink" title="简述两类数据模型"></a>简述两类数据模型</h3><p>（1）概念模型。E-R模型是用E-R图来描述现实世界的概念模型。<br>一种表示方法：实体-联系方法（entity-relationship approach），常用E-R图表示。<br>实体之间的联系：一对一、一对多、多对一、多对多<br>（2）逻辑模型和物理模型<br>逻辑结构设计中，一个实体型转换为一个关系模式。</p><h3 id="数据库的三级模式、两级映射："><a href="#数据库的三级模式、两级映射：" class="headerlink" title="数据库的三级模式、两级映射："></a>数据库的三级模式、两级映射：</h3><p>（1）三级模式<br>     外模式又称子模式或用户模式，对应于用户级。它是某个或某几个用户所看到的数据库的数据视图，是与某一应用有关的数据的逻辑表示。外模式是从模式导出的一个子集，包含模式中允许特定用户使用的那部分数据。用户可以通过外模式描述语言来描述、定义对应于用户的数据记录(外模式)，也可以利用数据操纵语言(Data Manipulation Language，DML)对这些数据记录进行。外模式反映了数据库的用户观。<br>模式又称逻辑模式，对应于概念级。它是由数据库设计者综合所有用户的数据，按照统一的观点构造的全局逻辑结构，是对数据库中全部数据的逻辑结构和特征的总体描述，是所有用户的公共数据视图(全局视图)。它是由数据库管理系统提供的数据描述语言(Data Defination Language，DDL)来描述、定义的，体现了数据库系统的整体观。<br>    内模式又称存储模式，对应于物理级，它是数据库中全体数据的内部表示或底层描述，是数据库最低一级的逻辑描述，它描述了数据在存储介质上的存储方式和物理结构，对应着实际存储在外存储介质上的数据库。内模式由内模式描述语言来描述、定义，它是数据库的存储观。<br>    在一个数据库系统中，只有唯一的数据库，因而作为定义、描述数据库存储结构的内模式和定义、描述数据库逻辑结构的模式也是唯一的，但建立在数据库系统之上的应用则是非常广泛、多样的，所以对应的外模式不唯一。<br>（2）两级映射<br>①外模式&#x2F;模式映像。当模式改变时，由数据库管理员对各个外模式&#x2F;模式映像作相应改变，可以使外模式保持不变。应用程序是依据外模式编写的，从而应用程序不用修改，保证了数据与程序的逻辑独立性，简称数据的逻辑独立性。②模式&#x2F;内模式映像 。当数据的存储结构改变时，由数据库管理员对模式&#x2F;内模式映像作相应改变，可以使模式保持不变，从而应用程序也不用改变。保证了数据与程序的物理独立性，简称数据的物理独立性。</p><h3 id="数据模型通常都是由数据结构、数据操作和完整性约束三个要素组成。"><a href="#数据模型通常都是由数据结构、数据操作和完整性约束三个要素组成。" class="headerlink" title="数据模型通常都是由数据结构、数据操作和完整性约束三个要素组成。"></a>数据模型通常都是由数据结构、数据操作和完整性约束三个要素组成。</h3><p>　　1）数据结构<br>　　数据结构用于描述数据库系统的静态特性。数据结构是所研究的对象类型的集合。这些对象是数据库的组成成分，是与数据类型、内容、性质有关的对象，例如关系模型中的域、属性、关系等。一旦数据结构定义好之后，一般不发生变化。<br>　　2）数据操作<br>　　数据操作用于描述数据库系统的动态特性。数据操作是指对数据库中各种对象（型）的实例（值）允许执行的操作的集合，包括操作及有关的操作规则。数据库主要有查询和更新（包括插入、删除、修改）两大类操作。数据模型必须定义这些操作的确切含义、操作符号、操作规则（如优先级）以及实现操作的语言。<br>　　3）完整性约束<br>　　数据的约束条件是一组完整性规则的集合。完整性规则是给定的数据模型中数据及其联系所具有的制约和储存规则，用以限定符合数据模型的数据库状态以及状态的变化，以保证数据的正确、有效和相容。在关系模型中，一般关系必须满足实体完整性和参照完整性两个条件。</p><h3 id="主码的作用"><a href="#主码的作用" class="headerlink" title="主码的作用"></a>主码的作用</h3><p>（1）唯一标识每个元组<br>（2）与关联表的外码建立联系，链接两个表<br>（3）使用主码值来组织关系的存储<br>（4）使用主码索引快速检索数据</p><h3 id="数据操作："><a href="#数据操作：" class="headerlink" title="数据操作："></a>数据操作：</h3><p>关系模型中常用的关系操作包括查询和数据更新两大部分：<br>查询: 选择、投影、连接、除、并、差、交、笛卡尔积等，其中选择、投影、并、差、笛卡尔积是5种基本操作<br>数据更新:插入、删除、修改<br>集合运算符：并、交、差、乘<br>专门运算符：选择、投影、连接、除<br>基本运算符：选择、投影、并、差、笛卡尔积</p><p>关系模型中常用的关系操作包括：选择（Select）、投影（Project）、连接（Join）、除（Divide）、并（Union）、交(Intersection）、差（Difference）等查询（Query）操作，和插入（Insert）、删除（Delete）、修改（Update）操作两大部分。查询是其中最主要的部分。<br>关系操作的特点是集合操作方式，即操作的对象和结果都是集合。这种操作方式也称为一次一集合（set-at-a-time）的方式。相应地，非关系数据模型的数据操作方式则为一次一记录（record-at-a-time）的方式。</p><h3 id="关系的完整性"><a href="#关系的完整性" class="headerlink" title="关系的完整性"></a>关系的完整性</h3><pre><code>关系的完整性规则是对关系的某种约束条件。</code></pre><p>（1）实体完整性，指在基本关系表中主码取值的约束，以保证每个元组可以被标识。约束规则：非空、唯一。<br>（2）参照完整性，指关系间需要遵循的数据约束，以保证关系间关联列的数据一致性。参照完整性是指外码取值必须与现有主码值相对应。<br>（3）用户定义完整性，指用户根据具体业务对数据处理规则要求所定义的数据约束。用户可定义列的数据类型、取值范围、缺省值、是否允许为空、取值唯一性、数据依赖性。</p><h3 id="外码"><a href="#外码" class="headerlink" title="外码"></a>外码</h3><p>   设F是基本关系R的一个或一组属性，但不是关系R的码，如果F与基本关系S的主码 Ks相对应，则称F是基本关系R的外码（Foreign key），并称基本关系R为参照关系（Referencing relation），基本关系S为被参照关系（Referenced relation）或目标关系（Target relation）。关系R和S不一定是不同的关系。</p><h3 id="简述-SQL-语言的特点"><a href="#简述-SQL-语言的特点" class="headerlink" title="简述 SQL 语言的特点"></a>简述 SQL 语言的特点</h3><p>SQL 语言集数据查询、数据操纵、数据定义和数据控制功能于一体，充分体现了关系数据库语言的特点和优点。其特点如下：①综合统一 ②高度非过程化 ③面向集合的操作方式 ④以同一种语法结构提供多种操作方式 ⑤语言简洁，易学易用</p><h3 id="SQL语言类别"><a href="#SQL语言类别" class="headerlink" title="SQL语言类别"></a>SQL语言类别</h3><p>（1）数据定义语言DDL（data definition language）:创建、删除、修改数据库对象（包括数据库、表、索引）   Create&#x2F;drop&#x2F;alter  database&#x2F;table&#x2F;index<br>（2）数据操纵语言DML（data manipulation language）:增加、删除、修改数据库<br>Insert、update、 delete<br>（3）数据查询语言DQL（data query language）:对数据库进行查询   select<br>（4）数据控制语言DCL（data control language）:对数据库对象访问权进行控制<br>Grant(授权)、 deny(拒绝)、 revoke(撤销)</p><h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><pre><code>在数据库中，索引是针对某个表中的一列或者几列建立的指向表中记录数据页的逻辑指针清单，可加快对数据表的快速信息检索，快速连接关联表，减少分组和排序时间。</code></pre><p>聚集索引与非聚集索引的区别：在聚集索引中，码值的逻辑顺序决定了表中相应行的物理顺序；在非聚集索引中，码值的逻辑顺序可以与表中相应行的物理顺序不同。</p><h3 id="视图的作用"><a href="#视图的作用" class="headerlink" title="视图的作用"></a>视图的作用</h3><p>（1）简化复杂的SQL查询操作。通过视图，开发人员可以将复杂的查询语句封装在视图内，使外部程序只需要简单方式访问该视图，便可获取所需数据。<br>（2）提高数据访问安全性。通过视图可以将基本数据表的部分敏感数据隐藏起来，外部用户无法得知完整数据，保护隐私，并降低数据库被攻击的风险。<br>（3）提供一定程度是数据逻辑独立性。当数据表的结构改变，只要视图的结构不变，应用程序可以不做修改。<br>（4）集中展示用户所感兴趣的特定部分。<br>（5）使用户能以多种角度看待同一数据。</p><h3 id="SQL主码约束和唯一约束有什么区别呢？"><a href="#SQL主码约束和唯一约束有什么区别呢？" class="headerlink" title="SQL主码约束和唯一约束有什么区别呢？"></a>SQL主码约束和唯一约束有什么区别呢？</h3><p>主码约束：由一列或多列的组合，其值能唯一的标识表中的每一行。<br>唯一约束：不允许数据库表在指定列上具有相同的值，但允许有空值。<br>区别：一个表可以定义多个唯一约束，但只能定义一个主码约束；空值的列上可以定义唯一约束，不能定义主键约束。</p><h3 id="什么是表？什么是视图？两者的区别和联系是什么？"><a href="#什么是表？什么是视图？两者的区别和联系是什么？" class="headerlink" title="什么是表？什么是视图？两者的区别和联系是什么？"></a>什么是表？什么是视图？两者的区别和联系是什么？</h3><p>表是实实在在得保存数据的实体,写入的数据都保存在表中；<br>视图是从一个或几个基本表导出的表，它与基本表不同，是一个虚表。数据库中只存放视图的定义，而不存放视图对应的数据，这些数据存放在原来的基本表中。所以基本表中的数据发生变化，从视图中查询出的数据也就随之改变了。视图一经定义就可以像基本表一样被查询、删除，也可以在一个视图之上再定义新的视图，但是对视图的更新操作有限制。<br>联系： 视图是在基本表之上建立的表，它的结构（即所定义的列）和内容（即所有数据行）都来自基本表，它依据基本表存在而存在。一个视图可以对应一个基本表，也可以对应多个基本表。视图是基本表的抽象和在逻辑意义上建立的新关系。</p><h3 id="说明等值连接与自然连接的区别与联系？"><a href="#说明等值连接与自然连接的区别与联系？" class="headerlink" title="说明等值连接与自然连接的区别与联系？"></a>说明等值连接与自然连接的区别与联系？</h3><p>自然连接是除去重复属性的等值连接。 两者之间的区别和联系如下：<br>（1）自然连接一定是等值连接，但等值连接不一定是自然连接；<br>（2）等值连接要求相等的分量，不一定是公共属性；而自然连接要求相等的分量必须是公共属性；<br>（3）等值连接不把重复的属性除去；而自然连接要把重复的属性除去。</p><h3 id="数据字典通常包含五个部分：数据项、数据结构、数据流、数据存储、处理过程"><a href="#数据字典通常包含五个部分：数据项、数据结构、数据流、数据存储、处理过程" class="headerlink" title="数据字典通常包含五个部分：数据项、数据结构、数据流、数据存储、处理过程"></a>数据字典通常包含五个部分：数据项、数据结构、数据流、数据存储、处理过程</h3><h3 id="范式：1NF-2NF-3NF-BCNF-First-Normal-Form-Boycee-Codd-Normal-Form"><a href="#范式：1NF-2NF-3NF-BCNF-First-Normal-Form-Boycee-Codd-Normal-Form" class="headerlink" title="范式：1NF  2NF   3NF   BCNF    First Normal Form    Boycee Codd Normal Form"></a>范式：1NF  2NF   3NF   BCNF    First Normal Form    Boycee Codd Normal Form</h3><p>1NF：每个属性都不可再分<br>2NF：在1NF的基础之上，消除了非主属性对于码的部分函数依赖<br>3NF：在2NF的基础之上，消除了非主属性对于码的传递函数依赖<br>BCNF：在3NF的基础上，消除主属性对于码的部分函数依赖与传递函数依赖</p><p>1NF有哪些缺点？<br>1、数据冗余太大（每一个系的系主任名字重复出现）<br>2、更新异常（某个系更换系主任之后，必须将该系学生有关的每一个元组）<br>3、插入异常（如果一个系刚成立，尚无学生，就无法将老师存入到数据库中）<br>4、删除异常（如果学生都毕业了，在删除学生时，把这个系的系主任的所有信息都删除了）</p><h3 id="E-R模型到关系模型的转换"><a href="#E-R模型到关系模型的转换" class="headerlink" title="E-R模型到关系模型的转换"></a>E-R模型到关系模型的转换</h3><p>（1）将每一个实体转换成关系表，实体的属性转换为表的列，实体的标识符转换为表的主码；<br>（2）将实体间的关系转换为表间的参照完整性约束，即通过设置外码来参照主码。</p><h3 id="数据库管理员DBA的职责："><a href="#数据库管理员DBA的职责：" class="headerlink" title="数据库管理员DBA的职责："></a>数据库管理员DBA的职责：</h3><p>①决定数据库中的信息内容和结构：数据库中要存放哪些信息<br>②决定数据库的存储结构和存取策略：获得较高的存取效率和存储空间利用率<br>③定义数据的安全性要求和完整性约束条件：负责确定各个用户对数据库的存取权限、数<br>据的保密级别和完整性约束条件<br>④监控数据库的使用和运行：转储数据、维护日志文件、故障恢复<br>①数据库的改进和重组重构：对运行情况进行记录、统计分析，以此来不断改进数据库设计</p><h3 id="事务管理与事务"><a href="#事务管理与事务" class="headerlink" title="事务管理与事务"></a>事务管理与事务</h3><p>事务管理：在数据库应用系统中，完成一个业务处理通常需要多个操作步骤。在每个操作步骤中，都可能遭遇失败，若没有一个处理机制，就可能造成操作数据混乱，从而破坏数据一致性。<br>事务：指由构成单个业务处理单元的一组数据库访问操作，它们要么都正常执行，要么都不执行，是一个不可分割的工作单位。在关系数据库中，⼀个事务可以是⼀条SQL语句、⼀组SQL语句或者整个程序。事务通常以BEGIN TRANSACTION开始，以COMMIT或ROLLBACK结束。COMMIT表⽰提交，即提交事务 的所有操作。具体的说就是将事务中所有对数据库的更新写回到磁盘上的物理数据库中去，事务正常结束。 ROLLBACK表⽰回滚，即在事务运⾏的过程中发⽣了某种故障，事务不能继续执⾏，系统将事务中对数据库的所 有已完成的操作全部撤销，回滚到事务开始时的状态。</p><p>事务ACID特性：<br>原子性（Atomicity）：事务的所有操作在数据库中要么全部执行，要么都不执行。<br>一致性（Consistency）：事务多次执行，结果应一致<br>隔离性（Isolation）：事务与事务之间隔离，并执行透明<br>持续性（Durability）：事务完成后，数据该改变必须是永久的</p><h3 id="为什么要进行数据库转储，比较各种数据转储方法？"><a href="#为什么要进行数据库转储，比较各种数据转储方法？" class="headerlink" title="为什么要进行数据库转储，比较各种数据转储方法？"></a>为什么要进行数据库转储，比较各种数据转储方法？</h3><p>所谓转储即DBA定期地将整个数据库复制到磁带或另一个磁盘上保存起来的过程。这些备用的数据文本称为后备副本或后援副本。当数据库遭到破坏后可以将后备副本重新装入，但重装后备副本只能将数据库恢复到转储时的状态，要想恢复到故障发生时的状态，必须重新运行自转储以后的所有更新事务。转储可分为静态转储和动态转储。转储还可以分为海量转储和增量转储两种方式。海量转储是指每次转储全部数据库。增量转储则指每次只转储上一次转储后更新过的数据。从恢复角度看，使用海量转储得到的后备副本进行恢复一般说来会更方便些。但如果数据库很大，事务处理又十分频繁，则增量转储方式更实用更有效。</p><h3 id="并发控制可能会产生哪几类数据不一致？用什么方法能避免各种不一致的情况？"><a href="#并发控制可能会产生哪几类数据不一致？用什么方法能避免各种不一致的情况？" class="headerlink" title="并发控制可能会产生哪几类数据不一致？用什么方法能避免各种不一致的情况？"></a>并发控制可能会产生哪几类数据不一致？用什么方法能避免各种不一致的情况？</h3><p>并发操作带来的数据不一致性包括三类：丢失修改、不可重复读和读“脏”数据。产生数据不一致性的主要原因是并发操作破坏了事务的隔离性。并发控制就是要用正确的方式调度并发操作，使一个用户事务的执行不受其它事务的干扰，从而避免造成数据的不一致性。并发控制的主要技术是封锁（Locking）。<br>丢失修改：当一个事务修改了数据，并且这种修改还没有提交到数据库中时，另外一个事务又对同样的数据进行了修改，并且把这种修改提交到了数据库中。这样，数据库中没有出现第一个事务修改数据的结果，好像这种数据修改丢失了一样。<br>不可重复读：在一个事务内，多次读同一数据。在这个事务还没有结束时，另一个事务也访问该同一数据，那么，在第一个事务中的两次读数据之间，由于第二个事务的修改，第一个事务两次读到的数据可能不一样。<br>读“脏”数据：当一个事务正在访问数据，并对数据进行了修改，而这种修改还没有提交到数据库中，这时另一个事务也访问这个数据并使用了这个数据。因为这个数据是还没有提交的数据，那么另一个事务读到的这个数据是脏数据，依据脏数据所做的操作可能是不正确的。</p><h3 id="数据库完整性与安全性的区别"><a href="#数据库完整性与安全性的区别" class="headerlink" title="数据库完整性与安全性的区别"></a>数据库完整性与安全性的区别</h3><p>完整性和安全性是两个不同的概念。前者是为了防止数据库中存在不符合语义的数据，防止错误信息的输入和输出造成的无效操作和错误结果，而后者是防止数据库被恶意的破坏和非法的存取。当然，完整性和安全性是密切相关的。特别是从系统实现的方法来看，某一种机制常常既可以用于安全保护亦可用于完整性保证。</p><h3 id="日志文件的定义与作用。"><a href="#日志文件的定义与作用。" class="headerlink" title="日志文件的定义与作用。"></a>日志文件的定义与作用。</h3><p>日志文件是用来记录事务对数据库的更新操作的文件。作用：在数据库恢复中起着重要的作用，可以用来进行事物故障恢复和系统故障恢复，并协助后备副本进行介质故障恢复。</p><h3 id="数据库恢复策略有哪几种？"><a href="#数据库恢复策略有哪几种？" class="headerlink" title="数据库恢复策略有哪几种？"></a>数据库恢复策略有哪几种？</h3><p>（1）数据转储（数据冗余）   （2）日志文件</p><h3 id="数据库：两段锁协议"><a href="#数据库：两段锁协议" class="headerlink" title="数据库：两段锁协议"></a>数据库：两段锁协议</h3><p>两段锁协议是指所有事务必须分两个阶段对数据项加锁和解锁。在对任何数据进行读、写操作之前，首先要申请并获得对该数据的封锁；在释放一个封锁之后，事务不再申请和获得任何其他封锁。<br>“两段”的含义是，事务分为两个阶段：第一阶段是获得封锁，也称为扩展阶段。在这阶段，事务可以申请获得任何数据项上的任何类型的锁，但是不能释放任何锁。第二阶段是释放封锁，也称为收缩阶段。在这阶段，事务释放已经获得的锁，但是不能再申请任何锁。<br>    可以证明，若并发执行的所有事务均遵守两段锁协议，则对这些事务的任何并发调度策 略都是可串行化的。 另外要注意两段锁协议和防止死锁的一次封锁法的异同之处。一次封锁法要求每个事务必须一次将所有要使用的数据全部加锁，否则就不能继续执行，因此一次封锁法遵守两段锁协议；但是两段锁协议并不要求事务必须一次将所有要使用的数据全部加锁，因此遵守两段锁协议的事务可能发生死锁。</p><h3 id="数据库故障的种类？"><a href="#数据库故障的种类？" class="headerlink" title="数据库故障的种类？"></a>数据库故障的种类？</h3><p>1、事务内部的故障2、系统故障3、介质故障4、计算机病毒</p><h3 id="数据库保护-访问-的内容有哪些？"><a href="#数据库保护-访问-的内容有哪些？" class="headerlink" title="数据库保护(访问)的内容有哪些？"></a>数据库保护(访问)的内容有哪些？</h3><p>① 利用权限机制和完整性约束防止非法数据进入数据库；<br>② 提供故障恢复能力；<br>② 提供并发访问控制。</p><h3 id="数据库有哪几种备份策略"><a href="#数据库有哪几种备份策略" class="headerlink" title="数据库有哪几种备份策略"></a>数据库有哪几种备份策略</h3><p>完全备份、事务日志备份、差异备份、文件备份。</p><h3 id="DBMS-的控制操作有哪些"><a href="#DBMS-的控制操作有哪些" class="headerlink" title="DBMS 的控制操作有哪些"></a>DBMS 的控制操作有哪些</h3><p>①数据的安全性保护；②数据的完整性检查；③并发控制；④数据库恢复。</p><h3 id="DBMS的数据控制功能有那些"><a href="#DBMS的数据控制功能有那些" class="headerlink" title="DBMS的数据控制功能有那些"></a>DBMS的数据控制功能有那些</h3><p>（1）数据定义功能。DBMS提供相应数据语言来定义（DDL）数据库结构，它们是刻画数据库框架，并被保存在数据字典中。<br>（2）数据存取功能。DBMS提供数据操纵语言（DML），实现对数据库数据的基本存取操作：检索，插入，修改和删除。<br>（3）数据库运行管理功能。DBMS提供数据控制功能，即是数据的安全性、完整性和并发控制等对数据库运行进行有效地控制和管理，以确保数据正确有效。<br>（4）数据库的建立和维护功能。包括数据库初始数据的装入，数据库的转储、恢复、重组织，系统性能监视、分析等功能。<br>（5）数据库的传输。DBMS提供处理数据的传输，实现用户程序与DBMS之间的通信，通常与操作系统协调完成。</p><h3 id="Java语言设计数据库"><a href="#Java语言设计数据库" class="headerlink" title="Java语言设计数据库"></a>Java语言设计数据库</h3><p>创建数据库链结－&gt;创建语句对象－&gt;执行SQL命令-&gt;访问执行结果集-&gt;关闭链结<br>（1）利用JDBC API建立数据库连接，<br>（2）在建立的数据库连接上，执行SQL语句访问数据库<br>（3）在JSP中处理SQL执行结果<br>（4）在JSP中释放数据库连接</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;数据库简答题&lt;/p&gt;
&lt;h3 id=&quot;典型数据库模型&quot;&gt;&lt;a href=&quot;#典型数据库模型&quot; class=&quot;headerlink&quot; title=&quot;典型数据库模型&quot;&gt;&lt;/a&gt;典型数据库模型&lt;/h3&gt;&lt;p&gt;层次数据模型、网状数据模型、关系数据模型、面向对象数据模型等&lt;/p&gt;
&lt;</summary>
      
    
    
    
    <category term="数据库基础" scheme="https://wuchu.site/categories/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="基础知识" scheme="https://wuchu.site/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>Postgresql中元组的隐藏字段与MVCC</title>
    <link href="https://wuchu.site/2024/08/07/mvcc/"/>
    <id>https://wuchu.site/2024/08/07/mvcc/</id>
    <published>2024-08-07T03:58:29.000Z</published>
    <updated>2024-11-19T11:41:38.732Z</updated>
    
    <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>看了两本书，对pg元组隐藏字段的描述都不太清楚，导致我很难理解隐藏字段值的变化原因，这里详细介绍隐藏一下pg中元组每个隐藏字段的意义。</p><h3 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h3><p>安装的pg版本为<code>11</code>，每个元组的头部信息在<code>HeapTupleHeaderData</code>中定义：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">HeapTupleHeaderData</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">union</span></span><br><span class="line">&#123;</span><br><span class="line">HeapTupleFields t_heap; <span class="comment">//存放元组描述信息</span></span><br><span class="line">DatumTupleFields t_datum;</span><br><span class="line">&#125;t_choice;</span><br><span class="line"></span><br><span class="line">ItemPointerData t_ctid;<span class="comment">/*元组的存放位置，一般值为“（blockid,itemid）”  */</span></span><br><span class="line">uint16t_infomask2;<span class="comment">/* 属性和标识位 */</span></span><br><span class="line">uint16t_infomask;<span class="comment">/* 其他标识位 */</span></span><br><span class="line">uint8t_hoff;<span class="comment">/* 首部+位图+填充的长度 */</span></span><br><span class="line">bits8t_bits[<span class="number">1</span>];<span class="comment">/* bitmap of NULLs */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>HeapTupleHeaderData中的<code>t_heap</code>存储着元组的一些描述信息，结构如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">HeapTupleFields</span></span><br><span class="line">&#123;</span><br><span class="line">TransactionId t_xmin;   <span class="comment">/* 插入或修改事务的ID */</span></span><br><span class="line">TransactionId t_xmax;   <span class="comment">/* 删除或者锁定事务的ID */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">union</span></span><br><span class="line">&#123;</span><br><span class="line">   CommandId t_cid;   <span class="comment">/* 插入或者删除的命令ID */</span></span><br><span class="line">   TransactionId t_xvac; <span class="comment">/* 执行vacuum full的事务ID */</span></span><br><span class="line">&#125;    t_field3;</span><br><span class="line">&#125; HeapTupleFields;</span><br></pre></td></tr></table></figure><p>经过分析源码，发现核心的隐藏字段有：<strong>t_ctid、t_xmin、t_xmax、t_cid</strong></p><p>执行命令：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> attname, attnum, attisdropped, attlen, attalign, attnotnull</span><br><span class="line"><span class="keyword">FROM</span> pg_catalog.pg_attribute <span class="keyword">WHERE</span> attrelid <span class="operator">=</span> <span class="string">&#x27;test&#x27;</span>::regclass</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> attnum;</span><br></pre></td></tr></table></figure><p>发现实际表的隐藏字段如下所示：</p><img                         lazyload                       alt="image"                       data-src="/2024/08/07/mvcc/image.png"                        class="" title="图一"                 ><p>所以说源码中的字段跟实际隐藏字段的name有区别，对应关系：</p><table><thead><tr><th>源码字段</th><th>实际隐藏字段</th></tr></thead><tbody><tr><td>t_ctid</td><td>ctid</td></tr><tr><td>t_xmin</td><td>xmin</td></tr><tr><td>t_xmax</td><td>xmax</td></tr><tr><td>t_cid</td><td>cmax、cmin</td></tr></tbody></table><h3 id="隐藏字段详细分析"><a href="#隐藏字段详细分析" class="headerlink" title="隐藏字段详细分析"></a>隐藏字段详细分析</h3><h5 id="t-ctid"><a href="#t-ctid" class="headerlink" title="t_ctid"></a>t_ctid</h5><img                         lazyload                       alt="image"                       data-src="/2024/08/07/mvcc/image.2.png"                        class="" title="图2️"                 > <img                         lazyload                       alt="image"                       data-src="/2024/08/07/mvcc/image.4.png"                        class="" title="图3"                 ><p>对应实际字段中的ctid，表示数据记录的物理行当信息，指的是一条记录位于哪个数据块的哪个位移上面。<br>格式<code>(blockid,itemid)</code>：拿上图其中的(0,1)来说；0表示块id；1表示在这块第一条记录。</p><ul><li><p><strong>当执行insert操作时，ctid的变化如下：</strong></p><img                         lazyload                       alt="image"                       data-src="/2024/08/07/mvcc/image.5.png"                        class="" title="图4"                 ><img                         lazyload                       alt="image"                       data-src="/2024/08/07/mvcc/image.6.png"                        class="" title="图5"                 ><p>看出来是顺序累加。</p></li><li><p><strong>当执行更新操作时，ctid的变化：</strong></p><img                         lazyload                       alt="image"                       data-src="/2024/08/07/mvcc/image.7.png"                        class="" title="图6"                 ><img                         lazyload                       alt="image"                       data-src="/2024/08/07/mvcc/image.8.png"                        class="" title="图7"                 ><img                         lazyload                       alt="image"                       data-src="/2024/08/07/mvcc/image.11.png"                        class="" title="图8"                 ><p>更新操作实际上就是先删除一条数据，再插入一条数据。但是这个删除并不会移除物理存储内容，也就是说（0，2）这个位置的元组还在，因此新插入的数据的ctid为（0，3）。<br>如果执行vacuum操作，再插入一条数据：</p><img                         lazyload                       alt="image"                       data-src="/2024/08/07/mvcc/image.9.png"                        class="" title="图9"                 ></li></ul><blockquote><p><strong>发现并不会在（0，2）位置上插入新数据？</strong><br><strong>分析：</strong>新插入的数据通常不会立即填充刚刚清理的空间，而是优先使用表末尾的空闲空间，这涉及到数据库的存储管理和性能优化策略。减少碎片化：优先使用表末尾的空闲空间可以减少数据文件的碎片化，提高查询性能。提高插入性能：插入新数据到表末尾的空闲空间比在表中间找到一个合适的空闲位置更高效。</p></blockquote><h5 id="t-xmin"><a href="#t-xmin" class="headerlink" title="t_xmin"></a>t_xmin</h5><p>存储的是产生这个元组的事务ID，可能是insert或者update语句</p><img                         lazyload                       alt="image"                       data-src="/2024/08/07/mvcc/image.12.png"                        class="" title="图10"                 ><h5 id="t-xmax"><a href="#t-xmax" class="headerlink" title="t_xmax"></a>t_xmax</h5><p>存储的是删除或者锁定这个元组的事务ID</p><h5 id="t-cid"><a href="#t-cid" class="headerlink" title="t_cid"></a>t_cid</h5><p>包含cmin和cmax两个字段，分别存储创建这个元组的Command ID和删除这个元组的Command ID。在事务执行期间，会给改期间执行的所以命令设置一个唯一ID，也就是Command ID。</p><h3 id="MVCC的可见性判断"><a href="#MVCC的可见性判断" class="headerlink" title="MVCC的可见性判断"></a>MVCC的可见性判断</h3><p>MVCC 可见性判断主要就是将元组的 xmin、xmax、cmin、cmax 以及 t_infomask 信息结合快照 snapshot 以及 CLOG 中的信息，根据可见性判断规则，决定一个元组是否可见。<br>可见性判断主要分为两个部分：</p><ul><li>对元组的 xmin 进行可见性判断，即 insert 该元组的事务是否已提交，是否可见。</li><li>对元组的 xmax 进行可见性判断，即该元组是否已被 update 或者 delete。</li></ul><p>为了简化逻辑，去除了一些兼容相关的干扰以及很少走到的一些代码路径。以下是关于元组 xmin 的判断规则：</p><p>1.如果元组 xmin 未提交，判断条件为：!(t_infomask &amp; HEAP_XMIN_COMMITTED)</p><p>1.1 如果元组的 xmin 无效，即 HeapTupleHeaderXminInvalid(tuple)，返回不可见</p><p>1.2 如果元组的 xmin 在当前事务（包含子事务）中</p><ul><li>1.2.1 如果元组的 cmin 大于等于 快照的 commandId，返回不可见</li><li>1.2.2 如果元组的 t_infomask 包含 HEAP_XMAX_INVALID 标记，即 xmax 无效，返回可见</li><li>1.2.3 如果元组的 t_infomask 仅包含 HEAP_XMAX_EXCL_LOCK，返回可见</li><li>1.2.4 如果元组的 xmax 不在当前事务中，设置标记 HEAP_XMAX_INVALID，返回可见</li><li>1.2.5 如果元组的 cmax 大于等于快照的 commandId，返回可见，否则返回不可见</li></ul><p>1.3 如果元组的 xmin 在快照的活跃事务列表中，返回不可见</p><p>1.4 如果元组的 xmin 在 clog 中已提交，设置标记 HEAP_XMIN_COMMITTED</p><p>1.5 设置标记 HEAP_XMIN_INVALID，返回不可见</p><p>2.如果元组的 xmin 已提交</p><p>2.1 如果元组的 xmin 未冻结并且 xmin 在快照活跃事务列表中，返回不可见</p><p><strong>到此说明元组的 xmin 已提交，即 insert 已提交，是否可见还得看 xmax，下面是关于 xmax 的判断规则</strong></p><p>3.t_infomask 标记包含 HEAP_XMAX_INVALID，返回可见</p><p>4.t_infomask 标记满足 HEAP_XMAX_IS_LOCKED_ONLY，返回可见</p><p>5.如果 t_infomask 不包含 HEAP_XMAX_COMMITTED</p><p>5.1 如果 xmax 在当前事务中</p><ul><li>5.1.1 cmax 大于等于快照的cid，返回可见</li><li>5.1.2 cmax 小于快照的 cid，返回不可见</li></ul><p>5.2 如果 xmax 在快照的活跃事务列表中，返回可见</p><p>5.3 如果 xmax 在 clog 中没有提交，设置标记 HEAP_XMAX_INVALID，返回可见</p><p>5.4 设置标记 HEAP_XMAX_COMMITTED</p><p>6.t_infomask 包含 HEAP_XMAX_COMMITTED</p><p>6.1 如果 xmax 在快照的活跃事务列表中，返回可见</p><p>除了以上描述的情况外，其他的都返回不可见</p><p>7.其他都是返回不可见</p><p>以上分析可以看出 MVCC 可见性判断的规则还是比较复杂的，考虑了很多场景，规则之间还有先后顺序依赖。总结可见性规则影响因素如下：</p><ul><li>xmin 是否已提交，是否有效</li><li>xmin 是否在当前会话的事务中</li><li>xmin 是否在快照活跃事务列表中</li><li>xmin 在 clog 中的状态</li><li>cmin 与 快照 cid 的大小比较</li><li>xmax 是否已提交，是否有效</li><li>xmax 是否在当前会话的事务中</li><li>xmax 是否在快照活跃事务列表中</li><li>xmax 在 clog 中的状态</li><li>cmax 与快照 cid 的大小比较</li></ul><p>关于可见性分析，有两点需要注意：</p><ol><li>即使是 select 查询，也可能会写 wal 日志，比如设置 HEAP_XMIN_COMMITTED 这个操作就会涉及写 wal 日志。</li><li>此外即使 insert 事务已提交，已经写入 CLOG，但是该事务的事务号还没有从活跃事务列表中删除，那么元组仍然是不可见的。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h3&gt;&lt;p&gt;看了两本书，对pg元组隐藏字段的描述都不太清楚，导致我很难理解隐藏字段值的变化原因，这里详细介绍隐藏一下pg中元组每个隐藏字段的意义。&lt;/p</summary>
      
    
    
    
    <category term="PostgreSQL" scheme="https://wuchu.site/categories/PostgreSQL/"/>
    
    
    <category term="MVCC" scheme="https://wuchu.site/tags/MVCC/"/>
    
  </entry>
  
  <entry>
    <title>Postgresql的日志系统</title>
    <link href="https://wuchu.site/2024/08/07/log/"/>
    <id>https://wuchu.site/2024/08/07/log/</id>
    <published>2024-08-07T03:58:29.000Z</published>
    <updated>2024-11-19T11:41:38.732Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、postgresql日志类型"><a href="#1、postgresql日志类型" class="headerlink" title="1、postgresql日志类型"></a>1、postgresql日志类型</h3><ol><li><strong>pg_log –&gt; log：</strong>数据库运行日志，如各种error信息，慢查询，服务器与DB的状态信息等，默认关闭，可以通过参数自定义存储位置，格式等</li><li><strong>pg_xlog –&gt; pg_wal：</strong>WAL日志，即重做日志，默认大小16MB，强制打开</li><li><strong>pg_clog –&gt; pg_xact：</strong>事务提交日志，记录事务的元数据，强制打开</li></ol><blockquote><p>在10.0版本开始，pg_xlog目录被重新命名为pg_wal，pg_clog目录被重命名为pg_xact,pg_log目录被重命名为log</p></blockquote><h3 id="2、pg-log的开启，修改postgresql-conf相关配置"><a href="#2、pg-log的开启，修改postgresql-conf相关配置" class="headerlink" title="2、pg_log的开启，修改postgresql.conf相关配置"></a>2、pg_log的开启，修改postgresql.conf相关配置</h3><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">##开启日志记录</span><br><span class="line">logging_collector = <span class="keyword">on</span></span><br><span class="line"></span><br><span class="line">##stderr,csvlog,syslog,<span class="keyword">and</span> eventlog，默认stderr</span><br><span class="line">log_destination = <span class="string">&#x27;stderr&#x27;</span></span><br><span class="line"></span><br><span class="line">##日志保存路径</span><br><span class="line">log_directory = <span class="string">&#x27;/data/pg_data/log/&#x27;</span></span><br><span class="line"></span><br><span class="line">##日志文件格式</span><br><span class="line">log_filename = <span class="string">&#x27;postgresql-%Y-%m-%d_%H%M%S.log&#x27;</span></span><br><span class="line"></span><br><span class="line">##日志文件权限</span><br><span class="line">log_file_mode = <span class="number">0600</span></span><br><span class="line"></span><br><span class="line">##是否开启通过日志覆盖模式</span><br><span class="line">log_truncate_on_rotation = <span class="keyword">off</span></span><br><span class="line"></span><br><span class="line">##日志输出格式</span><br><span class="line">log_line_prefix = <span class="string">&#x27;%t:%r:%u@%d:[%p]:&#x27;</span></span><br><span class="line"></span><br><span class="line">##<span class="keyword">none</span>, ddl, mod, <span class="keyword">all</span>，需要记录的类型</span><br><span class="line">log_statement = <span class="string">&#x27;ddl&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="3、WAL日志LSN（log-sequence-number）编号规则"><a href="#3、WAL日志LSN（log-sequence-number）编号规则" class="headerlink" title="3、WAL日志LSN（log sequence number）编号规则"></a>3、WAL日志LSN（log sequence number）编号规则</h3><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查看当前的lsn号</span></span><br><span class="line"><span class="keyword">select</span> pg_current_wal_lsn();</span><br><span class="line"><span class="number">0</span>/<span class="number">3E4</span>E6A0</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看的当前lsn的wal日志文件名</span></span><br><span class="line"><span class="keyword">select</span> pg_walfile_name(pg_current_wal_lsn());</span><br><span class="line"><span class="number">000000030000000000000003</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看当前lsn的偏移量</span></span><br><span class="line"><span class="keyword">select</span> pg_walfile_name_offset(pg_current_wal_lsn());</span><br><span class="line">(<span class="number">000000030000000000000003</span>,<span class="number">15001248</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 16进制转换数值</span></span><br><span class="line"><span class="keyword">select</span> x<span class="string">&#x27;E4E6A0&#x27;</span>::<span class="type">int</span></span><br><span class="line"><span class="number">15001248</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 手动刷新wal</span></span><br><span class="line"><span class="keyword">select</span> pg_switch_wal();</span><br></pre></td></tr></table></figure><h3 id="4、WAL流程"><a href="#4、WAL流程" class="headerlink" title="4、WAL流程"></a>4、WAL流程</h3><ul><li>当数据库中的数据发生变更时：<ul><li>change发送时：将所有data buffer刷新到磁盘</li><li>commit发生时：wal buffer 中数据刷新到磁盘</li><li>checkpoint发送时：将所有data buffer刷新到磁盘<blockquote><p>“checkpoint”是一个事件，它会将所有在内存中的已修改数据页（data buffer）写入到磁盘上的数据文件中，同时更新日志文件确保在发生系统故障时可以恢复数据。</p></blockquote></li></ul></li><li>触发checkpoint触发场景：<ul><li>checkpoit相关配置</li><li>max_wal_size已满</li><li>checkpoit相关配置</li><li>max_wal_size已满</li></ul></li><li>checkpoit相关配置:<figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查看checkpoint_timeout配置，默认5min</span></span><br><span class="line"><span class="keyword">show</span> checkpoint_timeout;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看max_wal_size配置，默认1GB</span></span><br><span class="line"><span class="keyword">show</span> max_wal_size;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- checkpoint_completion_target:指定检查点完成的目标。默认0.5</span></span><br><span class="line"><span class="comment">-- 可以降低checkpoint对性能的影，但是数值过大时在数据库出现故障时候，会比较危险</span></span><br><span class="line"><span class="keyword">show</span> checkpoint_completion_target;</span><br></pre></td></tr></table></figure></li></ul><h3 id="5、WAL日志解析工具使用"><a href="#5、WAL日志解析工具使用" class="headerlink" title="5、WAL日志解析工具使用"></a>5、WAL日志解析工具使用</h3><ul><li>10.x版本之后，使用pg_waldump解析WAL日志</li><li>10.x版本之前，使用pg_xlogdump解析WAL日志</li></ul><p>pg_waldump使用语法：</p><figure class="highlight postgresql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pg_waldump [<span class="keyword">option</span>] … [startseg [endseg]]</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1、postgresql日志类型&quot;&gt;&lt;a href=&quot;#1、postgresql日志类型&quot; class=&quot;headerlink&quot; title=&quot;1、postgresql日志类型&quot;&gt;&lt;/a&gt;1、postgresql日志类型&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;</summary>
      
    
    
    
    <category term="PostgreSQL" scheme="https://wuchu.site/categories/PostgreSQL/"/>
    
    
    <category term="日志" scheme="https://wuchu.site/tags/%E6%97%A5%E5%BF%97/"/>
    
  </entry>
  
</feed>
